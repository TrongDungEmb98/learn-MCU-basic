
stm32_to_usb_ttl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000553c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080056d0  080056d0  000156d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000694  20000000  08005a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020694  2**0
                  CONTENTS
  8 .bss          00000524  20000694  20000694  00020694  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000bb8  20000bb8  00020694  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY
 11 .debug_info   000075ff  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001430  00000000  00000000  00027cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007c0  00000000  00000000  000290f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006f8  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002cfc  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000027e9  00000000  00000000  0002ccac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002f495  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029f4  00000000  00000000  0002f514  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00031f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000694 	.word	0x20000694
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056b4 	.word	0x080056b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000698 	.word	0x20000698
 80001cc:	080056b4 	.word	0x080056b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73bb      	strb	r3, [r7, #14]
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	78db      	ldrb	r3, [r3, #3]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d039      	beq.n	8000f40 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <NVIC_Init+0xbc>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f1c3 0304 	rsb	r3, r3, #4
 8000ee2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ee4:	7b7a      	ldrb	r2, [r7, #13]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	789a      	ldrb	r2, [r3, #2]
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	4013      	ands	r3, r2
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <NVIC_Init+0xc0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <NVIC_Init+0xc0>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f3e:	e00f      	b.n	8000f60 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f40:	490b      	ldr	r1, [pc, #44]	; (8000f70 <NVIC_Init+0xc0>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	2201      	movs	r2, #1
 8000f56:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f58:	f100 0320 	add.w	r3, r0, #32
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e076      	b.n	800107e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f90:	2201      	movs	r2, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d165      	bne.n	8001078 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d003      	beq.n	8000fea <GPIO_Init+0x76>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d12e      	bne.n	8001048 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	4619      	mov	r1, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	2301      	movs	r3, #1
 8001024:	408b      	lsls	r3, r1
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	7992      	ldrb	r2, [r2, #6]
 8001036:	4611      	mov	r1, r2
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	b292      	uxth	r2, r2
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	b292      	uxth	r2, r2
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	b29b      	uxth	r3, r3
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2103      	movs	r1, #3
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	79db      	ldrb	r3, [r3, #7]
 8001068:	4619      	mov	r1, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d985      	bls.n	8000f90 <GPIO_Init+0x1c>
    }
  }
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e001      	b.n	80010b6 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	831a      	strh	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	835a      	strh	r2, [r3, #26]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001118:	787a      	ldrb	r2, [r7, #1]
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	08db      	lsrs	r3, r3, #3
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	210f      	movs	r1, #15
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	ea02 0103 	and.w	r1, r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f100 0208 	add.w	r2, r0, #8
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	08db      	lsrs	r3, r3, #3
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011a2:	2300      	movs	r3, #0
 80011a4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80011a6:	2304      	movs	r3, #4
 80011a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <I2C_Init+0x174>)
 80011ac:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f9e9 	bl	8001598 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	; (800130c <I2C_Init+0x178>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80011d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011da:	4313      	orrs	r3, r2
 80011dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011e2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a44      	ldr	r2, [pc, #272]	; (8001310 <I2C_Init+0x17c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d815      	bhi.n	800122e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001212:	2b03      	cmp	r3, #3
 8001214:	d801      	bhi.n	800121a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001216:	2304      	movs	r3, #4
 8001218:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800121a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800121c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800121e:	4313      	orrs	r3, r2
 8001220:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001224:	3301      	adds	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	841a      	strh	r2, [r3, #32]
 800122c:	e040      	b.n	80012b0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	88db      	ldrh	r3, [r3, #6]
 8001232:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001236:	4293      	cmp	r3, r2
 8001238:	d109      	bne.n	800124e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800124c:	e00e      	b.n	800126c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009a      	lsls	r2, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800126c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800127e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001282:	4313      	orrs	r3, r2
 8001284:	b29b      	uxth	r3, r3
 8001286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800128a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800128e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <I2C_Init+0x180>)
 800129c:	fb82 1203 	smull	r1, r2, r2, r3
 80012a0:	1192      	asrs	r2, r2, #6
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012b4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80012cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ce:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80012d2:	f023 0302 	bic.w	r3, r3, #2
 80012d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	889a      	ldrh	r2, [r3, #4]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	895b      	ldrh	r3, [r3, #10]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012e6:	4313      	orrs	r3, r2
 80012e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012ee:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	899a      	ldrh	r2, [r3, #12]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	891b      	ldrh	r3, [r3, #8]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	811a      	strh	r2, [r3, #8]
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	007a1200 	.word	0x007a1200
 800130c:	431bde83 	.word	0x431bde83
 8001310:	000186a0 	.word	0x000186a0
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800133a:	e007      	b.n	800134c <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	801a      	strh	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800137a:	e007      	b.n	800138c <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	801a      	strh	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80013ba:	e007      	b.n	80013cc <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	801a      	strh	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80013e8:	78bb      	ldrb	r3, [r7, #2]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	70fb      	strb	r3, [r7, #3]
 80013f6:	e003      	b.n	8001400 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	821a      	strh	r2, [r3, #16]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001436:	e007      	b.n	8001448 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	801a      	strh	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	821a      	strh	r2, [r3, #16]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8a9b      	ldrh	r3, [r3, #20]
 8001492:	b29b      	uxth	r3, r3
 8001494:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	8b1b      	ldrh	r3, [r3, #24]
 800149a:	b29b      	uxth	r3, r3
 800149c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014ae:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	401a      	ands	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d102      	bne.n	80014c2 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80014bc:	2301      	movs	r3, #1
 80014be:	75fb      	strb	r3, [r7, #23]
 80014c0:	e001      	b.n	80014c6 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	0f1b      	lsrs	r3, r3, #28
 80014f2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014fa:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3314      	adds	r3, #20
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e005      	b.n	8001516 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3318      	adds	r3, #24
 8001514:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
 8001526:	e001      	b.n	800152c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800152c:	7dfb      	ldrb	r3, [r7, #23]
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <RCC_DeInit+0x50>)
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <RCC_DeInit+0x50>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <RCC_DeInit+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <RCC_DeInit+0x50>)
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <RCC_DeInit+0x50>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <RCC_DeInit+0x50>)
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <RCC_DeInit+0x54>)
 8001566:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <RCC_DeInit+0x50>)
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <RCC_DeInit+0x58>)
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <RCC_DeInit+0x50>)
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <RCC_DeInit+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <RCC_DeInit+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40023800 	.word	0x40023800
 8001590:	24003010 	.word	0x24003010
 8001594:	20003000 	.word	0x20003000

08001598 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	2302      	movs	r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80015b8:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d007      	beq.n	80015d8 <RCC_GetClocksFreq+0x40>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d009      	beq.n	80015e0 <RCC_GetClocksFreq+0x48>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d13d      	bne.n	800164c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a42      	ldr	r2, [pc, #264]	; (80016dc <RCC_GetClocksFreq+0x144>)
 80015d4:	601a      	str	r2, [r3, #0]
      break;
 80015d6:	e03d      	b.n	8001654 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a41      	ldr	r2, [pc, #260]	; (80016e0 <RCC_GetClocksFreq+0x148>)
 80015dc:	601a      	str	r2, [r3, #0]
      break;
 80015de:	e039      	b.n	8001654 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80015e0:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0d9b      	lsrs	r3, r3, #22
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00c      	beq.n	8001616 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <RCC_GetClocksFreq+0x148>)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 8001606:	6852      	ldr	r2, [r2, #4]
 8001608:	0992      	lsrs	r2, r2, #6
 800160a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	e00b      	b.n	800162e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <RCC_GetClocksFreq+0x144>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 8001620:	6852      	ldr	r2, [r2, #4]
 8001622:	0992      	lsrs	r2, r2, #6
 8001624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	3301      	adds	r3, #1
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	fbb2 f2f3 	udiv	r2, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
      break;
 800164a:	e003      	b.n	8001654 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <RCC_GetClocksFreq+0x144>)
 8001650:	601a      	str	r2, [r3, #0]
      break;
 8001652:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <RCC_GetClocksFreq+0x14c>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	40da      	lsrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001684:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	0a9b      	lsrs	r3, r3, #10
 800168a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800168c:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <RCC_GetClocksFreq+0x14c>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	40da      	lsrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <RCC_GetClocksFreq+0x140>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	0b5b      	lsrs	r3, r3, #13
 80016b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80016b4:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <RCC_GetClocksFreq+0x14c>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4413      	add	r3, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3724      	adds	r7, #36	; 0x24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	017d7840 	.word	0x017d7840
 80016e4:	20000000 	.word	0x20000000

080016e8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80016fa:	490a      	ldr	r1, [pc, #40]	; (8001724 <RCC_AHB1PeriphClockCmd+0x3c>)
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <RCC_AHB1PeriphClockCmd+0x3c>)
 80016fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001706:	e006      	b.n	8001716 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <RCC_AHB1PeriphClockCmd+0x3c>)
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <RCC_AHB1PeriphClockCmd+0x3c>)
 800170c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	43db      	mvns	r3, r3
 8001712:	4013      	ands	r3, r2
 8001714:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <RCC_APB1PeriphClockCmd+0x3c>)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <RCC_APB1PeriphClockCmd+0x3c>)
 800173e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4313      	orrs	r3, r2
 8001744:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001746:	e006      	b.n	8001756 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <RCC_APB1PeriphClockCmd+0x3c>)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <RCC_APB1PeriphClockCmd+0x3c>)
 800174c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	43db      	mvns	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800177a:	490a      	ldr	r1, [pc, #40]	; (80017a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800177e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001786:	e006      	b.n	8001796 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001788:	4906      	ldr	r1, [pc, #24]	; (80017a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800178c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	43db      	mvns	r3, r3
 8001792:	4013      	ands	r3, r2
 8001794:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8a1b      	ldrh	r3, [r3, #16]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	88db      	ldrh	r3, [r3, #6]
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	4313      	orrs	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	899b      	ldrh	r3, [r3, #12]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017f4:	f023 030c 	bic.w	r3, r3, #12
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	889a      	ldrh	r2, [r3, #4]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	891b      	ldrh	r3, [r3, #8]
 8001802:	4313      	orrs	r3, r2
 8001804:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800180a:	4313      	orrs	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	4313      	orrs	r3, r2
 8001814:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	b29a      	uxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	8a9b      	ldrh	r3, [r3, #20]
 8001822:	b29b      	uxth	r3, r3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	899b      	ldrh	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	4313      	orrs	r3, r2
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fea6 	bl	8001598 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <USART_Init+0x168>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d003      	beq.n	800185c <USART_Init+0xb4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <USART_Init+0x16c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	e001      	b.n	8001866 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	899b      	ldrh	r3, [r3, #12]
 800186a:	b29b      	uxth	r3, r3
 800186c:	b21b      	sxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	da0c      	bge.n	800188c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001872:	6a3a      	ldr	r2, [r7, #32]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	441a      	add	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e00b      	b.n	80018a4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800188c:	6a3a      	ldr	r2, [r7, #32]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009a      	lsls	r2, r3, #2
 8001896:	441a      	add	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <USART_Init+0x170>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	2264      	movs	r2, #100	; 0x64
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	899b      	ldrh	r3, [r3, #12]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0c      	bge.n	80018e8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	3332      	adds	r3, #50	; 0x32
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <USART_Init+0x170>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e2:	4313      	orrs	r3, r2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e00b      	b.n	8001900 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	3332      	adds	r3, #50	; 0x32
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <USART_Init+0x170>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fc:	4313      	orrs	r3, r2
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	811a      	strh	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40011000 	.word	0x40011000
 8001914:	40011400 	.word	0x40011400
 8001918:	51eb851f 	.word	0x51eb851f

0800191c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	899b      	ldrh	r3, [r3, #12]
 8001932:	b29b      	uxth	r3, r3
 8001934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800193e:	e007      	b.n	8001950 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	899b      	ldrh	r3, [r3, #12]
 8001944:	b29b      	uxth	r3, r3
 8001946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	819a      	strh	r2, [r3, #12]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	b2db      	uxtb	r3, r3
 8001988:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001992:	2201      	movs	r2, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d103      	bne.n	80019aa <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	330c      	adds	r3, #12
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d103      	bne.n	80019b8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3310      	adds	r3, #16
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e002      	b.n	80019be <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3314      	adds	r3, #20
 80019bc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80019d0:	e006      	b.n	80019e0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	6811      	ldr	r1, [r2, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	43d2      	mvns	r2, r2
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	899b      	ldrh	r3, [r3, #12]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e011      	b.n	8001a5e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d107      	bne.n	8001a50 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8a1b      	ldrh	r3, [r3, #16]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e006      	b.n	8001a5e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8a9b      	ldrh	r3, [r3, #20]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a66:	2201      	movs	r2, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <USART_GetITStatus+0xa4>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	74fb      	strb	r3, [r7, #19]
 8001a8e:	e001      	b.n	8001a94 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	81fb      	strh	r3, [r7, #14]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001ac6:	89bb      	ldrh	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	801a      	strh	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <app_debug_rtt>:

#define RTT_PRINTF_BUFFER_SIZE 256
#define BLE_PRINTF_MTU_SIZE 23

int app_debug_rtt(const char *fmt,...)
{
 8001adc:	b40f      	push	{r0, r1, r2, r3}
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b0c4      	sub	sp, #272	; 0x110
 8001ae2:	af00      	add	r7, sp, #0
    // Get debug data
    if (!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <app_debug_rtt+0x8c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <app_debug_rtt+0x18>
    {
        return 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e031      	b.n	8001b58 <app_debug_rtt+0x7c>
    }

    int     n;
    char    aBuffer[RTT_PRINTF_BUFFER_SIZE];
    char *p = &aBuffer[0];
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int size = RTT_PRINTF_BUFFER_SIZE;
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    va_list args;

    va_start (args, fmt);
 8001b02:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001b06:	463b      	mov	r3, r7
 8001b08:	601a      	str	r2, [r3, #0]
    n = vsnprintf(p, size, fmt, args);
 8001b0a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001b0e:	463b      	mov	r3, r7
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b16:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001b1a:	f000 fefb 	bl	8002914 <vsnprintf>
 8001b1e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    if (n > (int)size) 
 8001b22:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001b26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dd07      	ble.n	8001b3e <app_debug_rtt+0x62>
    {
        SEGGER_RTT_Write(0, aBuffer, size);
 8001b2e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f982 	bl	8001e40 <SEGGER_RTT_Write>
 8001b3c:	e00a      	b.n	8001b54 <app_debug_rtt+0x78>
    } 
    else if (n > 0) 
 8001b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dd06      	ble.n	8001b54 <app_debug_rtt+0x78>
    {
        SEGGER_RTT_Write(0, aBuffer, n);
 8001b46:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f976 	bl	8001e40 <SEGGER_RTT_Write>
    }
    va_end(args);
    return n;
 8001b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	e000edf0 	.word	0xe000edf0

08001b6c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <_DoInit+0x98>)
 8001b74:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <_DoInit+0x9c>)
 8001b86:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <_DoInit+0xa0>)
 8001b8c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b94:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <_DoInit+0x9c>)
 8001bac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <_DoInit+0xa4>)
 8001bb2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <_DoInit+0xa8>)
 8001bd2:	6810      	ldr	r0, [r2, #0]
 8001bd4:	6018      	str	r0, [r3, #0]
  RTT__DMB();
 8001bd6:	f3bf 8f5f 	dmb	sy
  STRCPY(&p->acID[0], "SEGGER", 7);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <_DoInit+0xac>)
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	6018      	str	r0, [r3, #0]
 8001be2:	8891      	ldrh	r1, [r2, #4]
 8001be4:	7992      	ldrb	r2, [r2, #6]
 8001be6:	8099      	strh	r1, [r3, #4]
 8001be8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();
 8001bea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();
 8001bf4:	f3bf 8f5f 	dmb	sy
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	20000afc 	.word	0x20000afc
 8001c08:	080056d0 	.word	0x080056d0
 8001c0c:	200006b0 	.word	0x200006b0
 8001c10:	20000ab0 	.word	0x20000ab0
 8001c14:	080056dc 	.word	0x080056dc
 8001c18:	080056e0 	.word	0x080056e0

08001c1c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d905      	bls.n	8001c4c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e007      	b.n	8001c5c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1acb      	subs	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	4293      	cmp	r3, r2
 8001c68:	bf28      	it	cs
 8001c6a:	4613      	movcs	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4293      	cmp	r3, r2
 8001c74:	bf28      	it	cs
 8001c76:	4613      	movcs	r3, r2
 8001c78:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4413      	add	r3, r2
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fe04 	bl	8002894 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d101      	bne.n	8001cba <_WriteBlocking+0x9e>
      WrOff = 0u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
    }
    RTT__DMB();
 8001cba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1b3      	bne.n	8001c32 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8001cca:	69bb      	ldr	r3, [r7, #24]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d910      	bls.n	8001d1a <_WriteNoCheck+0x46>
      *pDst++ = *pData++;
    };
    RTT__DMB();
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fdc5 	bl	8002894 <memcpy>
    RTT__DMB();
 8001d0a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	441a      	add	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    RTT__DMB();
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001d18:	e01c      	b.n	8001d54 <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fdb2 	bl	8002894 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6858      	ldr	r0, [r3, #4]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4413      	add	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f000 fda5 	bl	8002894 <memcpy>
    RTT__DMB();
 8001d4a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	60da      	str	r2, [r3, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d808      	bhi.n	8001d8a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad2      	subs	r2, r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	3b01      	subs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e004      	b.n	8001d94 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001d94:	697b      	ldr	r3, [r7, #20]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <SEGGER_RTT_WriteNoLock+0x98>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d017      	beq.n	8001dfe <SEGGER_RTT_WriteNoLock+0x5a>
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d302      	bcc.n	8001dd8 <SEGGER_RTT_WriteNoLock+0x34>
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d023      	beq.n	8001e1e <SEGGER_RTT_WriteNoLock+0x7a>
 8001dd6:	e029      	b.n	8001e2c <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f7ff ffbf 	bl	8001d5c <_GetAvailWriteSpace>
 8001dde:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d202      	bcs.n	8001dee <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001dec:	e021      	b.n	8001e32 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff6c 	bl	8001cd4 <_WriteNoCheck>
    break;
 8001dfc:	e019      	b.n	8001e32 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ffac 	bl	8001d5c <_GetAvailWriteSpace>
 8001e04:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf28      	it	cs
 8001e0e:	4613      	movcs	r3, r2
 8001e10:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	69b9      	ldr	r1, [r7, #24]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff5c 	bl	8001cd4 <_WriteNoCheck>
    break;
 8001e1c:	e009      	b.n	8001e32 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff fefa 	bl	8001c1c <_WriteBlocking>
 8001e28:	61f8      	str	r0, [r7, #28]
    break;
 8001e2a:	e002      	b.n	8001e32 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    break;
 8001e30:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8001e32:	69fb      	ldr	r3, [r7, #28]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000afc 	.word	0x20000afc

08001e40 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <SEGGER_RTT_Write+0x44>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <SEGGER_RTT_Write+0x18>
 8001e54:	f7ff fe8a 	bl	8001b6c <_DoInit>
  SEGGER_RTT_LOCK();
 8001e58:	f3ef 8311 	mrs	r3, BASEPRI
 8001e5c:	f04f 0120 	mov.w	r1, #32
 8001e60:	f381 8811 	msr	BASEPRI, r1
 8001e64:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff9a 	bl	8001da4 <SEGGER_RTT_WriteNoLock>
 8001e70:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8001e78:	693b      	ldr	r3, [r7, #16]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000afc 	.word	0x20000afc

08001e88 <lcd_send_cmd>:
#define WRITE_MODE 0x00

extern void delay_ms(uint32_t time_ms);

static void lcd_send_cmd(uint8_t cmd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xf0);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f023 030f 	bic.w	r3, r3, #15
 8001e98:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x04;  // en=1, rs=0
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u;  // en=0, rs=0
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x04;  // en=1, rs=0
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	72fb      	strb	r3, [r7, #11]

    os_trace("lcd_send_cmd: %x-%x-%x-%x\n",
            data_t[0], data_t[1], data_t[2], data_t[3]);
 8001ec2:	7a3b      	ldrb	r3, [r7, #8]
    os_trace("lcd_send_cmd: %x-%x-%x-%x\n",
 8001ec4:	4619      	mov	r1, r3
            data_t[0], data_t[1], data_t[2], data_t[3]);
 8001ec6:	7a7b      	ldrb	r3, [r7, #9]
    os_trace("lcd_send_cmd: %x-%x-%x-%x\n",
 8001ec8:	461a      	mov	r2, r3
            data_t[0], data_t[1], data_t[2], data_t[3]);
 8001eca:	7abb      	ldrb	r3, [r7, #10]
    os_trace("lcd_send_cmd: %x-%x-%x-%x\n",
 8001ecc:	4618      	mov	r0, r3
            data_t[0], data_t[1], data_t[2], data_t[3]);
 8001ece:	7afb      	ldrb	r3, [r7, #11]
    os_trace("lcd_send_cmd: %x-%x-%x-%x\n",
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <lcd_send_cmd+0x68>)
 8001ed6:	f7ff fe01 	bl	8001adc <app_debug_rtt>
    i2c_send_data(SLAVE_ADDRESS, data_t, 4);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2027      	movs	r0, #39	; 0x27
 8001ee4:	f000 f974 	bl	80021d0 <i2c_send_data>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	080056e8 	.word	0x080056e8

08001ef4 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xf0);
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f023 030f 	bic.w	r3, r3, #15
 8001f04:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	f043 030d 	orr.w	r3, r3, #13
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // en=0, rs=1
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	f043 0309 	orr.w	r3, r3, #9
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	f043 030d 	orr.w	r3, r3, #13
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // en=0, rs=1
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	f043 0309 	orr.w	r3, r3, #9
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	72fb      	strb	r3, [r7, #11]

    os_trace("lcd_send_data: %x-%x-%x-%x\n", data_t[0], data_t[1], data_t[2],
 8001f34:	7a3b      	ldrb	r3, [r7, #8]
 8001f36:	4619      	mov	r1, r3
 8001f38:	7a7b      	ldrb	r3, [r7, #9]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	7abb      	ldrb	r3, [r7, #10]
 8001f3e:	4618      	mov	r0, r3
             data_t[3]);
 8001f40:	7afb      	ldrb	r3, [r7, #11]
    os_trace("lcd_send_data: %x-%x-%x-%x\n", data_t[0], data_t[1], data_t[2],
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	4603      	mov	r3, r0
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <lcd_send_data+0x70>)
 8001f48:	f7ff fdc8 	bl	8001adc <app_debug_rtt>

    i2c_send_data(SLAVE_ADDRESS, data_t, 4);
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2204      	movs	r2, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	2027      	movs	r0, #39	; 0x27
 8001f56:	f000 f93b 	bl	80021d0 <i2c_send_data>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	08005704 	.word	0x08005704

08001f68 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    while (*str)
 8001f70:	e006      	b.n	8001f80 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ffba 	bl	8001ef4 <lcd_send_data>
    while (*str)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f4      	bne.n	8001f72 <lcd_send_string+0xa>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <lcd_goto_XY>:
{
    lcd_send_cmd(0x01);  // clear display
}

void lcd_goto_XY(int row, int col)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if (row == 1) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <lcd_goto_XY+0x22>
        pos_Addr = 0x80 + row - 1 + col;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	337f      	adds	r3, #127	; 0x7f
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e008      	b.n	8001fc4 <lcd_goto_XY+0x34>
    } else {
        pos_Addr = 0x80 | (0x40 + col);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	3340      	adds	r3, #64	; 0x40
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos_Addr);
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff5e 	bl	8001e88 <lcd_send_cmd>
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <lcd_i2c_init>:

void lcd_i2c_init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    i2c_init();
 8001fd8:	f000 f8b6 	bl	8002148 <i2c_init>

	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001fdc:	2033      	movs	r0, #51	; 0x33
 8001fde:	f7ff ff53 	bl	8001e88 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001fe2:	2032      	movs	r0, #50	; 0x32
 8001fe4:	f7ff ff50 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 8001fe8:	2032      	movs	r0, #50	; 0x32
 8001fea:	f000 fa0b 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001fee:	2028      	movs	r0, #40	; 0x28
 8001ff0:	f7ff ff4a 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 8001ff4:	2032      	movs	r0, #50	; 0x32
 8001ff6:	f000 fa05 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x01); /* clear display */
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff ff44 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 8002000:	2032      	movs	r0, #50	; 0x32
 8002002:	f000 f9ff 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x06); /* set entry mode */
 8002006:	2006      	movs	r0, #6
 8002008:	f7ff ff3e 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 800200c:	2032      	movs	r0, #50	; 0x32
 800200e:	f000 f9f9 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x0c); /* set display to on */	
 8002012:	200c      	movs	r0, #12
 8002014:	f7ff ff38 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 8002018:	2032      	movs	r0, #50	; 0x32
 800201a:	f000 f9f3 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800201e:	2002      	movs	r0, #2
 8002020:	f7ff ff32 	bl	8001e88 <lcd_send_cmd>
	delay_ms(50);
 8002024:	2032      	movs	r0, #50	; 0x32
 8002026:	f000 f9ed 	bl	8002404 <delay_ms>
	lcd_send_cmd (0x80);
 800202a:	2080      	movs	r0, #128	; 0x80
 800202c:	f7ff ff2c 	bl	8001e88 <lcd_send_cmd>

    /* ================================= */
    lcd_goto_XY(0, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff ffac 	bl	8001f90 <lcd_goto_XY>
    lcd_send_string("Dungnt98");
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <lcd_i2c_init+0x7c>)
 800203a:	f7ff ff95 	bl	8001f68 <lcd_send_string>
    lcd_goto_XY(1, 0);
 800203e:	2100      	movs	r1, #0
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff ffa5 	bl	8001f90 <lcd_goto_XY>
    lcd_send_string("Dungnt98");
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <lcd_i2c_init+0x7c>)
 8002048:	f7ff ff8e 	bl	8001f68 <lcd_send_string>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	08005720 	.word	0x08005720

08002054 <ic2_start>:
#include "stm32f4xx_i2c.h"
#include "stm32f4xx_rcc.h"

/****************************** PRIVATE API *******************************/
static uint8_t ic2_start(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	if (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY) == SET) {
 8002058:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <ic2_start+0x40>)
 800205e:	f7ff fa39 	bl	80014d4 <I2C_GetFlagStatus>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <ic2_start+0x22>
        os_trace("i2c2 is busy\n", __FILE__, __LINE__);
 8002068:	220b      	movs	r2, #11
 800206a:	490b      	ldr	r1, [pc, #44]	; (8002098 <ic2_start+0x44>)
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <ic2_start+0x48>)
 800206e:	f7ff fd35 	bl	8001adc <app_debug_rtt>
        return 1; /* busy */
 8002072:	2301      	movs	r3, #1
 8002074:	e00c      	b.n	8002090 <ic2_start+0x3c>
    }

    /* Send start */
    I2C_GenerateSTART(I2C2, ENABLE);
 8002076:	2101      	movs	r1, #1
 8002078:	4806      	ldr	r0, [pc, #24]	; (8002094 <ic2_start+0x40>)
 800207a:	f7ff f96d 	bl	8001358 <I2C_GenerateSTART>

    /* wait SB bit in SR1 is set - check EV5 */
    while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
 800207e:	bf00      	nop
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <ic2_start+0x4c>)
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <ic2_start+0x40>)
 8002084:	f7ff f9f6 	bl	8001474 <I2C_CheckEvent>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f8      	beq.n	8002080 <ic2_start+0x2c>
    return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40005800 	.word	0x40005800
 8002098:	0800572c 	.word	0x0800572c
 800209c:	0800574c 	.word	0x0800574c
 80020a0:	00030001 	.word	0x00030001

080020a4 <ic2_stop>:

static void ic2_stop(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    /* Send STOP Condition */
    I2C_GenerateSTOP(I2C2, ENABLE);
 80020a8:	2101      	movs	r1, #1
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <ic2_stop+0x20>)
 80020ac:	f7ff f974 	bl	8001398 <I2C_GenerateSTOP>
    /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    while (I2C2->CR1 & (1 << 9));
 80020b0:	bf00      	nop
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <ic2_stop+0x20>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f8      	bne.n	80020b2 <ic2_stop+0xe>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005800 	.word	0x40005800

080020c8 <send_address_for_writing>:

static void send_address_for_writing(uint8_t address)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
    os_trace("slave address: %x - %x\n", address, address << 1);
 80020d2:	79f9      	ldrb	r1, [r7, #7]
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	461a      	mov	r2, r3
 80020da:	480b      	ldr	r0, [pc, #44]	; (8002108 <send_address_for_writing+0x40>)
 80020dc:	f7ff fcfe 	bl	8001adc <app_debug_rtt>

    I2C_Send7bitAddress(I2C2, address << 1, I2C_Direction_Transmitter);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4808      	ldr	r0, [pc, #32]	; (800210c <send_address_for_writing+0x44>)
 80020ec:	f7ff f974 	bl	80013d8 <I2C_Send7bitAddress>

    /* wait ADDR bit in SR1 is set - check EV6 */
    while (I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) == ERROR);
 80020f0:	bf00      	nop
 80020f2:	4907      	ldr	r1, [pc, #28]	; (8002110 <send_address_for_writing+0x48>)
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <send_address_for_writing+0x44>)
 80020f6:	f7ff f9bd 	bl	8001474 <I2C_CheckEvent>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f8      	beq.n	80020f2 <send_address_for_writing+0x2a>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	0800575c 	.word	0x0800575c
 800210c:	40005800 	.word	0x40005800
 8002110:	00070082 	.word	0x00070082

08002114 <i2c_write>:
    /* wait ADDR bit in SR1 is set - check EV6 */
    while (I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED) == ERROR);
}

static void i2c_write(uint8_t data)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
    /* send data */
    I2C_SendData(I2C2, data);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <i2c_write+0x2c>)
 8002124:	f7ff f996 	bl	8001454 <I2C_SendData>

    /* Wait until BTF is set before programming the STOP - EV8 */
    while (I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 8002128:	bf00      	nop
 800212a:	4906      	ldr	r1, [pc, #24]	; (8002144 <i2c_write+0x30>)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <i2c_write+0x2c>)
 800212e:	f7ff f9a1 	bl	8001474 <I2C_CheckEvent>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f8      	beq.n	800212a <i2c_write+0x16>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40005800 	.word	0x40005800
 8002144:	00070084 	.word	0x00070084

08002148 <i2c_init>:
    return I2C_ReceiveData(I2C2);
}

/****************************** PUBLIC API *******************************/
void i2c_init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800214e:	2101      	movs	r1, #1
 8002150:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002154:	f7ff fae8 	bl	8001728 <RCC_APB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002158:	2101      	movs	r1, #1
 800215a:	2002      	movs	r0, #2
 800215c:	f7ff fac4 	bl	80016e8 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef gpio_mux;
    gpio_mux.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8002160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002164:	613b      	str	r3, [r7, #16]
    gpio_mux.GPIO_Mode = GPIO_Mode_AF;
 8002166:	2302      	movs	r3, #2
 8002168:	753b      	strb	r3, [r7, #20]
    gpio_mux.GPIO_PuPd = GPIO_PuPd_NOPULL; /* open drain */
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOB, &gpio_mux);
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	4619      	mov	r1, r3
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <i2c_init+0x7c>)
 8002176:	f7fe fefd 	bl	8000f74 <GPIO_Init>

    GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 800217a:	2204      	movs	r2, #4
 800217c:	210a      	movs	r1, #10
 800217e:	4811      	ldr	r0, [pc, #68]	; (80021c4 <i2c_init+0x7c>)
 8002180:	f7fe ffbe 	bl	8001100 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 8002184:	2204      	movs	r2, #4
 8002186:	210b      	movs	r1, #11
 8002188:	480e      	ldr	r0, [pc, #56]	; (80021c4 <i2c_init+0x7c>)
 800218a:	f7fe ffb9 	bl	8001100 <GPIO_PinAFConfig>

    I2C_InitTypeDef i2c2;
    i2c2.I2C_ClockSpeed = 100000;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <i2c_init+0x80>)
 8002190:	603b      	str	r3, [r7, #0]
    i2c2.I2C_Mode = I2C_Mode_I2C;
 8002192:	2300      	movs	r3, #0
 8002194:	80bb      	strh	r3, [r7, #4]
    i2c2.I2C_DutyCycle = I2C_DutyCycle_2; /* but not used */
 8002196:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800219a:	80fb      	strh	r3, [r7, #6]
    i2c2.I2C_OwnAddress1 = 0x00;
 800219c:	2300      	movs	r3, #0
 800219e:	813b      	strh	r3, [r7, #8]
    i2c2.I2C_Ack = I2C_Ack_Disable;
 80021a0:	2300      	movs	r3, #0
 80021a2:	817b      	strh	r3, [r7, #10]
    i2c2.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80021a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a8:	81bb      	strh	r3, [r7, #12]
    I2C_Init(I2C2, &i2c2);
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <i2c_init+0x84>)
 80021b0:	f7fe fff0 	bl	8001194 <I2C_Init>

    I2C_Cmd(I2C2, ENABLE);
 80021b4:	2101      	movs	r1, #1
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <i2c_init+0x84>)
 80021b8:	f7ff f8ae 	bl	8001318 <I2C_Cmd>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020400 	.word	0x40020400
 80021c8:	000186a0 	.word	0x000186a0
 80021cc:	40005800 	.word	0x40005800

080021d0 <i2c_send_data>:

    return 0;
}

uint32_t i2c_send_data(uint8_t address, uint8_t *data, uint32_t len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	73fb      	strb	r3, [r7, #15]
    os_trace("i2c_send_data:\n");
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <i2c_send_data+0x70>)
 80021e0:	f7ff fc7c 	bl	8001adc <app_debug_rtt>
    /* disable ack */
    I2C_AcknowledgeConfig(I2C2, DISABLE);
 80021e4:	2100      	movs	r1, #0
 80021e6:	4817      	ldr	r0, [pc, #92]	; (8002244 <i2c_send_data+0x74>)
 80021e8:	f7ff f914 	bl	8001414 <I2C_AcknowledgeConfig>

    /* send START condition */
    if (ic2_start())
 80021ec:	f7ff ff32 	bl	8002054 <ic2_start>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <i2c_send_data+0x2a>
        return 0; /* i2c bus is busy */
 80021f6:	2300      	movs	r3, #0
 80021f8:	e01d      	b.n	8002236 <i2c_send_data+0x66>

    /* send slave's address for write */
    send_address_for_writing(address);
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff63 	bl	80020c8 <send_address_for_writing>

    /* send data */
    while(len--) {
 8002202:	e00d      	b.n	8002220 <i2c_send_data+0x50>
        os_trace("%02x ", *data);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	480f      	ldr	r0, [pc, #60]	; (8002248 <i2c_send_data+0x78>)
 800220c:	f7ff fc66 	bl	8001adc <app_debug_rtt>
        i2c_write(*data);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff7d 	bl	8002114 <i2c_write>
        data++;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
    while(len--) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ec      	bne.n	8002204 <i2c_send_data+0x34>
    }
    os_trace("\n");
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <i2c_send_data+0x7c>)
 800222c:	f7ff fc56 	bl	8001adc <app_debug_rtt>

    /* Send STOP Condition */
    ic2_stop();
 8002230:	f7ff ff38 	bl	80020a4 <ic2_stop>

    return len;
 8002234:	687b      	ldr	r3, [r7, #4]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	08005774 	.word	0x08005774
 8002244:	40005800 	.word	0x40005800
 8002248:	08005784 	.word	0x08005784
 800224c:	0800578c 	.word	0x0800578c

08002250 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da0b      	bge.n	800227c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002264:	490d      	ldr	r1, [pc, #52]	; (800229c <NVIC_SetPriority+0x4c>)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	3b04      	subs	r3, #4
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800227a:	e009      	b.n	8002290 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800227c:	4908      	ldr	r1, [pc, #32]	; (80022a0 <NVIC_SetPriority+0x50>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b2:	d301      	bcc.n	80022b8 <SysTick_Config+0x14>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e011      	b.n	80022dc <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <SysTick_Config+0x40>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022c0:	3b01      	subs	r3, #1
 80022c2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80022c4:	210f      	movs	r1, #15
 80022c6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ca:	f7ff ffc1 	bl	8002250 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <SysTick_Config+0x40>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <SysTick_Config+0x40>)
 80022d6:	2207      	movs	r2, #7
 80022d8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <USART1_IRQHandler>:
	pc_uart_pointer = 0;
}

/* Interrupt for gsm uart */
void USART1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

	char temp;
	if (USART_GetITStatus( USART1, USART_IT_RXNE ) != RESET) {
 80022ee:	f240 5125 	movw	r1, #1317	; 0x525
 80022f2:	480c      	ldr	r0, [pc, #48]	; (8002324 <USART1_IRQHandler+0x3c>)
 80022f4:	f7ff fb7a 	bl	80019ec <USART_GetITStatus>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <USART1_IRQHandler+0x32>

		/* Obtain a byte from the RX buffer register */
		temp = (char)(USART1->DR & (uint16_t)0x01FF);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <USART1_IRQHandler+0x3c>)
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	b29b      	uxth	r3, r3
 8002304:	71fb      	strb	r3, [r7, #7]
		os_trace("%c", temp);
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4619      	mov	r1, r3
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <USART1_IRQHandler+0x40>)
 800230c:	f7ff fbe6 	bl	8001adc <app_debug_rtt>
//		if(pc_uart_pointer < MAXIMUM_RX_BUF_SIZE){
//			message_uart_rx_buf[pc_uart_pointer++] = temp;
//		}
//		time_free_uart_pc = 0;

		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8002310:	f240 5125 	movw	r1, #1317	; 0x525
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <USART1_IRQHandler+0x3c>)
 8002316:	f7ff fbc4 	bl	8001aa2 <USART_ClearITPendingBit>
	}

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40011000 	.word	0x40011000
 8002328:	08005790 	.word	0x08005790

0800232c <pc_uart_init>:

void pc_uart_init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef usartPin;
	USART_InitTypeDef usartDebug;
	memset(&usartPin, 0, sizeof(usartPin));
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	2208      	movs	r2, #8
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fab5 	bl	80028aa <memset>
	memset(&usartDebug, 0, sizeof(usartDebug));
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	2210      	movs	r2, #16
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 faae 	bl	80028aa <memset>


	usartPin.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 800234e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002352:	61bb      	str	r3, [r7, #24]
	usartPin.GPIO_Mode = GPIO_Mode_AF;
 8002354:	2302      	movs	r3, #2
 8002356:	773b      	strb	r3, [r7, #28]
	usartPin.GPIO_PuPd = GPIO_PuPd_UP;
 8002358:	2301      	movs	r3, #1
 800235a:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &usartPin);
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4619      	mov	r1, r3
 8002362:	4820      	ldr	r0, [pc, #128]	; (80023e4 <pc_uart_init+0xb8>)
 8002364:	f7fe fe06 	bl	8000f74 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8002368:	2207      	movs	r2, #7
 800236a:	2109      	movs	r1, #9
 800236c:	481d      	ldr	r0, [pc, #116]	; (80023e4 <pc_uart_init+0xb8>)
 800236e:	f7fe fec7 	bl	8001100 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8002372:	2207      	movs	r2, #7
 8002374:	210a      	movs	r1, #10
 8002376:	481b      	ldr	r0, [pc, #108]	; (80023e4 <pc_uart_init+0xb8>)
 8002378:	f7fe fec2 	bl	8001100 <GPIO_PinAFConfig>

	usartDebug.USART_BaudRate 				= 9600;
 800237c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002380:	60bb      	str	r3, [r7, #8]
	usartDebug.USART_WordLength 			= USART_WordLength_8b;
 8002382:	2300      	movs	r3, #0
 8002384:	81bb      	strh	r3, [r7, #12]
	usartDebug.USART_StopBits 				= USART_StopBits_1;
 8002386:	2300      	movs	r3, #0
 8002388:	81fb      	strh	r3, [r7, #14]
	usartDebug.USART_Parity 				= USART_Parity_No;
 800238a:	2300      	movs	r3, #0
 800238c:	823b      	strh	r3, [r7, #16]
	usartDebug.USART_HardwareFlowControl 	= USART_HardwareFlowControl_None;
 800238e:	2300      	movs	r3, #0
 8002390:	82bb      	strh	r3, [r7, #20]
	usartDebug.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
 8002392:	230c      	movs	r3, #12
 8002394:	827b      	strh	r3, [r7, #18]
	USART_Init(USART1, &usartDebug);
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	4619      	mov	r1, r3
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <pc_uart_init+0xbc>)
 800239e:	f7ff fa03 	bl	80017a8 <USART_Init>

	/* NVIC configuration */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80023a2:	2325      	movs	r3, #37	; 0x25
 80023a4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80023ae:	2301      	movs	r3, #1
 80023b0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fd7b 	bl	8000eb0 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USART1, ENABLE);
 80023ba:	2101      	movs	r1, #1
 80023bc:	480a      	ldr	r0, [pc, #40]	; (80023e8 <pc_uart_init+0xbc>)
 80023be:	f7ff faad 	bl	800191c <USART_Cmd>

	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80023c2:	2200      	movs	r2, #0
 80023c4:	f240 7127 	movw	r1, #1831	; 0x727
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <pc_uart_init+0xbc>)
 80023ca:	f7ff fac7 	bl	800195c <USART_ITConfig>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80023ce:	2201      	movs	r2, #1
 80023d0:	f240 5125 	movw	r1, #1317	; 0x525
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <pc_uart_init+0xbc>)
 80023d6:	f7ff fac1 	bl	800195c <USART_ITConfig>
}
 80023da:	bf00      	nop
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40011000 	.word	0x40011000

080023ec <get_tick_ms>:



uint32_t tick_ms;
uint32_t get_tick_ms(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	return tick_ms;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <get_tick_ms+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000ba4 	.word	0x20000ba4

08002404 <delay_ms>:

	while(get_tick_ms() - current_tick < ms);
}

void delay_ms(uint32_t time_ms)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	uint32_t start_time,current_time;

	start_time = get_tick_ms();
 800240c:	f7ff ffee 	bl	80023ec <get_tick_ms>
 8002410:	60f8      	str	r0, [r7, #12]

	while(1) {
		current_time = get_tick_ms();
 8002412:	f7ff ffeb 	bl	80023ec <get_tick_ms>
 8002416:	60b8      	str	r0, [r7, #8]

		if (current_time >= start_time) {
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d306      	bcc.n	800242e <delay_ms+0x2a>
			if((current_time - start_time) >= time_ms)
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3f2      	bcc.n	8002412 <delay_ms+0xe>
				break;
 800242c:	e008      	b.n	8002440 <delay_ms+0x3c>
		}
		else {
			if(((0xFFFFFFFF - start_time) + current_time) >= time_ms)
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d200      	bcs.n	800243e <delay_ms+0x3a>
		current_time = get_tick_ms();
 800243c:	e7e9      	b.n	8002412 <delay_ms+0xe>
				break;
 800243e:	bf00      	nop
		}
	}
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <led_init>:


void led_init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led;
	led.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 800244e:	23c0      	movs	r3, #192	; 0xc0
 8002450:	603b      	str	r3, [r7, #0]
	led.GPIO_Mode = GPIO_Mode_OUT;
 8002452:	2301      	movs	r3, #1
 8002454:	713b      	strb	r3, [r7, #4]
	led.GPIO_Speed 	= GPIO_Speed_50MHz;
 8002456:	2302      	movs	r3, #2
 8002458:	717b      	strb	r3, [r7, #5]
	led.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &led);
 800245e:	463b      	mov	r3, r7
 8002460:	4619      	mov	r1, r3
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <led_init+0x28>)
 8002464:	f7fe fd86 	bl	8000f74 <GPIO_Init>
	// led2.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
	// led2.GPIO_Mode = GPIO_Mode_OUT;
	// led2.GPIO_Speed 	= GPIO_Speed_50MHz;
	// led2.GPIO_PuPd = GPIO_PuPd_NOPULL;
	// GPIO_Init(GPIOB, &led2);
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020000 	.word	0x40020000

08002474 <toggle_led_pin>:

void toggle_led_pin(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	static uint32_t time_stamp = 0;

	if (get_tick_ms() - time_stamp < 500)
 8002478:	f7ff ffb8 	bl	80023ec <get_tick_ms>
 800247c:	4602      	mov	r2, r0
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <toggle_led_pin+0x48>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002488:	d315      	bcc.n	80024b6 <toggle_led_pin+0x42>
		return;
	
	time_stamp = get_tick_ms();
 800248a:	f7ff ffaf 	bl	80023ec <get_tick_ms>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <toggle_led_pin+0x48>)
 8002492:	601a      	str	r2, [r3, #0]

    if (GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_6 | GPIO_Pin_7) == 0) {
 8002494:	21c0      	movs	r1, #192	; 0xc0
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <toggle_led_pin+0x4c>)
 8002498:	f7fe fdfa 	bl	8001090 <GPIO_ReadOutputDataBit>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <toggle_led_pin+0x38>
		// os_trace("On\n");
        GPIO_SetBits(GPIOA, GPIO_Pin_6 | GPIO_Pin_7);
 80024a2:	21c0      	movs	r1, #192	; 0xc0
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <toggle_led_pin+0x4c>)
 80024a6:	f7fe fe0d 	bl	80010c4 <GPIO_SetBits>
 80024aa:	e005      	b.n	80024b8 <toggle_led_pin+0x44>
		// GPIO_SetBits(GPIOB, GPIO_Pin_10 | GPIO_Pin_11);
	}
    else {
		GPIO_ResetBits(GPIOA, GPIO_Pin_6 | GPIO_Pin_7);
 80024ac:	21c0      	movs	r1, #192	; 0xc0
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <toggle_led_pin+0x4c>)
 80024b0:	f7fe fe17 	bl	80010e2 <GPIO_ResetBits>
 80024b4:	e000      	b.n	80024b8 <toggle_led_pin+0x44>
		return;
 80024b6:	bf00      	nop
		// GPIO_ResetBits(GPIOB, GPIO_Pin_10 | GPIO_Pin_11);
		// os_trace("Off\n");
	}
}
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000ac0 	.word	0x20000ac0
 80024c0:	40020000 	.word	0x40020000

080024c4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	RCC_DeInit();
 80024c8:	f7ff f838 	bl	800153c <RCC_DeInit>
	SystemCoreClockUpdate();
 80024cc:	f000 f8c6 	bl	800265c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <main+0x60>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <main+0x64>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fee1 	bl	80022a4 <SysTick_Config>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80024e2:	2101      	movs	r1, #1
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff f8ff 	bl	80016e8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2010      	movs	r0, #16
 80024ee:	f7ff f8fb 	bl	80016e8 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80024f2:	2101      	movs	r1, #1
 80024f4:	2010      	movs	r0, #16
 80024f6:	f7ff f937 	bl	8001768 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 80024fa:	2101      	movs	r1, #1
 80024fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002500:	f7ff f912 	bl	8001728 <RCC_APB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002504:	2101      	movs	r1, #1
 8002506:	2002      	movs	r0, #2
 8002508:	f7ff f8ee 	bl	80016e8 <RCC_AHB1PeriphClockCmd>
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
	pc_uart_init();
 800250c:	f7ff ff0e 	bl	800232c <pc_uart_init>
	os_trace("Dungnt98 debugg\n");
 8002510:	4806      	ldr	r0, [pc, #24]	; (800252c <main+0x68>)
 8002512:	f7ff fae3 	bl	8001adc <app_debug_rtt>
	
	led_init();
 8002516:	f7ff ff97 	bl	8002448 <led_init>
	lcd_i2c_init();
 800251a:	f7ff fd5b 	bl	8001fd4 <lcd_i2c_init>

  /* Infinite loop */
  while (1)
  {
	toggle_led_pin();
 800251e:	f7ff ffa9 	bl	8002474 <toggle_led_pin>
 8002522:	e7fc      	b.n	800251e <main+0x5a>
 8002524:	20000010 	.word	0x20000010
 8002528:	10624dd3 	.word	0x10624dd3
 800252c:	08005794 	.word	0x08005794

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002536:	e003      	b.n	8002540 <LoopCopyDataInit>

08002538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800253a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800253c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800253e:	3104      	adds	r1, #4

08002540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002548:	d3f6      	bcc.n	8002538 <CopyDataInit>
  ldr  r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800254c:	e002      	b.n	8002554 <LoopFillZerobss>

0800254e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800254e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002550:	f842 3b04 	str.w	r3, [r2], #4

08002554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002558:	d3f9      	bcc.n	800254e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800255a:	f000 f849 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f000 f975 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7ff ffaf 	bl	80024c4 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002568:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800256c:	08005a20 	.word	0x08005a20
  ldr  r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002574:	20000694 	.word	0x20000694
  ldr  r2, =_sbss
 8002578:	20000694 	.word	0x20000694
  ldr  r3, = _ebss
 800257c:	20000bb8 	.word	0x20000bb8

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>

08002582 <NMI_Handler>:
/**
 * @brief   This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void) {}
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Hard Fault exception occurs */
    while (1) {
 8002594:	e7fe      	b.n	8002594 <HardFault_Handler+0x4>

08002596 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Memory Manage exception occurs */
    while (1) {
 800259a:	e7fe      	b.n	800259a <MemManage_Handler+0x4>

0800259c <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Bus Fault exception occurs */
    while (1) {
 80025a0:	e7fe      	b.n	80025a0 <BusFault_Handler+0x4>

080025a2 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Usage Fault exception occurs */
    while (1) {
 80025a6:	e7fe      	b.n	80025a6 <UsageFault_Handler+0x4>

080025a8 <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {}
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {}
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {}
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Handler>:
 * @param  None
 * @retval None
 */
extern uint32_t tick_ms;
void SysTick_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
    /*  TimingDelay_Decrement(); */
    tick_ms++;
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SysTick_Handler+0x18>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	4a03      	ldr	r2, [pc, #12]	; (80025ec <SysTick_Handler+0x18>)
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000ba4 	.word	0x20000ba4

080025f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <SystemInit+0x60>)
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <SystemInit+0x60>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <SystemInit+0x64>)
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <SystemInit+0x64>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <SystemInit+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <SystemInit+0x64>)
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <SystemInit+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <SystemInit+0x64>)
 8002628:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <SystemInit+0x68>)
 800262a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <SystemInit+0x64>)
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <SystemInit+0x64>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <SystemInit+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800263e:	f000 f889 	bl	8002754 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002642:	4b03      	ldr	r3, [pc, #12]	; (8002650 <SystemInit+0x60>)
 8002644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002648:	609a      	str	r2, [r3, #8]
#endif
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00
 8002654:	40023800 	.word	0x40023800
 8002658:	24003010 	.word	0x24003010

0800265c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	2302      	movs	r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	2302      	movs	r3, #2
 8002674:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d007      	beq.n	8002696 <SystemCoreClockUpdate+0x3a>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d009      	beq.n	800269e <SystemCoreClockUpdate+0x42>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13d      	bne.n	800270a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 8002690:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <SystemCoreClockUpdate+0xec>)
 8002692:	601a      	str	r2, [r3, #0]
      break;
 8002694:	e03d      	b.n	8002712 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 8002698:	4a2c      	ldr	r2, [pc, #176]	; (800274c <SystemCoreClockUpdate+0xf0>)
 800269a:	601a      	str	r2, [r3, #0]
      break;
 800269c:	e039      	b.n	8002712 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0d9b      	lsrs	r3, r3, #22
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80026ba:	4a24      	ldr	r2, [pc, #144]	; (800274c <SystemCoreClockUpdate+0xf0>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 80026c4:	6852      	ldr	r2, [r2, #4]
 80026c6:	0992      	lsrs	r2, r2, #6
 80026c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00b      	b.n	80026ec <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <SystemCoreClockUpdate+0xec>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	4a18      	ldr	r2, [pc, #96]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 80026de:	6852      	ldr	r2, [r2, #4]
 80026e0:	0992      	lsrs	r2, r2, #6
 80026e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 8002706:	6013      	str	r3, [r2, #0]
      break;
 8002708:	e003      	b.n	8002712 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <SystemCoreClockUpdate+0xec>)
 800270e:	601a      	str	r2, [r3, #0]
      break;
 8002710:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <SystemCoreClockUpdate+0xe4>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <SystemCoreClockUpdate+0xf4>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <SystemCoreClockUpdate+0xe8>)
 8002730:	6013      	str	r3, [r2, #0]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	20000010 	.word	0x20000010
 8002748:	00f42400 	.word	0x00f42400
 800274c:	017d7840 	.word	0x017d7840
 8002750:	20000014 	.word	0x20000014

08002754 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <SetSysClock+0xe8>)
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <SetSysClock+0xe8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800276e:	4b33      	ldr	r3, [pc, #204]	; (800283c <SetSysClock+0xe8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3301      	adds	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <SetSysClock+0x38>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800278a:	d1f0      	bne.n	800276e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <SetSysClock+0xe8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002798:	2301      	movs	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	e001      	b.n	80027a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d142      	bne.n	800282e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80027a8:	4a24      	ldr	r2, [pc, #144]	; (800283c <SetSysClock+0xe8>)
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <SetSysClock+0xe8>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <SetSysClock+0xec>)
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <SetSysClock+0xec>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <SetSysClock+0xe8>)
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <SetSysClock+0xe8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <SetSysClock+0xe8>)
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <SetSysClock+0xe8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80027d4:	4a19      	ldr	r2, [pc, #100]	; (800283c <SetSysClock+0xe8>)
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <SetSysClock+0xe8>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80027de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <SetSysClock+0xe8>)
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <SetSysClock+0xf0>)
 80027e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <SetSysClock+0xe8>)
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <SetSysClock+0xe8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80027f2:	bf00      	nop
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <SetSysClock+0xe8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f9      	beq.n	80027f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <SetSysClock+0xf4>)
 8002802:	f240 7205 	movw	r2, #1797	; 0x705
 8002806:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <SetSysClock+0xe8>)
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <SetSysClock+0xe8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <SetSysClock+0xe8>)
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <SetSysClock+0xe8>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8002820:	bf00      	nop
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <SetSysClock+0xe8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d1f9      	bne.n	8002822 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000
 8002844:	07405419 	.word	0x07405419
 8002848:	40023c00 	.word	0x40023c00

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	4e0d      	ldr	r6, [pc, #52]	; (8002884 <__libc_init_array+0x38>)
 8002850:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002852:	1ba4      	subs	r4, r4, r6
 8002854:	10a4      	asrs	r4, r4, #2
 8002856:	2500      	movs	r5, #0
 8002858:	42a5      	cmp	r5, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	4e0b      	ldr	r6, [pc, #44]	; (800288c <__libc_init_array+0x40>)
 800285e:	4c0c      	ldr	r4, [pc, #48]	; (8002890 <__libc_init_array+0x44>)
 8002860:	f002 ff28 	bl	80056b4 <_init>
 8002864:	1ba4      	subs	r4, r4, r6
 8002866:	10a4      	asrs	r4, r4, #2
 8002868:	2500      	movs	r5, #0
 800286a:	42a5      	cmp	r5, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002874:	4798      	blx	r3
 8002876:	3501      	adds	r5, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287e:	4798      	blx	r3
 8002880:	3501      	adds	r5, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08005a18 	.word	0x08005a18
 8002888:	08005a18 	.word	0x08005a18
 800288c:	08005a18 	.word	0x08005a18
 8002890:	08005a1c 	.word	0x08005a1c

08002894 <memcpy>:
 8002894:	b510      	push	{r4, lr}
 8002896:	1e43      	subs	r3, r0, #1
 8002898:	440a      	add	r2, r1
 800289a:	4291      	cmp	r1, r2
 800289c:	d100      	bne.n	80028a0 <memcpy+0xc>
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a8:	e7f7      	b.n	800289a <memcpy+0x6>

080028aa <memset>:
 80028aa:	4402      	add	r2, r0
 80028ac:	4603      	mov	r3, r0
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d100      	bne.n	80028b4 <memset+0xa>
 80028b2:	4770      	bx	lr
 80028b4:	f803 1b01 	strb.w	r1, [r3], #1
 80028b8:	e7f9      	b.n	80028ae <memset+0x4>

080028ba <_vsnprintf_r>:
 80028ba:	b530      	push	{r4, r5, lr}
 80028bc:	1e14      	subs	r4, r2, #0
 80028be:	4605      	mov	r5, r0
 80028c0:	b09b      	sub	sp, #108	; 0x6c
 80028c2:	4618      	mov	r0, r3
 80028c4:	da05      	bge.n	80028d2 <_vsnprintf_r+0x18>
 80028c6:	238b      	movs	r3, #139	; 0x8b
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	f04f 30ff 	mov.w	r0, #4294967295
 80028ce:	b01b      	add	sp, #108	; 0x6c
 80028d0:	bd30      	pop	{r4, r5, pc}
 80028d2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80028d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80028da:	bf14      	ite	ne
 80028dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80028e0:	4623      	moveq	r3, r4
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	9305      	str	r3, [sp, #20]
 80028e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ea:	9100      	str	r1, [sp, #0]
 80028ec:	9104      	str	r1, [sp, #16]
 80028ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80028f2:	4602      	mov	r2, r0
 80028f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80028f6:	4669      	mov	r1, sp
 80028f8:	4628      	mov	r0, r5
 80028fa:	f000 f819 	bl	8002930 <_svfprintf_r>
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	bfbc      	itt	lt
 8002902:	238b      	movlt	r3, #139	; 0x8b
 8002904:	602b      	strlt	r3, [r5, #0]
 8002906:	2c00      	cmp	r4, #0
 8002908:	d0e1      	beq.n	80028ce <_vsnprintf_r+0x14>
 800290a:	9b00      	ldr	r3, [sp, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e7dd      	b.n	80028ce <_vsnprintf_r+0x14>
	...

08002914 <vsnprintf>:
 8002914:	b507      	push	{r0, r1, r2, lr}
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	460a      	mov	r2, r1
 800291c:	4601      	mov	r1, r0
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <vsnprintf+0x18>)
 8002920:	6800      	ldr	r0, [r0, #0]
 8002922:	f7ff ffca 	bl	80028ba <_vsnprintf_r>
 8002926:	b003      	add	sp, #12
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	20000024 	.word	0x20000024

08002930 <_svfprintf_r>:
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	b0bd      	sub	sp, #244	; 0xf4
 8002936:	468a      	mov	sl, r1
 8002938:	4615      	mov	r5, r2
 800293a:	461f      	mov	r7, r3
 800293c:	4683      	mov	fp, r0
 800293e:	f001 fe25 	bl	800458c <_localeconv_r>
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	930d      	str	r3, [sp, #52]	; 0x34
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fc42 	bl	80001d0 <strlen>
 800294c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002950:	9008      	str	r0, [sp, #32]
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	d518      	bpl.n	8002988 <_svfprintf_r+0x58>
 8002956:	f8da 3010 	ldr.w	r3, [sl, #16]
 800295a:	b9ab      	cbnz	r3, 8002988 <_svfprintf_r+0x58>
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	4658      	mov	r0, fp
 8002960:	f001 fe2a 	bl	80045b8 <_malloc_r>
 8002964:	f8ca 0000 	str.w	r0, [sl]
 8002968:	f8ca 0010 	str.w	r0, [sl, #16]
 800296c:	b948      	cbnz	r0, 8002982 <_svfprintf_r+0x52>
 800296e:	230c      	movs	r3, #12
 8002970:	f8cb 3000 	str.w	r3, [fp]
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
 800297a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800297c:	b03d      	add	sp, #244	; 0xf4
 800297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	f8ca 3014 	str.w	r3, [sl, #20]
 8002988:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002bf0 <_svfprintf_r+0x2c0>
 800298c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002990:	2300      	movs	r3, #0
 8002992:	ac2c      	add	r4, sp, #176	; 0xb0
 8002994:	941f      	str	r4, [sp, #124]	; 0x7c
 8002996:	9321      	str	r3, [sp, #132]	; 0x84
 8002998:	9320      	str	r3, [sp, #128]	; 0x80
 800299a:	9505      	str	r5, [sp, #20]
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	9311      	str	r3, [sp, #68]	; 0x44
 80029a0:	9310      	str	r3, [sp, #64]	; 0x40
 80029a2:	9309      	str	r3, [sp, #36]	; 0x24
 80029a4:	9d05      	ldr	r5, [sp, #20]
 80029a6:	462b      	mov	r3, r5
 80029a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ac:	b112      	cbz	r2, 80029b4 <_svfprintf_r+0x84>
 80029ae:	2a25      	cmp	r2, #37	; 0x25
 80029b0:	f040 8083 	bne.w	8002aba <_svfprintf_r+0x18a>
 80029b4:	9b05      	ldr	r3, [sp, #20]
 80029b6:	1aee      	subs	r6, r5, r3
 80029b8:	d00d      	beq.n	80029d6 <_svfprintf_r+0xa6>
 80029ba:	e884 0048 	stmia.w	r4, {r3, r6}
 80029be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80029c0:	4433      	add	r3, r6
 80029c2:	9321      	str	r3, [sp, #132]	; 0x84
 80029c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80029c6:	3301      	adds	r3, #1
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	9320      	str	r3, [sp, #128]	; 0x80
 80029cc:	dc77      	bgt.n	8002abe <_svfprintf_r+0x18e>
 80029ce:	3408      	adds	r4, #8
 80029d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d2:	4433      	add	r3, r6
 80029d4:	9309      	str	r3, [sp, #36]	; 0x24
 80029d6:	782b      	ldrb	r3, [r5, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8729 	beq.w	8003830 <_svfprintf_r+0xf00>
 80029de:	2300      	movs	r3, #0
 80029e0:	1c69      	adds	r1, r5, #1
 80029e2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80029e6:	461a      	mov	r2, r3
 80029e8:	f04f 39ff 	mov.w	r9, #4294967295
 80029ec:	930a      	str	r3, [sp, #40]	; 0x28
 80029ee:	461d      	mov	r5, r3
 80029f0:	200a      	movs	r0, #10
 80029f2:	1c4e      	adds	r6, r1, #1
 80029f4:	7809      	ldrb	r1, [r1, #0]
 80029f6:	9605      	str	r6, [sp, #20]
 80029f8:	9102      	str	r1, [sp, #8]
 80029fa:	9902      	ldr	r1, [sp, #8]
 80029fc:	3920      	subs	r1, #32
 80029fe:	2958      	cmp	r1, #88	; 0x58
 8002a00:	f200 8418 	bhi.w	8003234 <_svfprintf_r+0x904>
 8002a04:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002a08:	041600a6 	.word	0x041600a6
 8002a0c:	00ab0416 	.word	0x00ab0416
 8002a10:	04160416 	.word	0x04160416
 8002a14:	04160416 	.word	0x04160416
 8002a18:	04160416 	.word	0x04160416
 8002a1c:	006500ae 	.word	0x006500ae
 8002a20:	00b70416 	.word	0x00b70416
 8002a24:	041600ba 	.word	0x041600ba
 8002a28:	00da00d7 	.word	0x00da00d7
 8002a2c:	00da00da 	.word	0x00da00da
 8002a30:	00da00da 	.word	0x00da00da
 8002a34:	00da00da 	.word	0x00da00da
 8002a38:	00da00da 	.word	0x00da00da
 8002a3c:	04160416 	.word	0x04160416
 8002a40:	04160416 	.word	0x04160416
 8002a44:	04160416 	.word	0x04160416
 8002a48:	04160416 	.word	0x04160416
 8002a4c:	04160416 	.word	0x04160416
 8002a50:	012b0115 	.word	0x012b0115
 8002a54:	012b0416 	.word	0x012b0416
 8002a58:	04160416 	.word	0x04160416
 8002a5c:	04160416 	.word	0x04160416
 8002a60:	041600ed 	.word	0x041600ed
 8002a64:	03400416 	.word	0x03400416
 8002a68:	04160416 	.word	0x04160416
 8002a6c:	04160416 	.word	0x04160416
 8002a70:	03a80416 	.word	0x03a80416
 8002a74:	04160416 	.word	0x04160416
 8002a78:	04160086 	.word	0x04160086
 8002a7c:	04160416 	.word	0x04160416
 8002a80:	04160416 	.word	0x04160416
 8002a84:	04160416 	.word	0x04160416
 8002a88:	04160416 	.word	0x04160416
 8002a8c:	01070416 	.word	0x01070416
 8002a90:	012b006b 	.word	0x012b006b
 8002a94:	012b012b 	.word	0x012b012b
 8002a98:	006b00f0 	.word	0x006b00f0
 8002a9c:	04160416 	.word	0x04160416
 8002aa0:	041600fa 	.word	0x041600fa
 8002aa4:	03420322 	.word	0x03420322
 8002aa8:	01010376 	.word	0x01010376
 8002aac:	03870416 	.word	0x03870416
 8002ab0:	03aa0416 	.word	0x03aa0416
 8002ab4:	04160416 	.word	0x04160416
 8002ab8:	03c2      	.short	0x03c2
 8002aba:	461d      	mov	r5, r3
 8002abc:	e773      	b.n	80029a6 <_svfprintf_r+0x76>
 8002abe:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	4658      	mov	r0, fp
 8002ac4:	f002 fa72 	bl	8004fac <__ssprint_r>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f040 8692 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8002ace:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ad0:	e77e      	b.n	80029d0 <_svfprintf_r+0xa0>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	222b      	movs	r2, #43	; 0x2b
 8002ad6:	9905      	ldr	r1, [sp, #20]
 8002ad8:	e78b      	b.n	80029f2 <_svfprintf_r+0xc2>
 8002ada:	460f      	mov	r7, r1
 8002adc:	e7fb      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002ade:	b10b      	cbz	r3, 8002ae4 <_svfprintf_r+0x1b4>
 8002ae0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002ae4:	06ae      	lsls	r6, r5, #26
 8002ae6:	f140 80aa 	bpl.w	8002c3e <_svfprintf_r+0x30e>
 8002aea:	3707      	adds	r7, #7
 8002aec:	f027 0707 	bic.w	r7, r7, #7
 8002af0:	f107 0308 	add.w	r3, r7, #8
 8002af4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002af8:	9304      	str	r3, [sp, #16]
 8002afa:	2e00      	cmp	r6, #0
 8002afc:	f177 0300 	sbcs.w	r3, r7, #0
 8002b00:	da06      	bge.n	8002b10 <_svfprintf_r+0x1e0>
 8002b02:	4276      	negs	r6, r6
 8002b04:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002b08:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002b0c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002b10:	2301      	movs	r3, #1
 8002b12:	e2ca      	b.n	80030aa <_svfprintf_r+0x77a>
 8002b14:	b10b      	cbz	r3, 8002b1a <_svfprintf_r+0x1ea>
 8002b16:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002b1a:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <_svfprintf_r+0x2c8>)
 8002b1c:	9311      	str	r3, [sp, #68]	; 0x44
 8002b1e:	06ab      	lsls	r3, r5, #26
 8002b20:	f140 8339 	bpl.w	8003196 <_svfprintf_r+0x866>
 8002b24:	3707      	adds	r7, #7
 8002b26:	f027 0707 	bic.w	r7, r7, #7
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002b32:	9304      	str	r3, [sp, #16]
 8002b34:	07e8      	lsls	r0, r5, #31
 8002b36:	d50b      	bpl.n	8002b50 <_svfprintf_r+0x220>
 8002b38:	ea56 0307 	orrs.w	r3, r6, r7
 8002b3c:	d008      	beq.n	8002b50 <_svfprintf_r+0x220>
 8002b3e:	2330      	movs	r3, #48	; 0x30
 8002b40:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002b44:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002b48:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002b4c:	f045 0502 	orr.w	r5, r5, #2
 8002b50:	2302      	movs	r3, #2
 8002b52:	e2a7      	b.n	80030a4 <_svfprintf_r+0x774>
 8002b54:	2a00      	cmp	r2, #0
 8002b56:	d1be      	bne.n	8002ad6 <_svfprintf_r+0x1a6>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	e7bb      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002b5e:	f045 0501 	orr.w	r5, r5, #1
 8002b62:	e7b8      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002b64:	683e      	ldr	r6, [r7, #0]
 8002b66:	960a      	str	r6, [sp, #40]	; 0x28
 8002b68:	2e00      	cmp	r6, #0
 8002b6a:	f107 0104 	add.w	r1, r7, #4
 8002b6e:	dab4      	bge.n	8002ada <_svfprintf_r+0x1aa>
 8002b70:	4276      	negs	r6, r6
 8002b72:	960a      	str	r6, [sp, #40]	; 0x28
 8002b74:	460f      	mov	r7, r1
 8002b76:	f045 0504 	orr.w	r5, r5, #4
 8002b7a:	e7ac      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002b7c:	9905      	ldr	r1, [sp, #20]
 8002b7e:	1c4e      	adds	r6, r1, #1
 8002b80:	7809      	ldrb	r1, [r1, #0]
 8002b82:	9102      	str	r1, [sp, #8]
 8002b84:	292a      	cmp	r1, #42	; 0x2a
 8002b86:	d010      	beq.n	8002baa <_svfprintf_r+0x27a>
 8002b88:	f04f 0900 	mov.w	r9, #0
 8002b8c:	9605      	str	r6, [sp, #20]
 8002b8e:	9902      	ldr	r1, [sp, #8]
 8002b90:	3930      	subs	r1, #48	; 0x30
 8002b92:	2909      	cmp	r1, #9
 8002b94:	f63f af31 	bhi.w	80029fa <_svfprintf_r+0xca>
 8002b98:	fb00 1909 	mla	r9, r0, r9, r1
 8002b9c:	9905      	ldr	r1, [sp, #20]
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002ba4:	9102      	str	r1, [sp, #8]
 8002ba6:	9605      	str	r6, [sp, #20]
 8002ba8:	e7f1      	b.n	8002b8e <_svfprintf_r+0x25e>
 8002baa:	6839      	ldr	r1, [r7, #0]
 8002bac:	9605      	str	r6, [sp, #20]
 8002bae:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002bb2:	3704      	adds	r7, #4
 8002bb4:	e78f      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002bb6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002bba:	e78c      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	910a      	str	r1, [sp, #40]	; 0x28
 8002bc0:	9902      	ldr	r1, [sp, #8]
 8002bc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002bc4:	3930      	subs	r1, #48	; 0x30
 8002bc6:	fb00 1106 	mla	r1, r0, r6, r1
 8002bca:	910a      	str	r1, [sp, #40]	; 0x28
 8002bcc:	9905      	ldr	r1, [sp, #20]
 8002bce:	460e      	mov	r6, r1
 8002bd0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002bd4:	9102      	str	r1, [sp, #8]
 8002bd6:	9902      	ldr	r1, [sp, #8]
 8002bd8:	9605      	str	r6, [sp, #20]
 8002bda:	3930      	subs	r1, #48	; 0x30
 8002bdc:	2909      	cmp	r1, #9
 8002bde:	d9ef      	bls.n	8002bc0 <_svfprintf_r+0x290>
 8002be0:	e70b      	b.n	80029fa <_svfprintf_r+0xca>
 8002be2:	f045 0508 	orr.w	r5, r5, #8
 8002be6:	e776      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002be8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002bec:	e773      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002bee:	bf00      	nop
	...
 8002bf8:	080057b5 	.word	0x080057b5
 8002bfc:	9905      	ldr	r1, [sp, #20]
 8002bfe:	7809      	ldrb	r1, [r1, #0]
 8002c00:	296c      	cmp	r1, #108	; 0x6c
 8002c02:	d105      	bne.n	8002c10 <_svfprintf_r+0x2e0>
 8002c04:	9905      	ldr	r1, [sp, #20]
 8002c06:	3101      	adds	r1, #1
 8002c08:	9105      	str	r1, [sp, #20]
 8002c0a:	f045 0520 	orr.w	r5, r5, #32
 8002c0e:	e762      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002c10:	f045 0510 	orr.w	r5, r5, #16
 8002c14:	e75f      	b.n	8002ad6 <_svfprintf_r+0x1a6>
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	9304      	str	r3, [sp, #16]
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002c22:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002c26:	f04f 0901 	mov.w	r9, #1
 8002c2a:	4637      	mov	r7, r6
 8002c2c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002c30:	e11b      	b.n	8002e6a <_svfprintf_r+0x53a>
 8002c32:	b10b      	cbz	r3, 8002c38 <_svfprintf_r+0x308>
 8002c34:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002c38:	f045 0510 	orr.w	r5, r5, #16
 8002c3c:	e752      	b.n	8002ae4 <_svfprintf_r+0x1b4>
 8002c3e:	f015 0f10 	tst.w	r5, #16
 8002c42:	f107 0304 	add.w	r3, r7, #4
 8002c46:	d003      	beq.n	8002c50 <_svfprintf_r+0x320>
 8002c48:	683e      	ldr	r6, [r7, #0]
 8002c4a:	9304      	str	r3, [sp, #16]
 8002c4c:	17f7      	asrs	r7, r6, #31
 8002c4e:	e754      	b.n	8002afa <_svfprintf_r+0x1ca>
 8002c50:	683e      	ldr	r6, [r7, #0]
 8002c52:	9304      	str	r3, [sp, #16]
 8002c54:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c58:	bf18      	it	ne
 8002c5a:	b236      	sxthne	r6, r6
 8002c5c:	e7f6      	b.n	8002c4c <_svfprintf_r+0x31c>
 8002c5e:	b10b      	cbz	r3, 8002c64 <_svfprintf_r+0x334>
 8002c60:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002c64:	3707      	adds	r7, #7
 8002c66:	f027 0707 	bic.w	r7, r7, #7
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	9304      	str	r3, [sp, #16]
 8002c70:	ed97 7b00 	vldr	d7, [r7]
 8002c74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002c78:	9b06      	ldr	r3, [sp, #24]
 8002c7a:	9312      	str	r3, [sp, #72]	; 0x48
 8002c7c:	9b07      	ldr	r3, [sp, #28]
 8002c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c82:	9313      	str	r3, [sp, #76]	; 0x4c
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <_svfprintf_r+0x484>)
 8002c8a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002c8e:	f7fd ff49 	bl	8000b24 <__aeabi_dcmpun>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	f040 85d5 	bne.w	8003842 <_svfprintf_r+0xf12>
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	4b45      	ldr	r3, [pc, #276]	; (8002db4 <_svfprintf_r+0x484>)
 8002c9e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002ca2:	f7fd ff21 	bl	8000ae8 <__aeabi_dcmple>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f040 85cb 	bne.w	8003842 <_svfprintf_r+0xf12>
 8002cac:	2200      	movs	r2, #0
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cb4:	f7fd ff0e 	bl	8000ad4 <__aeabi_dcmplt>
 8002cb8:	b110      	cbz	r0, 8002cc0 <_svfprintf_r+0x390>
 8002cba:	232d      	movs	r3, #45	; 0x2d
 8002cbc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <_svfprintf_r+0x488>)
 8002cc2:	4a3e      	ldr	r2, [pc, #248]	; (8002dbc <_svfprintf_r+0x48c>)
 8002cc4:	9902      	ldr	r1, [sp, #8]
 8002cc6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002cca:	2947      	cmp	r1, #71	; 0x47
 8002ccc:	bfcc      	ite	gt
 8002cce:	4690      	movgt	r8, r2
 8002cd0:	4698      	movle	r8, r3
 8002cd2:	f04f 0903 	mov.w	r9, #3
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	4637      	mov	r7, r6
 8002cda:	e0c6      	b.n	8002e6a <_svfprintf_r+0x53a>
 8002cdc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ce0:	d022      	beq.n	8002d28 <_svfprintf_r+0x3f8>
 8002ce2:	9b02      	ldr	r3, [sp, #8]
 8002ce4:	f023 0320 	bic.w	r3, r3, #32
 8002ce8:	2b47      	cmp	r3, #71	; 0x47
 8002cea:	d104      	bne.n	8002cf6 <_svfprintf_r+0x3c6>
 8002cec:	f1b9 0f00 	cmp.w	r9, #0
 8002cf0:	bf08      	it	eq
 8002cf2:	f04f 0901 	moveq.w	r9, #1
 8002cf6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8002cfc:	9b07      	ldr	r3, [sp, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da15      	bge.n	8002d2e <_svfprintf_r+0x3fe>
 8002d02:	9b06      	ldr	r3, [sp, #24]
 8002d04:	930e      	str	r3, [sp, #56]	; 0x38
 8002d06:	9b07      	ldr	r3, [sp, #28]
 8002d08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d0e:	232d      	movs	r3, #45	; 0x2d
 8002d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d12:	9b02      	ldr	r3, [sp, #8]
 8002d14:	f023 0720 	bic.w	r7, r3, #32
 8002d18:	2f46      	cmp	r7, #70	; 0x46
 8002d1a:	d00e      	beq.n	8002d3a <_svfprintf_r+0x40a>
 8002d1c:	2f45      	cmp	r7, #69	; 0x45
 8002d1e:	d146      	bne.n	8002dae <_svfprintf_r+0x47e>
 8002d20:	f109 0601 	add.w	r6, r9, #1
 8002d24:	2102      	movs	r1, #2
 8002d26:	e00a      	b.n	8002d3e <_svfprintf_r+0x40e>
 8002d28:	f04f 0906 	mov.w	r9, #6
 8002d2c:	e7e3      	b.n	8002cf6 <_svfprintf_r+0x3c6>
 8002d2e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002d32:	2300      	movs	r3, #0
 8002d34:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002d38:	e7ea      	b.n	8002d10 <_svfprintf_r+0x3e0>
 8002d3a:	464e      	mov	r6, r9
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	ab1a      	add	r3, sp, #104	; 0x68
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4632      	mov	r2, r6
 8002d48:	ab19      	add	r3, sp, #100	; 0x64
 8002d4a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002d4e:	4658      	mov	r0, fp
 8002d50:	f000 fe4e 	bl	80039f0 <_dtoa_r>
 8002d54:	2f47      	cmp	r7, #71	; 0x47
 8002d56:	4680      	mov	r8, r0
 8002d58:	d102      	bne.n	8002d60 <_svfprintf_r+0x430>
 8002d5a:	07e8      	lsls	r0, r5, #31
 8002d5c:	f140 857e 	bpl.w	800385c <_svfprintf_r+0xf2c>
 8002d60:	eb08 0306 	add.w	r3, r8, r6
 8002d64:	2f46      	cmp	r7, #70	; 0x46
 8002d66:	9303      	str	r3, [sp, #12]
 8002d68:	d111      	bne.n	8002d8e <_svfprintf_r+0x45e>
 8002d6a:	f898 3000 	ldrb.w	r3, [r8]
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d109      	bne.n	8002d86 <_svfprintf_r+0x456>
 8002d72:	2200      	movs	r2, #0
 8002d74:	2300      	movs	r3, #0
 8002d76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002d7a:	f7fd fea1 	bl	8000ac0 <__aeabi_dcmpeq>
 8002d7e:	b910      	cbnz	r0, 8002d86 <_svfprintf_r+0x456>
 8002d80:	f1c6 0601 	rsb	r6, r6, #1
 8002d84:	9619      	str	r6, [sp, #100]	; 0x64
 8002d86:	9a03      	ldr	r2, [sp, #12]
 8002d88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002d8a:	441a      	add	r2, r3
 8002d8c:	9203      	str	r2, [sp, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2300      	movs	r3, #0
 8002d92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002d96:	f7fd fe93 	bl	8000ac0 <__aeabi_dcmpeq>
 8002d9a:	b988      	cbnz	r0, 8002dc0 <_svfprintf_r+0x490>
 8002d9c:	2230      	movs	r2, #48	; 0x30
 8002d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002da0:	9903      	ldr	r1, [sp, #12]
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d90e      	bls.n	8002dc4 <_svfprintf_r+0x494>
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	911d      	str	r1, [sp, #116]	; 0x74
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e7f7      	b.n	8002d9e <_svfprintf_r+0x46e>
 8002dae:	464e      	mov	r6, r9
 8002db0:	e7b8      	b.n	8002d24 <_svfprintf_r+0x3f4>
 8002db2:	bf00      	nop
 8002db4:	7fefffff 	.word	0x7fefffff
 8002db8:	080057a5 	.word	0x080057a5
 8002dbc:	080057a9 	.word	0x080057a9
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	931d      	str	r3, [sp, #116]	; 0x74
 8002dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002dc6:	2f47      	cmp	r7, #71	; 0x47
 8002dc8:	eba3 0308 	sub.w	r3, r3, r8
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	f040 80fa 	bne.w	8002fc6 <_svfprintf_r+0x696>
 8002dd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002dd4:	1cd9      	adds	r1, r3, #3
 8002dd6:	db02      	blt.n	8002dde <_svfprintf_r+0x4ae>
 8002dd8:	4599      	cmp	r9, r3
 8002dda:	f280 8120 	bge.w	800301e <_svfprintf_r+0x6ee>
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	3b02      	subs	r3, #2
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002de6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002dea:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002dee:	1e53      	subs	r3, r2, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	9319      	str	r3, [sp, #100]	; 0x64
 8002df4:	bfb6      	itet	lt
 8002df6:	f1c2 0301 	rsblt	r3, r2, #1
 8002dfa:	222b      	movge	r2, #43	; 0x2b
 8002dfc:	222d      	movlt	r2, #45	; 0x2d
 8002dfe:	2b09      	cmp	r3, #9
 8002e00:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002e04:	f340 80fb 	ble.w	8002ffe <_svfprintf_r+0x6ce>
 8002e08:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002e0c:	260a      	movs	r6, #10
 8002e0e:	fb93 f0f6 	sdiv	r0, r3, r6
 8002e12:	fb06 3310 	mls	r3, r6, r0, r3
 8002e16:	3330      	adds	r3, #48	; 0x30
 8002e18:	2809      	cmp	r0, #9
 8002e1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002e1e:	f102 31ff 	add.w	r1, r2, #4294967295
 8002e22:	4603      	mov	r3, r0
 8002e24:	f300 80e4 	bgt.w	8002ff0 <_svfprintf_r+0x6c0>
 8002e28:	3330      	adds	r3, #48	; 0x30
 8002e2a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002e2e:	3a02      	subs	r2, #2
 8002e30:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002e34:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002e38:	4282      	cmp	r2, r0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f0c0 80da 	bcc.w	8002ff4 <_svfprintf_r+0x6c4>
 8002e40:	9a03      	ldr	r2, [sp, #12]
 8002e42:	ab1b      	add	r3, sp, #108	; 0x6c
 8002e44:	1acb      	subs	r3, r1, r3
 8002e46:	2a01      	cmp	r2, #1
 8002e48:	9310      	str	r3, [sp, #64]	; 0x40
 8002e4a:	eb03 0902 	add.w	r9, r3, r2
 8002e4e:	dc02      	bgt.n	8002e56 <_svfprintf_r+0x526>
 8002e50:	f015 0701 	ands.w	r7, r5, #1
 8002e54:	d002      	beq.n	8002e5c <_svfprintf_r+0x52c>
 8002e56:	9b08      	ldr	r3, [sp, #32]
 8002e58:	2700      	movs	r7, #0
 8002e5a:	4499      	add	r9, r3
 8002e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e5e:	b113      	cbz	r3, 8002e66 <_svfprintf_r+0x536>
 8002e60:	232d      	movs	r3, #45	; 0x2d
 8002e62:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e68:	2600      	movs	r6, #0
 8002e6a:	454e      	cmp	r6, r9
 8002e6c:	4633      	mov	r3, r6
 8002e6e:	bfb8      	it	lt
 8002e70:	464b      	movlt	r3, r9
 8002e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e74:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002e78:	b113      	cbz	r3, 8002e80 <_svfprintf_r+0x550>
 8002e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e80:	f015 0302 	ands.w	r3, r5, #2
 8002e84:	9314      	str	r3, [sp, #80]	; 0x50
 8002e86:	bf1e      	ittt	ne
 8002e88:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002e8a:	3302      	addne	r3, #2
 8002e8c:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002e8e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002e92:	9315      	str	r3, [sp, #84]	; 0x54
 8002e94:	d118      	bne.n	8002ec8 <_svfprintf_r+0x598>
 8002e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8002ea0:	dd12      	ble.n	8002ec8 <_svfprintf_r+0x598>
 8002ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	4ba9      	ldr	r3, [pc, #676]	; (800314c <_svfprintf_r+0x81c>)
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	f300 81d5 	bgt.w	8003258 <_svfprintf_r+0x928>
 8002eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002eb0:	6063      	str	r3, [r4, #4]
 8002eb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eb6:	4413      	add	r3, r2
 8002eb8:	9321      	str	r3, [sp, #132]	; 0x84
 8002eba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	9320      	str	r3, [sp, #128]	; 0x80
 8002ec2:	f300 81e2 	bgt.w	800328a <_svfprintf_r+0x95a>
 8002ec6:	3408      	adds	r4, #8
 8002ec8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002ecc:	b173      	cbz	r3, 8002eec <_svfprintf_r+0x5bc>
 8002ece:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6063      	str	r3, [r4, #4]
 8002ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eda:	3301      	adds	r3, #1
 8002edc:	9321      	str	r3, [sp, #132]	; 0x84
 8002ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	2b07      	cmp	r3, #7
 8002ee4:	9320      	str	r3, [sp, #128]	; 0x80
 8002ee6:	f300 81da 	bgt.w	800329e <_svfprintf_r+0x96e>
 8002eea:	3408      	adds	r4, #8
 8002eec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002eee:	b16b      	cbz	r3, 8002f0c <_svfprintf_r+0x5dc>
 8002ef0:	ab18      	add	r3, sp, #96	; 0x60
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	6063      	str	r3, [r4, #4]
 8002ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002efa:	3302      	adds	r3, #2
 8002efc:	9321      	str	r3, [sp, #132]	; 0x84
 8002efe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f00:	3301      	adds	r3, #1
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	9320      	str	r3, [sp, #128]	; 0x80
 8002f06:	f300 81d4 	bgt.w	80032b2 <_svfprintf_r+0x982>
 8002f0a:	3408      	adds	r4, #8
 8002f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d114      	bne.n	8002f3c <_svfprintf_r+0x60c>
 8002f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dd0f      	ble.n	8002f3c <_svfprintf_r+0x60c>
 8002f1c:	4a8c      	ldr	r2, [pc, #560]	; (8003150 <_svfprintf_r+0x820>)
 8002f1e:	6022      	str	r2, [r4, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	f300 81d0 	bgt.w	80032c6 <_svfprintf_r+0x996>
 8002f26:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	9321      	str	r3, [sp, #132]	; 0x84
 8002f2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f30:	3301      	adds	r3, #1
 8002f32:	2b07      	cmp	r3, #7
 8002f34:	9320      	str	r3, [sp, #128]	; 0x80
 8002f36:	f300 81df 	bgt.w	80032f8 <_svfprintf_r+0x9c8>
 8002f3a:	3408      	adds	r4, #8
 8002f3c:	eba6 0609 	sub.w	r6, r6, r9
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	dd0f      	ble.n	8002f64 <_svfprintf_r+0x634>
 8002f44:	4b82      	ldr	r3, [pc, #520]	; (8003150 <_svfprintf_r+0x820>)
 8002f46:	6023      	str	r3, [r4, #0]
 8002f48:	2e10      	cmp	r6, #16
 8002f4a:	f300 81df 	bgt.w	800330c <_svfprintf_r+0x9dc>
 8002f4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f50:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002f52:	6066      	str	r6, [r4, #4]
 8002f54:	3301      	adds	r3, #1
 8002f56:	4406      	add	r6, r0
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	9621      	str	r6, [sp, #132]	; 0x84
 8002f5c:	9320      	str	r3, [sp, #128]	; 0x80
 8002f5e:	f300 81ec 	bgt.w	800333a <_svfprintf_r+0xa0a>
 8002f62:	3408      	adds	r4, #8
 8002f64:	05eb      	lsls	r3, r5, #23
 8002f66:	f100 81f2 	bmi.w	800334e <_svfprintf_r+0xa1e>
 8002f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f6c:	e884 0300 	stmia.w	r4, {r8, r9}
 8002f70:	444b      	add	r3, r9
 8002f72:	9321      	str	r3, [sp, #132]	; 0x84
 8002f74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f76:	3301      	adds	r3, #1
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	9320      	str	r3, [sp, #128]	; 0x80
 8002f7c:	f340 8419 	ble.w	80037b2 <_svfprintf_r+0xe82>
 8002f80:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f82:	4651      	mov	r1, sl
 8002f84:	4658      	mov	r0, fp
 8002f86:	f002 f811 	bl	8004fac <__ssprint_r>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	f040 8431 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8002f90:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f92:	076b      	lsls	r3, r5, #29
 8002f94:	f100 8410 	bmi.w	80037b8 <_svfprintf_r+0xe88>
 8002f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f9e:	428a      	cmp	r2, r1
 8002fa0:	bfac      	ite	ge
 8002fa2:	189b      	addge	r3, r3, r2
 8002fa4:	185b      	addlt	r3, r3, r1
 8002fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002faa:	b13b      	cbz	r3, 8002fbc <_svfprintf_r+0x68c>
 8002fac:	aa1f      	add	r2, sp, #124	; 0x7c
 8002fae:	4651      	mov	r1, sl
 8002fb0:	4658      	mov	r0, fp
 8002fb2:	f001 fffb 	bl	8004fac <__ssprint_r>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	f040 841b 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9320      	str	r3, [sp, #128]	; 0x80
 8002fc0:	9f04      	ldr	r7, [sp, #16]
 8002fc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fc4:	e4ee      	b.n	80029a4 <_svfprintf_r+0x74>
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	2b65      	cmp	r3, #101	; 0x65
 8002fca:	f77f af0b 	ble.w	8002de4 <_svfprintf_r+0x4b4>
 8002fce:	9b02      	ldr	r3, [sp, #8]
 8002fd0:	2b66      	cmp	r3, #102	; 0x66
 8002fd2:	d124      	bne.n	800301e <_svfprintf_r+0x6ee>
 8002fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	dd19      	ble.n	800300e <_svfprintf_r+0x6de>
 8002fda:	f1b9 0f00 	cmp.w	r9, #0
 8002fde:	d101      	bne.n	8002fe4 <_svfprintf_r+0x6b4>
 8002fe0:	07ea      	lsls	r2, r5, #31
 8002fe2:	d502      	bpl.n	8002fea <_svfprintf_r+0x6ba>
 8002fe4:	9a08      	ldr	r2, [sp, #32]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	444b      	add	r3, r9
 8002fea:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002fec:	4699      	mov	r9, r3
 8002fee:	e735      	b.n	8002e5c <_svfprintf_r+0x52c>
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	e70c      	b.n	8002e0e <_svfprintf_r+0x4de>
 8002ff4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffc:	e71c      	b.n	8002e38 <_svfprintf_r+0x508>
 8002ffe:	2230      	movs	r2, #48	; 0x30
 8003000:	4413      	add	r3, r2
 8003002:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003006:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800300a:	a91c      	add	r1, sp, #112	; 0x70
 800300c:	e718      	b.n	8002e40 <_svfprintf_r+0x510>
 800300e:	f1b9 0f00 	cmp.w	r9, #0
 8003012:	d101      	bne.n	8003018 <_svfprintf_r+0x6e8>
 8003014:	07eb      	lsls	r3, r5, #31
 8003016:	d515      	bpl.n	8003044 <_svfprintf_r+0x714>
 8003018:	9b08      	ldr	r3, [sp, #32]
 800301a:	3301      	adds	r3, #1
 800301c:	e7e4      	b.n	8002fe8 <_svfprintf_r+0x6b8>
 800301e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	429a      	cmp	r2, r3
 8003024:	db06      	blt.n	8003034 <_svfprintf_r+0x704>
 8003026:	07ef      	lsls	r7, r5, #31
 8003028:	d50e      	bpl.n	8003048 <_svfprintf_r+0x718>
 800302a:	9b08      	ldr	r3, [sp, #32]
 800302c:	4413      	add	r3, r2
 800302e:	2267      	movs	r2, #103	; 0x67
 8003030:	9202      	str	r2, [sp, #8]
 8003032:	e7da      	b.n	8002fea <_svfprintf_r+0x6ba>
 8003034:	9b03      	ldr	r3, [sp, #12]
 8003036:	9908      	ldr	r1, [sp, #32]
 8003038:	2a00      	cmp	r2, #0
 800303a:	440b      	add	r3, r1
 800303c:	dcf7      	bgt.n	800302e <_svfprintf_r+0x6fe>
 800303e:	f1c2 0201 	rsb	r2, r2, #1
 8003042:	e7f3      	b.n	800302c <_svfprintf_r+0x6fc>
 8003044:	2301      	movs	r3, #1
 8003046:	e7d0      	b.n	8002fea <_svfprintf_r+0x6ba>
 8003048:	4613      	mov	r3, r2
 800304a:	e7f0      	b.n	800302e <_svfprintf_r+0x6fe>
 800304c:	b10b      	cbz	r3, 8003052 <_svfprintf_r+0x722>
 800304e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003052:	f015 0f20 	tst.w	r5, #32
 8003056:	f107 0304 	add.w	r3, r7, #4
 800305a:	d008      	beq.n	800306e <_svfprintf_r+0x73e>
 800305c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	17ce      	asrs	r6, r1, #31
 8003062:	4608      	mov	r0, r1
 8003064:	4631      	mov	r1, r6
 8003066:	e9c2 0100 	strd	r0, r1, [r2]
 800306a:	461f      	mov	r7, r3
 800306c:	e49a      	b.n	80029a4 <_svfprintf_r+0x74>
 800306e:	06ee      	lsls	r6, r5, #27
 8003070:	d503      	bpl.n	800307a <_svfprintf_r+0x74a>
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003076:	6011      	str	r1, [r2, #0]
 8003078:	e7f7      	b.n	800306a <_svfprintf_r+0x73a>
 800307a:	0668      	lsls	r0, r5, #25
 800307c:	d5f9      	bpl.n	8003072 <_svfprintf_r+0x742>
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003084:	8011      	strh	r1, [r2, #0]
 8003086:	e7f0      	b.n	800306a <_svfprintf_r+0x73a>
 8003088:	f045 0510 	orr.w	r5, r5, #16
 800308c:	f015 0320 	ands.w	r3, r5, #32
 8003090:	d022      	beq.n	80030d8 <_svfprintf_r+0x7a8>
 8003092:	3707      	adds	r7, #7
 8003094:	f027 0707 	bic.w	r7, r7, #7
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	e9d7 6700 	ldrd	r6, r7, [r7]
 80030a0:	9304      	str	r3, [sp, #16]
 80030a2:	2300      	movs	r3, #0
 80030a4:	2200      	movs	r2, #0
 80030a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80030aa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80030ae:	f000 83db 	beq.w	8003868 <_svfprintf_r+0xf38>
 80030b2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80030b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80030b8:	ea56 0207 	orrs.w	r2, r6, r7
 80030bc:	f040 83d9 	bne.w	8003872 <_svfprintf_r+0xf42>
 80030c0:	f1b9 0f00 	cmp.w	r9, #0
 80030c4:	f000 80aa 	beq.w	800321c <_svfprintf_r+0x8ec>
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d076      	beq.n	80031ba <_svfprintf_r+0x88a>
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	f000 8091 	beq.w	80031f4 <_svfprintf_r+0x8c4>
 80030d2:	2600      	movs	r6, #0
 80030d4:	2700      	movs	r7, #0
 80030d6:	e3d2      	b.n	800387e <_svfprintf_r+0xf4e>
 80030d8:	1d3a      	adds	r2, r7, #4
 80030da:	f015 0110 	ands.w	r1, r5, #16
 80030de:	9204      	str	r2, [sp, #16]
 80030e0:	d002      	beq.n	80030e8 <_svfprintf_r+0x7b8>
 80030e2:	683e      	ldr	r6, [r7, #0]
 80030e4:	2700      	movs	r7, #0
 80030e6:	e7dd      	b.n	80030a4 <_svfprintf_r+0x774>
 80030e8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80030ec:	d0f9      	beq.n	80030e2 <_svfprintf_r+0x7b2>
 80030ee:	883e      	ldrh	r6, [r7, #0]
 80030f0:	2700      	movs	r7, #0
 80030f2:	e7d6      	b.n	80030a2 <_svfprintf_r+0x772>
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	2330      	movs	r3, #48	; 0x30
 80030fa:	2278      	movs	r2, #120	; 0x78
 80030fc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <_svfprintf_r+0x824>)
 8003102:	683e      	ldr	r6, [r7, #0]
 8003104:	9311      	str	r3, [sp, #68]	; 0x44
 8003106:	2700      	movs	r7, #0
 8003108:	f045 0502 	orr.w	r5, r5, #2
 800310c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003110:	2302      	movs	r3, #2
 8003112:	9202      	str	r2, [sp, #8]
 8003114:	e7c6      	b.n	80030a4 <_svfprintf_r+0x774>
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	2600      	movs	r6, #0
 800311a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800311e:	9304      	str	r3, [sp, #16]
 8003120:	f8d7 8000 	ldr.w	r8, [r7]
 8003124:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003128:	d00a      	beq.n	8003140 <_svfprintf_r+0x810>
 800312a:	464a      	mov	r2, r9
 800312c:	4631      	mov	r1, r6
 800312e:	4640      	mov	r0, r8
 8003130:	f7fd f856 	bl	80001e0 <memchr>
 8003134:	2800      	cmp	r0, #0
 8003136:	f000 808d 	beq.w	8003254 <_svfprintf_r+0x924>
 800313a:	eba0 0908 	sub.w	r9, r0, r8
 800313e:	e5cb      	b.n	8002cd8 <_svfprintf_r+0x3a8>
 8003140:	4640      	mov	r0, r8
 8003142:	f7fd f845 	bl	80001d0 <strlen>
 8003146:	4681      	mov	r9, r0
 8003148:	e5c6      	b.n	8002cd8 <_svfprintf_r+0x3a8>
 800314a:	bf00      	nop
 800314c:	080057d9 	.word	0x080057d9
 8003150:	080057e9 	.word	0x080057e9
 8003154:	080057c6 	.word	0x080057c6
 8003158:	f045 0510 	orr.w	r5, r5, #16
 800315c:	06a9      	lsls	r1, r5, #26
 800315e:	d509      	bpl.n	8003174 <_svfprintf_r+0x844>
 8003160:	3707      	adds	r7, #7
 8003162:	f027 0707 	bic.w	r7, r7, #7
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	2301      	movs	r3, #1
 8003172:	e797      	b.n	80030a4 <_svfprintf_r+0x774>
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	f015 0f10 	tst.w	r5, #16
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	d001      	beq.n	8003182 <_svfprintf_r+0x852>
 800317e:	683e      	ldr	r6, [r7, #0]
 8003180:	e002      	b.n	8003188 <_svfprintf_r+0x858>
 8003182:	066a      	lsls	r2, r5, #25
 8003184:	d5fb      	bpl.n	800317e <_svfprintf_r+0x84e>
 8003186:	883e      	ldrh	r6, [r7, #0]
 8003188:	2700      	movs	r7, #0
 800318a:	e7f1      	b.n	8003170 <_svfprintf_r+0x840>
 800318c:	b10b      	cbz	r3, 8003192 <_svfprintf_r+0x862>
 800318e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003192:	4ba3      	ldr	r3, [pc, #652]	; (8003420 <_svfprintf_r+0xaf0>)
 8003194:	e4c2      	b.n	8002b1c <_svfprintf_r+0x1ec>
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	f015 0f10 	tst.w	r5, #16
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	d001      	beq.n	80031a4 <_svfprintf_r+0x874>
 80031a0:	683e      	ldr	r6, [r7, #0]
 80031a2:	e002      	b.n	80031aa <_svfprintf_r+0x87a>
 80031a4:	066e      	lsls	r6, r5, #25
 80031a6:	d5fb      	bpl.n	80031a0 <_svfprintf_r+0x870>
 80031a8:	883e      	ldrh	r6, [r7, #0]
 80031aa:	2700      	movs	r7, #0
 80031ac:	e4c2      	b.n	8002b34 <_svfprintf_r+0x204>
 80031ae:	4643      	mov	r3, r8
 80031b0:	e366      	b.n	8003880 <_svfprintf_r+0xf50>
 80031b2:	2f00      	cmp	r7, #0
 80031b4:	bf08      	it	eq
 80031b6:	2e0a      	cmpeq	r6, #10
 80031b8:	d205      	bcs.n	80031c6 <_svfprintf_r+0x896>
 80031ba:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80031be:	3630      	adds	r6, #48	; 0x30
 80031c0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80031c4:	e377      	b.n	80038b6 <_svfprintf_r+0xf86>
 80031c6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80031ca:	4630      	mov	r0, r6
 80031cc:	4639      	mov	r1, r7
 80031ce:	220a      	movs	r2, #10
 80031d0:	2300      	movs	r3, #0
 80031d2:	f7fd fce5 	bl	8000ba0 <__aeabi_uldivmod>
 80031d6:	3230      	adds	r2, #48	; 0x30
 80031d8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80031dc:	2300      	movs	r3, #0
 80031de:	4630      	mov	r0, r6
 80031e0:	4639      	mov	r1, r7
 80031e2:	220a      	movs	r2, #10
 80031e4:	f7fd fcdc 	bl	8000ba0 <__aeabi_uldivmod>
 80031e8:	4606      	mov	r6, r0
 80031ea:	460f      	mov	r7, r1
 80031ec:	ea56 0307 	orrs.w	r3, r6, r7
 80031f0:	d1eb      	bne.n	80031ca <_svfprintf_r+0x89a>
 80031f2:	e360      	b.n	80038b6 <_svfprintf_r+0xf86>
 80031f4:	2600      	movs	r6, #0
 80031f6:	2700      	movs	r7, #0
 80031f8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80031fc:	f006 030f 	and.w	r3, r6, #15
 8003200:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003208:	0933      	lsrs	r3, r6, #4
 800320a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800320e:	093a      	lsrs	r2, r7, #4
 8003210:	461e      	mov	r6, r3
 8003212:	4617      	mov	r7, r2
 8003214:	ea56 0307 	orrs.w	r3, r6, r7
 8003218:	d1f0      	bne.n	80031fc <_svfprintf_r+0x8cc>
 800321a:	e34c      	b.n	80038b6 <_svfprintf_r+0xf86>
 800321c:	b93b      	cbnz	r3, 800322e <_svfprintf_r+0x8fe>
 800321e:	07ea      	lsls	r2, r5, #31
 8003220:	d505      	bpl.n	800322e <_svfprintf_r+0x8fe>
 8003222:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003226:	2330      	movs	r3, #48	; 0x30
 8003228:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800322c:	e343      	b.n	80038b6 <_svfprintf_r+0xf86>
 800322e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003232:	e340      	b.n	80038b6 <_svfprintf_r+0xf86>
 8003234:	b10b      	cbz	r3, 800323a <_svfprintf_r+0x90a>
 8003236:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800323a:	9b02      	ldr	r3, [sp, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 82f7 	beq.w	8003830 <_svfprintf_r+0xf00>
 8003242:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003246:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800324a:	2600      	movs	r6, #0
 800324c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003250:	9704      	str	r7, [sp, #16]
 8003252:	e4e8      	b.n	8002c26 <_svfprintf_r+0x2f6>
 8003254:	4606      	mov	r6, r0
 8003256:	e53f      	b.n	8002cd8 <_svfprintf_r+0x3a8>
 8003258:	2310      	movs	r3, #16
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800325e:	3310      	adds	r3, #16
 8003260:	9321      	str	r3, [sp, #132]	; 0x84
 8003262:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003264:	3301      	adds	r3, #1
 8003266:	2b07      	cmp	r3, #7
 8003268:	9320      	str	r3, [sp, #128]	; 0x80
 800326a:	dc04      	bgt.n	8003276 <_svfprintf_r+0x946>
 800326c:	3408      	adds	r4, #8
 800326e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003270:	3b10      	subs	r3, #16
 8003272:	930c      	str	r3, [sp, #48]	; 0x30
 8003274:	e615      	b.n	8002ea2 <_svfprintf_r+0x572>
 8003276:	aa1f      	add	r2, sp, #124	; 0x7c
 8003278:	4651      	mov	r1, sl
 800327a:	4658      	mov	r0, fp
 800327c:	f001 fe96 	bl	8004fac <__ssprint_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	f040 82b6 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003286:	ac2c      	add	r4, sp, #176	; 0xb0
 8003288:	e7f1      	b.n	800326e <_svfprintf_r+0x93e>
 800328a:	aa1f      	add	r2, sp, #124	; 0x7c
 800328c:	4651      	mov	r1, sl
 800328e:	4658      	mov	r0, fp
 8003290:	f001 fe8c 	bl	8004fac <__ssprint_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	f040 82ac 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800329a:	ac2c      	add	r4, sp, #176	; 0xb0
 800329c:	e614      	b.n	8002ec8 <_svfprintf_r+0x598>
 800329e:	aa1f      	add	r2, sp, #124	; 0x7c
 80032a0:	4651      	mov	r1, sl
 80032a2:	4658      	mov	r0, fp
 80032a4:	f001 fe82 	bl	8004fac <__ssprint_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f040 82a2 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80032ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80032b0:	e61c      	b.n	8002eec <_svfprintf_r+0x5bc>
 80032b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80032b4:	4651      	mov	r1, sl
 80032b6:	4658      	mov	r0, fp
 80032b8:	f001 fe78 	bl	8004fac <__ssprint_r>
 80032bc:	2800      	cmp	r0, #0
 80032be:	f040 8298 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80032c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80032c4:	e622      	b.n	8002f0c <_svfprintf_r+0x5dc>
 80032c6:	2210      	movs	r2, #16
 80032c8:	6062      	str	r2, [r4, #4]
 80032ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032cc:	3210      	adds	r2, #16
 80032ce:	9221      	str	r2, [sp, #132]	; 0x84
 80032d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032d2:	3201      	adds	r2, #1
 80032d4:	2a07      	cmp	r2, #7
 80032d6:	9220      	str	r2, [sp, #128]	; 0x80
 80032d8:	dc02      	bgt.n	80032e0 <_svfprintf_r+0x9b0>
 80032da:	3408      	adds	r4, #8
 80032dc:	3b10      	subs	r3, #16
 80032de:	e61d      	b.n	8002f1c <_svfprintf_r+0x5ec>
 80032e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80032e2:	4651      	mov	r1, sl
 80032e4:	4658      	mov	r0, fp
 80032e6:	930c      	str	r3, [sp, #48]	; 0x30
 80032e8:	f001 fe60 	bl	8004fac <__ssprint_r>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f040 8280 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80032f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80032f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032f6:	e7f1      	b.n	80032dc <_svfprintf_r+0x9ac>
 80032f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80032fa:	4651      	mov	r1, sl
 80032fc:	4658      	mov	r0, fp
 80032fe:	f001 fe55 	bl	8004fac <__ssprint_r>
 8003302:	2800      	cmp	r0, #0
 8003304:	f040 8275 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003308:	ac2c      	add	r4, sp, #176	; 0xb0
 800330a:	e617      	b.n	8002f3c <_svfprintf_r+0x60c>
 800330c:	2310      	movs	r3, #16
 800330e:	6063      	str	r3, [r4, #4]
 8003310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003312:	3310      	adds	r3, #16
 8003314:	9321      	str	r3, [sp, #132]	; 0x84
 8003316:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003318:	3301      	adds	r3, #1
 800331a:	2b07      	cmp	r3, #7
 800331c:	9320      	str	r3, [sp, #128]	; 0x80
 800331e:	dc02      	bgt.n	8003326 <_svfprintf_r+0x9f6>
 8003320:	3408      	adds	r4, #8
 8003322:	3e10      	subs	r6, #16
 8003324:	e60e      	b.n	8002f44 <_svfprintf_r+0x614>
 8003326:	aa1f      	add	r2, sp, #124	; 0x7c
 8003328:	4651      	mov	r1, sl
 800332a:	4658      	mov	r0, fp
 800332c:	f001 fe3e 	bl	8004fac <__ssprint_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	f040 825e 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003336:	ac2c      	add	r4, sp, #176	; 0xb0
 8003338:	e7f3      	b.n	8003322 <_svfprintf_r+0x9f2>
 800333a:	aa1f      	add	r2, sp, #124	; 0x7c
 800333c:	4651      	mov	r1, sl
 800333e:	4658      	mov	r0, fp
 8003340:	f001 fe34 	bl	8004fac <__ssprint_r>
 8003344:	2800      	cmp	r0, #0
 8003346:	f040 8254 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800334a:	ac2c      	add	r4, sp, #176	; 0xb0
 800334c:	e60a      	b.n	8002f64 <_svfprintf_r+0x634>
 800334e:	9b02      	ldr	r3, [sp, #8]
 8003350:	2b65      	cmp	r3, #101	; 0x65
 8003352:	f340 81a9 	ble.w	80036a8 <_svfprintf_r+0xd78>
 8003356:	2200      	movs	r2, #0
 8003358:	2300      	movs	r3, #0
 800335a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800335e:	f7fd fbaf 	bl	8000ac0 <__aeabi_dcmpeq>
 8003362:	2800      	cmp	r0, #0
 8003364:	d062      	beq.n	800342c <_svfprintf_r+0xafc>
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <_svfprintf_r+0xaf4>)
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003370:	3301      	adds	r3, #1
 8003372:	9321      	str	r3, [sp, #132]	; 0x84
 8003374:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003376:	3301      	adds	r3, #1
 8003378:	2b07      	cmp	r3, #7
 800337a:	9320      	str	r3, [sp, #128]	; 0x80
 800337c:	dc25      	bgt.n	80033ca <_svfprintf_r+0xa9a>
 800337e:	3408      	adds	r4, #8
 8003380:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003382:	9a03      	ldr	r2, [sp, #12]
 8003384:	4293      	cmp	r3, r2
 8003386:	db02      	blt.n	800338e <_svfprintf_r+0xa5e>
 8003388:	07ee      	lsls	r6, r5, #31
 800338a:	f57f ae02 	bpl.w	8002f92 <_svfprintf_r+0x662>
 800338e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	9b08      	ldr	r3, [sp, #32]
 8003394:	6063      	str	r3, [r4, #4]
 8003396:	9a08      	ldr	r2, [sp, #32]
 8003398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800339a:	4413      	add	r3, r2
 800339c:	9321      	str	r3, [sp, #132]	; 0x84
 800339e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033a0:	3301      	adds	r3, #1
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	9320      	str	r3, [sp, #128]	; 0x80
 80033a6:	dc1a      	bgt.n	80033de <_svfprintf_r+0xaae>
 80033a8:	3408      	adds	r4, #8
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	1e5e      	subs	r6, r3, #1
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	f77f adef 	ble.w	8002f92 <_svfprintf_r+0x662>
 80033b4:	4f1c      	ldr	r7, [pc, #112]	; (8003428 <_svfprintf_r+0xaf8>)
 80033b6:	f04f 0810 	mov.w	r8, #16
 80033ba:	2e10      	cmp	r6, #16
 80033bc:	6027      	str	r7, [r4, #0]
 80033be:	dc18      	bgt.n	80033f2 <_svfprintf_r+0xac2>
 80033c0:	6066      	str	r6, [r4, #4]
 80033c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033c4:	441e      	add	r6, r3
 80033c6:	9621      	str	r6, [sp, #132]	; 0x84
 80033c8:	e5d4      	b.n	8002f74 <_svfprintf_r+0x644>
 80033ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80033cc:	4651      	mov	r1, sl
 80033ce:	4658      	mov	r0, fp
 80033d0:	f001 fdec 	bl	8004fac <__ssprint_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f040 820c 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80033da:	ac2c      	add	r4, sp, #176	; 0xb0
 80033dc:	e7d0      	b.n	8003380 <_svfprintf_r+0xa50>
 80033de:	aa1f      	add	r2, sp, #124	; 0x7c
 80033e0:	4651      	mov	r1, sl
 80033e2:	4658      	mov	r0, fp
 80033e4:	f001 fde2 	bl	8004fac <__ssprint_r>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	f040 8202 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80033ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80033f0:	e7db      	b.n	80033aa <_svfprintf_r+0xa7a>
 80033f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033f4:	f8c4 8004 	str.w	r8, [r4, #4]
 80033f8:	3310      	adds	r3, #16
 80033fa:	9321      	str	r3, [sp, #132]	; 0x84
 80033fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033fe:	3301      	adds	r3, #1
 8003400:	2b07      	cmp	r3, #7
 8003402:	9320      	str	r3, [sp, #128]	; 0x80
 8003404:	dc02      	bgt.n	800340c <_svfprintf_r+0xadc>
 8003406:	3408      	adds	r4, #8
 8003408:	3e10      	subs	r6, #16
 800340a:	e7d6      	b.n	80033ba <_svfprintf_r+0xa8a>
 800340c:	aa1f      	add	r2, sp, #124	; 0x7c
 800340e:	4651      	mov	r1, sl
 8003410:	4658      	mov	r0, fp
 8003412:	f001 fdcb 	bl	8004fac <__ssprint_r>
 8003416:	2800      	cmp	r0, #0
 8003418:	f040 81eb 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800341c:	ac2c      	add	r4, sp, #176	; 0xb0
 800341e:	e7f3      	b.n	8003408 <_svfprintf_r+0xad8>
 8003420:	080057c6 	.word	0x080057c6
 8003424:	080057d7 	.word	0x080057d7
 8003428:	080057e9 	.word	0x080057e9
 800342c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800342e:	2b00      	cmp	r3, #0
 8003430:	dc7a      	bgt.n	8003528 <_svfprintf_r+0xbf8>
 8003432:	4b9b      	ldr	r3, [pc, #620]	; (80036a0 <_svfprintf_r+0xd70>)
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	2301      	movs	r3, #1
 8003438:	6063      	str	r3, [r4, #4]
 800343a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800343c:	3301      	adds	r3, #1
 800343e:	9321      	str	r3, [sp, #132]	; 0x84
 8003440:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003442:	3301      	adds	r3, #1
 8003444:	2b07      	cmp	r3, #7
 8003446:	9320      	str	r3, [sp, #128]	; 0x80
 8003448:	dc44      	bgt.n	80034d4 <_svfprintf_r+0xba4>
 800344a:	3408      	adds	r4, #8
 800344c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800344e:	b923      	cbnz	r3, 800345a <_svfprintf_r+0xb2a>
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	b913      	cbnz	r3, 800345a <_svfprintf_r+0xb2a>
 8003454:	07e8      	lsls	r0, r5, #31
 8003456:	f57f ad9c 	bpl.w	8002f92 <_svfprintf_r+0x662>
 800345a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	9b08      	ldr	r3, [sp, #32]
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	9a08      	ldr	r2, [sp, #32]
 8003464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003466:	4413      	add	r3, r2
 8003468:	9321      	str	r3, [sp, #132]	; 0x84
 800346a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800346c:	3301      	adds	r3, #1
 800346e:	2b07      	cmp	r3, #7
 8003470:	9320      	str	r3, [sp, #128]	; 0x80
 8003472:	dc39      	bgt.n	80034e8 <_svfprintf_r+0xbb8>
 8003474:	f104 0308 	add.w	r3, r4, #8
 8003478:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800347a:	2e00      	cmp	r6, #0
 800347c:	da19      	bge.n	80034b2 <_svfprintf_r+0xb82>
 800347e:	4f89      	ldr	r7, [pc, #548]	; (80036a4 <_svfprintf_r+0xd74>)
 8003480:	4276      	negs	r6, r6
 8003482:	2410      	movs	r4, #16
 8003484:	2e10      	cmp	r6, #16
 8003486:	601f      	str	r7, [r3, #0]
 8003488:	dc38      	bgt.n	80034fc <_svfprintf_r+0xbcc>
 800348a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800348c:	605e      	str	r6, [r3, #4]
 800348e:	4416      	add	r6, r2
 8003490:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003492:	9621      	str	r6, [sp, #132]	; 0x84
 8003494:	3201      	adds	r2, #1
 8003496:	2a07      	cmp	r2, #7
 8003498:	f103 0308 	add.w	r3, r3, #8
 800349c:	9220      	str	r2, [sp, #128]	; 0x80
 800349e:	dd08      	ble.n	80034b2 <_svfprintf_r+0xb82>
 80034a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80034a2:	4651      	mov	r1, sl
 80034a4:	4658      	mov	r0, fp
 80034a6:	f001 fd81 	bl	8004fac <__ssprint_r>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	f040 81a1 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80034b0:	ab2c      	add	r3, sp, #176	; 0xb0
 80034b2:	9a03      	ldr	r2, [sp, #12]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	9903      	ldr	r1, [sp, #12]
 80034b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034ba:	f8c3 8000 	str.w	r8, [r3]
 80034be:	440a      	add	r2, r1
 80034c0:	9221      	str	r2, [sp, #132]	; 0x84
 80034c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80034c4:	3201      	adds	r2, #1
 80034c6:	2a07      	cmp	r2, #7
 80034c8:	9220      	str	r2, [sp, #128]	; 0x80
 80034ca:	f73f ad59 	bgt.w	8002f80 <_svfprintf_r+0x650>
 80034ce:	f103 0408 	add.w	r4, r3, #8
 80034d2:	e55e      	b.n	8002f92 <_svfprintf_r+0x662>
 80034d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80034d6:	4651      	mov	r1, sl
 80034d8:	4658      	mov	r0, fp
 80034da:	f001 fd67 	bl	8004fac <__ssprint_r>
 80034de:	2800      	cmp	r0, #0
 80034e0:	f040 8187 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80034e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80034e6:	e7b1      	b.n	800344c <_svfprintf_r+0xb1c>
 80034e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80034ea:	4651      	mov	r1, sl
 80034ec:	4658      	mov	r0, fp
 80034ee:	f001 fd5d 	bl	8004fac <__ssprint_r>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	f040 817d 	bne.w	80037f2 <_svfprintf_r+0xec2>
 80034f8:	ab2c      	add	r3, sp, #176	; 0xb0
 80034fa:	e7bd      	b.n	8003478 <_svfprintf_r+0xb48>
 80034fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034fe:	605c      	str	r4, [r3, #4]
 8003500:	3210      	adds	r2, #16
 8003502:	9221      	str	r2, [sp, #132]	; 0x84
 8003504:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003506:	3201      	adds	r2, #1
 8003508:	2a07      	cmp	r2, #7
 800350a:	9220      	str	r2, [sp, #128]	; 0x80
 800350c:	dc02      	bgt.n	8003514 <_svfprintf_r+0xbe4>
 800350e:	3308      	adds	r3, #8
 8003510:	3e10      	subs	r6, #16
 8003512:	e7b7      	b.n	8003484 <_svfprintf_r+0xb54>
 8003514:	aa1f      	add	r2, sp, #124	; 0x7c
 8003516:	4651      	mov	r1, sl
 8003518:	4658      	mov	r0, fp
 800351a:	f001 fd47 	bl	8004fac <__ssprint_r>
 800351e:	2800      	cmp	r0, #0
 8003520:	f040 8167 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003524:	ab2c      	add	r3, sp, #176	; 0xb0
 8003526:	e7f3      	b.n	8003510 <_svfprintf_r+0xbe0>
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	42bb      	cmp	r3, r7
 800352c:	bfa8      	it	ge
 800352e:	463b      	movge	r3, r7
 8003530:	2b00      	cmp	r3, #0
 8003532:	461e      	mov	r6, r3
 8003534:	dd0b      	ble.n	800354e <_svfprintf_r+0xc1e>
 8003536:	6063      	str	r3, [r4, #4]
 8003538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800353a:	f8c4 8000 	str.w	r8, [r4]
 800353e:	4433      	add	r3, r6
 8003540:	9321      	str	r3, [sp, #132]	; 0x84
 8003542:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003544:	3301      	adds	r3, #1
 8003546:	2b07      	cmp	r3, #7
 8003548:	9320      	str	r3, [sp, #128]	; 0x80
 800354a:	dc5f      	bgt.n	800360c <_svfprintf_r+0xcdc>
 800354c:	3408      	adds	r4, #8
 800354e:	2e00      	cmp	r6, #0
 8003550:	bfac      	ite	ge
 8003552:	1bbe      	subge	r6, r7, r6
 8003554:	463e      	movlt	r6, r7
 8003556:	2e00      	cmp	r6, #0
 8003558:	dd0f      	ble.n	800357a <_svfprintf_r+0xc4a>
 800355a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80036a4 <_svfprintf_r+0xd74>
 800355e:	f8c4 9000 	str.w	r9, [r4]
 8003562:	2e10      	cmp	r6, #16
 8003564:	dc5c      	bgt.n	8003620 <_svfprintf_r+0xcf0>
 8003566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003568:	6066      	str	r6, [r4, #4]
 800356a:	441e      	add	r6, r3
 800356c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800356e:	9621      	str	r6, [sp, #132]	; 0x84
 8003570:	3301      	adds	r3, #1
 8003572:	2b07      	cmp	r3, #7
 8003574:	9320      	str	r3, [sp, #128]	; 0x80
 8003576:	dc6a      	bgt.n	800364e <_svfprintf_r+0xd1e>
 8003578:	3408      	adds	r4, #8
 800357a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800357c:	9a03      	ldr	r2, [sp, #12]
 800357e:	4293      	cmp	r3, r2
 8003580:	db01      	blt.n	8003586 <_svfprintf_r+0xc56>
 8003582:	07e9      	lsls	r1, r5, #31
 8003584:	d50d      	bpl.n	80035a2 <_svfprintf_r+0xc72>
 8003586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	9b08      	ldr	r3, [sp, #32]
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	9a08      	ldr	r2, [sp, #32]
 8003590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003592:	4413      	add	r3, r2
 8003594:	9321      	str	r3, [sp, #132]	; 0x84
 8003596:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003598:	3301      	adds	r3, #1
 800359a:	2b07      	cmp	r3, #7
 800359c:	9320      	str	r3, [sp, #128]	; 0x80
 800359e:	dc60      	bgt.n	8003662 <_svfprintf_r+0xd32>
 80035a0:	3408      	adds	r4, #8
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	9a03      	ldr	r2, [sp, #12]
 80035a6:	1bde      	subs	r6, r3, r7
 80035a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	429e      	cmp	r6, r3
 80035ae:	bfa8      	it	ge
 80035b0:	461e      	movge	r6, r3
 80035b2:	2e00      	cmp	r6, #0
 80035b4:	dd0b      	ble.n	80035ce <_svfprintf_r+0xc9e>
 80035b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035b8:	6066      	str	r6, [r4, #4]
 80035ba:	4433      	add	r3, r6
 80035bc:	9321      	str	r3, [sp, #132]	; 0x84
 80035be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035c0:	3301      	adds	r3, #1
 80035c2:	4447      	add	r7, r8
 80035c4:	2b07      	cmp	r3, #7
 80035c6:	6027      	str	r7, [r4, #0]
 80035c8:	9320      	str	r3, [sp, #128]	; 0x80
 80035ca:	dc54      	bgt.n	8003676 <_svfprintf_r+0xd46>
 80035cc:	3408      	adds	r4, #8
 80035ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035d0:	9a03      	ldr	r2, [sp, #12]
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	eba2 0303 	sub.w	r3, r2, r3
 80035d8:	bfac      	ite	ge
 80035da:	1b9e      	subge	r6, r3, r6
 80035dc:	461e      	movlt	r6, r3
 80035de:	2e00      	cmp	r6, #0
 80035e0:	f77f acd7 	ble.w	8002f92 <_svfprintf_r+0x662>
 80035e4:	4f2f      	ldr	r7, [pc, #188]	; (80036a4 <_svfprintf_r+0xd74>)
 80035e6:	f04f 0810 	mov.w	r8, #16
 80035ea:	2e10      	cmp	r6, #16
 80035ec:	6027      	str	r7, [r4, #0]
 80035ee:	f77f aee7 	ble.w	80033c0 <_svfprintf_r+0xa90>
 80035f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035f4:	f8c4 8004 	str.w	r8, [r4, #4]
 80035f8:	3310      	adds	r3, #16
 80035fa:	9321      	str	r3, [sp, #132]	; 0x84
 80035fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035fe:	3301      	adds	r3, #1
 8003600:	2b07      	cmp	r3, #7
 8003602:	9320      	str	r3, [sp, #128]	; 0x80
 8003604:	dc41      	bgt.n	800368a <_svfprintf_r+0xd5a>
 8003606:	3408      	adds	r4, #8
 8003608:	3e10      	subs	r6, #16
 800360a:	e7ee      	b.n	80035ea <_svfprintf_r+0xcba>
 800360c:	aa1f      	add	r2, sp, #124	; 0x7c
 800360e:	4651      	mov	r1, sl
 8003610:	4658      	mov	r0, fp
 8003612:	f001 fccb 	bl	8004fac <__ssprint_r>
 8003616:	2800      	cmp	r0, #0
 8003618:	f040 80eb 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800361c:	ac2c      	add	r4, sp, #176	; 0xb0
 800361e:	e796      	b.n	800354e <_svfprintf_r+0xc1e>
 8003620:	2310      	movs	r3, #16
 8003622:	6063      	str	r3, [r4, #4]
 8003624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003626:	3310      	adds	r3, #16
 8003628:	9321      	str	r3, [sp, #132]	; 0x84
 800362a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800362c:	3301      	adds	r3, #1
 800362e:	2b07      	cmp	r3, #7
 8003630:	9320      	str	r3, [sp, #128]	; 0x80
 8003632:	dc02      	bgt.n	800363a <_svfprintf_r+0xd0a>
 8003634:	3408      	adds	r4, #8
 8003636:	3e10      	subs	r6, #16
 8003638:	e791      	b.n	800355e <_svfprintf_r+0xc2e>
 800363a:	aa1f      	add	r2, sp, #124	; 0x7c
 800363c:	4651      	mov	r1, sl
 800363e:	4658      	mov	r0, fp
 8003640:	f001 fcb4 	bl	8004fac <__ssprint_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	f040 80d4 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800364a:	ac2c      	add	r4, sp, #176	; 0xb0
 800364c:	e7f3      	b.n	8003636 <_svfprintf_r+0xd06>
 800364e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003650:	4651      	mov	r1, sl
 8003652:	4658      	mov	r0, fp
 8003654:	f001 fcaa 	bl	8004fac <__ssprint_r>
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 80ca 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800365e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003660:	e78b      	b.n	800357a <_svfprintf_r+0xc4a>
 8003662:	aa1f      	add	r2, sp, #124	; 0x7c
 8003664:	4651      	mov	r1, sl
 8003666:	4658      	mov	r0, fp
 8003668:	f001 fca0 	bl	8004fac <__ssprint_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	f040 80c0 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003672:	ac2c      	add	r4, sp, #176	; 0xb0
 8003674:	e795      	b.n	80035a2 <_svfprintf_r+0xc72>
 8003676:	aa1f      	add	r2, sp, #124	; 0x7c
 8003678:	4651      	mov	r1, sl
 800367a:	4658      	mov	r0, fp
 800367c:	f001 fc96 	bl	8004fac <__ssprint_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	f040 80b6 	bne.w	80037f2 <_svfprintf_r+0xec2>
 8003686:	ac2c      	add	r4, sp, #176	; 0xb0
 8003688:	e7a1      	b.n	80035ce <_svfprintf_r+0xc9e>
 800368a:	aa1f      	add	r2, sp, #124	; 0x7c
 800368c:	4651      	mov	r1, sl
 800368e:	4658      	mov	r0, fp
 8003690:	f001 fc8c 	bl	8004fac <__ssprint_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	f040 80ac 	bne.w	80037f2 <_svfprintf_r+0xec2>
 800369a:	ac2c      	add	r4, sp, #176	; 0xb0
 800369c:	e7b4      	b.n	8003608 <_svfprintf_r+0xcd8>
 800369e:	bf00      	nop
 80036a0:	080057d7 	.word	0x080057d7
 80036a4:	080057e9 	.word	0x080057e9
 80036a8:	9b03      	ldr	r3, [sp, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	dc01      	bgt.n	80036b2 <_svfprintf_r+0xd82>
 80036ae:	07ea      	lsls	r2, r5, #31
 80036b0:	d576      	bpl.n	80037a0 <_svfprintf_r+0xe70>
 80036b2:	2301      	movs	r3, #1
 80036b4:	6063      	str	r3, [r4, #4]
 80036b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036b8:	f8c4 8000 	str.w	r8, [r4]
 80036bc:	3301      	adds	r3, #1
 80036be:	9321      	str	r3, [sp, #132]	; 0x84
 80036c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036c2:	3301      	adds	r3, #1
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	9320      	str	r3, [sp, #128]	; 0x80
 80036c8:	dc36      	bgt.n	8003738 <_svfprintf_r+0xe08>
 80036ca:	3408      	adds	r4, #8
 80036cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	9b08      	ldr	r3, [sp, #32]
 80036d2:	6063      	str	r3, [r4, #4]
 80036d4:	9a08      	ldr	r2, [sp, #32]
 80036d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036d8:	4413      	add	r3, r2
 80036da:	9321      	str	r3, [sp, #132]	; 0x84
 80036dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036de:	3301      	adds	r3, #1
 80036e0:	2b07      	cmp	r3, #7
 80036e2:	9320      	str	r3, [sp, #128]	; 0x80
 80036e4:	dc31      	bgt.n	800374a <_svfprintf_r+0xe1a>
 80036e6:	3408      	adds	r4, #8
 80036e8:	2300      	movs	r3, #0
 80036ea:	2200      	movs	r2, #0
 80036ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036f0:	f7fd f9e6 	bl	8000ac0 <__aeabi_dcmpeq>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	1e5e      	subs	r6, r3, #1
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d12f      	bne.n	800375c <_svfprintf_r+0xe2c>
 80036fc:	f108 0301 	add.w	r3, r8, #1
 8003700:	e884 0048 	stmia.w	r4, {r3, r6}
 8003704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003706:	9a03      	ldr	r2, [sp, #12]
 8003708:	3b01      	subs	r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	9321      	str	r3, [sp, #132]	; 0x84
 800370e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003710:	3301      	adds	r3, #1
 8003712:	2b07      	cmp	r3, #7
 8003714:	9320      	str	r3, [sp, #128]	; 0x80
 8003716:	dd4a      	ble.n	80037ae <_svfprintf_r+0xe7e>
 8003718:	aa1f      	add	r2, sp, #124	; 0x7c
 800371a:	4651      	mov	r1, sl
 800371c:	4658      	mov	r0, fp
 800371e:	f001 fc45 	bl	8004fac <__ssprint_r>
 8003722:	2800      	cmp	r0, #0
 8003724:	d165      	bne.n	80037f2 <_svfprintf_r+0xec2>
 8003726:	ac2c      	add	r4, sp, #176	; 0xb0
 8003728:	ab1b      	add	r3, sp, #108	; 0x6c
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003734:	4413      	add	r3, r2
 8003736:	e41c      	b.n	8002f72 <_svfprintf_r+0x642>
 8003738:	aa1f      	add	r2, sp, #124	; 0x7c
 800373a:	4651      	mov	r1, sl
 800373c:	4658      	mov	r0, fp
 800373e:	f001 fc35 	bl	8004fac <__ssprint_r>
 8003742:	2800      	cmp	r0, #0
 8003744:	d155      	bne.n	80037f2 <_svfprintf_r+0xec2>
 8003746:	ac2c      	add	r4, sp, #176	; 0xb0
 8003748:	e7c0      	b.n	80036cc <_svfprintf_r+0xd9c>
 800374a:	aa1f      	add	r2, sp, #124	; 0x7c
 800374c:	4651      	mov	r1, sl
 800374e:	4658      	mov	r0, fp
 8003750:	f001 fc2c 	bl	8004fac <__ssprint_r>
 8003754:	2800      	cmp	r0, #0
 8003756:	d14c      	bne.n	80037f2 <_svfprintf_r+0xec2>
 8003758:	ac2c      	add	r4, sp, #176	; 0xb0
 800375a:	e7c5      	b.n	80036e8 <_svfprintf_r+0xdb8>
 800375c:	2e00      	cmp	r6, #0
 800375e:	dde3      	ble.n	8003728 <_svfprintf_r+0xdf8>
 8003760:	4f59      	ldr	r7, [pc, #356]	; (80038c8 <_svfprintf_r+0xf98>)
 8003762:	f04f 0810 	mov.w	r8, #16
 8003766:	2e10      	cmp	r6, #16
 8003768:	6027      	str	r7, [r4, #0]
 800376a:	dc04      	bgt.n	8003776 <_svfprintf_r+0xe46>
 800376c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800376e:	6066      	str	r6, [r4, #4]
 8003770:	441e      	add	r6, r3
 8003772:	9621      	str	r6, [sp, #132]	; 0x84
 8003774:	e7cb      	b.n	800370e <_svfprintf_r+0xdde>
 8003776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003778:	f8c4 8004 	str.w	r8, [r4, #4]
 800377c:	3310      	adds	r3, #16
 800377e:	9321      	str	r3, [sp, #132]	; 0x84
 8003780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003782:	3301      	adds	r3, #1
 8003784:	2b07      	cmp	r3, #7
 8003786:	9320      	str	r3, [sp, #128]	; 0x80
 8003788:	dc02      	bgt.n	8003790 <_svfprintf_r+0xe60>
 800378a:	3408      	adds	r4, #8
 800378c:	3e10      	subs	r6, #16
 800378e:	e7ea      	b.n	8003766 <_svfprintf_r+0xe36>
 8003790:	aa1f      	add	r2, sp, #124	; 0x7c
 8003792:	4651      	mov	r1, sl
 8003794:	4658      	mov	r0, fp
 8003796:	f001 fc09 	bl	8004fac <__ssprint_r>
 800379a:	bb50      	cbnz	r0, 80037f2 <_svfprintf_r+0xec2>
 800379c:	ac2c      	add	r4, sp, #176	; 0xb0
 800379e:	e7f5      	b.n	800378c <_svfprintf_r+0xe5c>
 80037a0:	2301      	movs	r3, #1
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037a6:	f8c4 8000 	str.w	r8, [r4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	e7ae      	b.n	800370c <_svfprintf_r+0xddc>
 80037ae:	3408      	adds	r4, #8
 80037b0:	e7ba      	b.n	8003728 <_svfprintf_r+0xdf8>
 80037b2:	3408      	adds	r4, #8
 80037b4:	f7ff bbed 	b.w	8002f92 <_svfprintf_r+0x662>
 80037b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037bc:	1a9d      	subs	r5, r3, r2
 80037be:	2d00      	cmp	r5, #0
 80037c0:	f77f abea 	ble.w	8002f98 <_svfprintf_r+0x668>
 80037c4:	2610      	movs	r6, #16
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <_svfprintf_r+0xf9c>)
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	2d10      	cmp	r5, #16
 80037cc:	dc1b      	bgt.n	8003806 <_svfprintf_r+0xed6>
 80037ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037d0:	6065      	str	r5, [r4, #4]
 80037d2:	441d      	add	r5, r3
 80037d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037d6:	9521      	str	r5, [sp, #132]	; 0x84
 80037d8:	3301      	adds	r3, #1
 80037da:	2b07      	cmp	r3, #7
 80037dc:	9320      	str	r3, [sp, #128]	; 0x80
 80037de:	f77f abdb 	ble.w	8002f98 <_svfprintf_r+0x668>
 80037e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80037e4:	4651      	mov	r1, sl
 80037e6:	4658      	mov	r0, fp
 80037e8:	f001 fbe0 	bl	8004fac <__ssprint_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f43f abd3 	beq.w	8002f98 <_svfprintf_r+0x668>
 80037f2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80037f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fc:	bf18      	it	ne
 80037fe:	f04f 33ff 	movne.w	r3, #4294967295
 8003802:	f7ff b8b9 	b.w	8002978 <_svfprintf_r+0x48>
 8003806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003808:	6066      	str	r6, [r4, #4]
 800380a:	3310      	adds	r3, #16
 800380c:	9321      	str	r3, [sp, #132]	; 0x84
 800380e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003810:	3301      	adds	r3, #1
 8003812:	2b07      	cmp	r3, #7
 8003814:	9320      	str	r3, [sp, #128]	; 0x80
 8003816:	dc02      	bgt.n	800381e <_svfprintf_r+0xeee>
 8003818:	3408      	adds	r4, #8
 800381a:	3d10      	subs	r5, #16
 800381c:	e7d3      	b.n	80037c6 <_svfprintf_r+0xe96>
 800381e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003820:	4651      	mov	r1, sl
 8003822:	4658      	mov	r0, fp
 8003824:	f001 fbc2 	bl	8004fac <__ssprint_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	d1e2      	bne.n	80037f2 <_svfprintf_r+0xec2>
 800382c:	ac2c      	add	r4, sp, #176	; 0xb0
 800382e:	e7f4      	b.n	800381a <_svfprintf_r+0xeea>
 8003830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0dd      	beq.n	80037f2 <_svfprintf_r+0xec2>
 8003836:	aa1f      	add	r2, sp, #124	; 0x7c
 8003838:	4651      	mov	r1, sl
 800383a:	4658      	mov	r0, fp
 800383c:	f001 fbb6 	bl	8004fac <__ssprint_r>
 8003840:	e7d7      	b.n	80037f2 <_svfprintf_r+0xec2>
 8003842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	f7fd f96b 	bl	8000b24 <__aeabi_dcmpun>
 800384e:	2800      	cmp	r0, #0
 8003850:	f43f aa44 	beq.w	8002cdc <_svfprintf_r+0x3ac>
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <_svfprintf_r+0xfa0>)
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <_svfprintf_r+0xfa4>)
 8003858:	f7ff ba34 	b.w	8002cc4 <_svfprintf_r+0x394>
 800385c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800385e:	eba3 0308 	sub.w	r3, r3, r8
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	f7ff bab5 	b.w	8002dd2 <_svfprintf_r+0x4a2>
 8003868:	ea56 0207 	orrs.w	r2, r6, r7
 800386c:	950b      	str	r5, [sp, #44]	; 0x2c
 800386e:	f43f ac2b 	beq.w	80030c8 <_svfprintf_r+0x798>
 8003872:	2b01      	cmp	r3, #1
 8003874:	f43f ac9d 	beq.w	80031b2 <_svfprintf_r+0x882>
 8003878:	2b02      	cmp	r3, #2
 800387a:	f43f acbd 	beq.w	80031f8 <_svfprintf_r+0x8c8>
 800387e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003880:	08f1      	lsrs	r1, r6, #3
 8003882:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003886:	08f8      	lsrs	r0, r7, #3
 8003888:	f006 0207 	and.w	r2, r6, #7
 800388c:	4607      	mov	r7, r0
 800388e:	460e      	mov	r6, r1
 8003890:	3230      	adds	r2, #48	; 0x30
 8003892:	ea56 0107 	orrs.w	r1, r6, r7
 8003896:	f103 38ff 	add.w	r8, r3, #4294967295
 800389a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800389e:	f47f ac86 	bne.w	80031ae <_svfprintf_r+0x87e>
 80038a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038a4:	07c9      	lsls	r1, r1, #31
 80038a6:	d506      	bpl.n	80038b6 <_svfprintf_r+0xf86>
 80038a8:	2a30      	cmp	r2, #48	; 0x30
 80038aa:	d004      	beq.n	80038b6 <_svfprintf_r+0xf86>
 80038ac:	2230      	movs	r2, #48	; 0x30
 80038ae:	f808 2c01 	strb.w	r2, [r8, #-1]
 80038b2:	f1a3 0802 	sub.w	r8, r3, #2
 80038b6:	464e      	mov	r6, r9
 80038b8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80038bc:	eba9 0908 	sub.w	r9, r9, r8
 80038c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80038c2:	2700      	movs	r7, #0
 80038c4:	f7ff bad1 	b.w	8002e6a <_svfprintf_r+0x53a>
 80038c8:	080057e9 	.word	0x080057e9
 80038cc:	080057d9 	.word	0x080057d9
 80038d0:	080057ad 	.word	0x080057ad
 80038d4:	080057b1 	.word	0x080057b1

080038d8 <quorem>:
 80038d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	6903      	ldr	r3, [r0, #16]
 80038de:	690c      	ldr	r4, [r1, #16]
 80038e0:	429c      	cmp	r4, r3
 80038e2:	4680      	mov	r8, r0
 80038e4:	f300 8082 	bgt.w	80039ec <quorem+0x114>
 80038e8:	3c01      	subs	r4, #1
 80038ea:	f101 0714 	add.w	r7, r1, #20
 80038ee:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80038f2:	f100 0614 	add.w	r6, r0, #20
 80038f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80038fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80038fe:	eb06 030e 	add.w	r3, r6, lr
 8003902:	3501      	adds	r5, #1
 8003904:	eb07 090e 	add.w	r9, r7, lr
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	fbb0 f5f5 	udiv	r5, r0, r5
 800390e:	b395      	cbz	r5, 8003976 <quorem+0x9e>
 8003910:	f04f 0a00 	mov.w	sl, #0
 8003914:	4638      	mov	r0, r7
 8003916:	46b4      	mov	ip, r6
 8003918:	46d3      	mov	fp, sl
 800391a:	f850 2b04 	ldr.w	r2, [r0], #4
 800391e:	b293      	uxth	r3, r2
 8003920:	fb05 a303 	mla	r3, r5, r3, sl
 8003924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003928:	b29b      	uxth	r3, r3
 800392a:	ebab 0303 	sub.w	r3, fp, r3
 800392e:	0c12      	lsrs	r2, r2, #16
 8003930:	f8bc b000 	ldrh.w	fp, [ip]
 8003934:	fb05 a202 	mla	r2, r5, r2, sl
 8003938:	fa13 f38b 	uxtah	r3, r3, fp
 800393c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003940:	fa1f fb82 	uxth.w	fp, r2
 8003944:	f8dc 2000 	ldr.w	r2, [ip]
 8003948:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800394c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003956:	4581      	cmp	r9, r0
 8003958:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800395c:	f84c 3b04 	str.w	r3, [ip], #4
 8003960:	d2db      	bcs.n	800391a <quorem+0x42>
 8003962:	f856 300e 	ldr.w	r3, [r6, lr]
 8003966:	b933      	cbnz	r3, 8003976 <quorem+0x9e>
 8003968:	9b01      	ldr	r3, [sp, #4]
 800396a:	3b04      	subs	r3, #4
 800396c:	429e      	cmp	r6, r3
 800396e:	461a      	mov	r2, r3
 8003970:	d330      	bcc.n	80039d4 <quorem+0xfc>
 8003972:	f8c8 4010 	str.w	r4, [r8, #16]
 8003976:	4640      	mov	r0, r8
 8003978:	f001 fa41 	bl	8004dfe <__mcmp>
 800397c:	2800      	cmp	r0, #0
 800397e:	db25      	blt.n	80039cc <quorem+0xf4>
 8003980:	3501      	adds	r5, #1
 8003982:	4630      	mov	r0, r6
 8003984:	f04f 0e00 	mov.w	lr, #0
 8003988:	f857 2b04 	ldr.w	r2, [r7], #4
 800398c:	f8d0 c000 	ldr.w	ip, [r0]
 8003990:	b293      	uxth	r3, r2
 8003992:	ebae 0303 	sub.w	r3, lr, r3
 8003996:	0c12      	lsrs	r2, r2, #16
 8003998:	fa13 f38c 	uxtah	r3, r3, ip
 800399c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80039a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039aa:	45b9      	cmp	r9, r7
 80039ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80039b0:	f840 3b04 	str.w	r3, [r0], #4
 80039b4:	d2e8      	bcs.n	8003988 <quorem+0xb0>
 80039b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80039ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80039be:	b92a      	cbnz	r2, 80039cc <quorem+0xf4>
 80039c0:	3b04      	subs	r3, #4
 80039c2:	429e      	cmp	r6, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	d30b      	bcc.n	80039e0 <quorem+0x108>
 80039c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80039cc:	4628      	mov	r0, r5
 80039ce:	b003      	add	sp, #12
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	3b04      	subs	r3, #4
 80039d8:	2a00      	cmp	r2, #0
 80039da:	d1ca      	bne.n	8003972 <quorem+0x9a>
 80039dc:	3c01      	subs	r4, #1
 80039de:	e7c5      	b.n	800396c <quorem+0x94>
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	3b04      	subs	r3, #4
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d1ef      	bne.n	80039c8 <quorem+0xf0>
 80039e8:	3c01      	subs	r4, #1
 80039ea:	e7ea      	b.n	80039c2 <quorem+0xea>
 80039ec:	2000      	movs	r0, #0
 80039ee:	e7ee      	b.n	80039ce <quorem+0xf6>

080039f0 <_dtoa_r>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	ec57 6b10 	vmov	r6, r7, d0
 80039f8:	b097      	sub	sp, #92	; 0x5c
 80039fa:	e9cd 6700 	strd	r6, r7, [sp]
 80039fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a00:	9107      	str	r1, [sp, #28]
 8003a02:	4604      	mov	r4, r0
 8003a04:	920a      	str	r2, [sp, #40]	; 0x28
 8003a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003a0a:	b93e      	cbnz	r6, 8003a1c <_dtoa_r+0x2c>
 8003a0c:	2010      	movs	r0, #16
 8003a0e:	f000 fdcb 	bl	80045a8 <malloc>
 8003a12:	6260      	str	r0, [r4, #36]	; 0x24
 8003a14:	6046      	str	r6, [r0, #4]
 8003a16:	6086      	str	r6, [r0, #8]
 8003a18:	6006      	str	r6, [r0, #0]
 8003a1a:	60c6      	str	r6, [r0, #12]
 8003a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	b151      	cbz	r1, 8003a38 <_dtoa_r+0x48>
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	604a      	str	r2, [r1, #4]
 8003a26:	2301      	movs	r3, #1
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f001 f811 	bl	8004a54 <_Bfree>
 8003a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfbf      	itttt	lt
 8003a3e:	2301      	movlt	r3, #1
 8003a40:	602b      	strlt	r3, [r5, #0]
 8003a42:	9b01      	ldrlt	r3, [sp, #4]
 8003a44:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	bfb2      	itee	lt
 8003a4a:	9301      	strlt	r3, [sp, #4]
 8003a4c:	2300      	movge	r3, #0
 8003a4e:	602b      	strge	r3, [r5, #0]
 8003a50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003a54:	4ba8      	ldr	r3, [pc, #672]	; (8003cf8 <_dtoa_r+0x308>)
 8003a56:	ea33 0308 	bics.w	r3, r3, r8
 8003a5a:	d11b      	bne.n	8003a94 <_dtoa_r+0xa4>
 8003a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	9b00      	ldr	r3, [sp, #0]
 8003a66:	b923      	cbnz	r3, 8003a72 <_dtoa_r+0x82>
 8003a68:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f000 8578 	beq.w	8004562 <_dtoa_r+0xb72>
 8003a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a74:	b953      	cbnz	r3, 8003a8c <_dtoa_r+0x9c>
 8003a76:	4ba1      	ldr	r3, [pc, #644]	; (8003cfc <_dtoa_r+0x30c>)
 8003a78:	e021      	b.n	8003abe <_dtoa_r+0xce>
 8003a7a:	4ba1      	ldr	r3, [pc, #644]	; (8003d00 <_dtoa_r+0x310>)
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	9802      	ldr	r0, [sp, #8]
 8003a86:	b017      	add	sp, #92	; 0x5c
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	4b9b      	ldr	r3, [pc, #620]	; (8003cfc <_dtoa_r+0x30c>)
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	3303      	adds	r3, #3
 8003a92:	e7f5      	b.n	8003a80 <_dtoa_r+0x90>
 8003a94:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	4639      	mov	r1, r7
 8003aa0:	f7fd f80e 	bl	8000ac0 <__aeabi_dcmpeq>
 8003aa4:	4681      	mov	r9, r0
 8003aa6:	b160      	cbz	r0, 8003ac2 <_dtoa_r+0xd2>
 8003aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003aaa:	2301      	movs	r3, #1
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8553 	beq.w	800455c <_dtoa_r+0xb6c>
 8003ab6:	4b93      	ldr	r3, [pc, #588]	; (8003d04 <_dtoa_r+0x314>)
 8003ab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	e7e0      	b.n	8003a84 <_dtoa_r+0x94>
 8003ac2:	aa14      	add	r2, sp, #80	; 0x50
 8003ac4:	a915      	add	r1, sp, #84	; 0x54
 8003ac6:	ec47 6b10 	vmov	d0, r6, r7
 8003aca:	4620      	mov	r0, r4
 8003acc:	f001 fa0f 	bl	8004eee <__d2b>
 8003ad0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003ad4:	4682      	mov	sl, r0
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	d07e      	beq.n	8003bd8 <_dtoa_r+0x1e8>
 8003ada:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ade:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ae8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003aec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003af0:	2200      	movs	r2, #0
 8003af2:	4b85      	ldr	r3, [pc, #532]	; (8003d08 <_dtoa_r+0x318>)
 8003af4:	f7fc fbc8 	bl	8000288 <__aeabi_dsub>
 8003af8:	a379      	add	r3, pc, #484	; (adr r3, 8003ce0 <_dtoa_r+0x2f0>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fd77 	bl	80005f0 <__aeabi_dmul>
 8003b02:	a379      	add	r3, pc, #484	; (adr r3, 8003ce8 <_dtoa_r+0x2f8>)
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f7fc fbc0 	bl	800028c <__adddf3>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	4628      	mov	r0, r5
 8003b10:	460f      	mov	r7, r1
 8003b12:	f7fc fd07 	bl	8000524 <__aeabi_i2d>
 8003b16:	a376      	add	r3, pc, #472	; (adr r3, 8003cf0 <_dtoa_r+0x300>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fd68 	bl	80005f0 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4630      	mov	r0, r6
 8003b26:	4639      	mov	r1, r7
 8003b28:	f7fc fbb0 	bl	800028c <__adddf3>
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	f7fd f80e 	bl	8000b50 <__aeabi_d2iz>
 8003b34:	2200      	movs	r2, #0
 8003b36:	4683      	mov	fp, r0
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	f7fc ffc9 	bl	8000ad4 <__aeabi_dcmplt>
 8003b42:	b158      	cbz	r0, 8003b5c <_dtoa_r+0x16c>
 8003b44:	4658      	mov	r0, fp
 8003b46:	f7fc fced 	bl	8000524 <__aeabi_i2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4630      	mov	r0, r6
 8003b50:	4639      	mov	r1, r7
 8003b52:	f7fc ffb5 	bl	8000ac0 <__aeabi_dcmpeq>
 8003b56:	b908      	cbnz	r0, 8003b5c <_dtoa_r+0x16c>
 8003b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b5c:	f1bb 0f16 	cmp.w	fp, #22
 8003b60:	d859      	bhi.n	8003c16 <_dtoa_r+0x226>
 8003b62:	496a      	ldr	r1, [pc, #424]	; (8003d0c <_dtoa_r+0x31c>)
 8003b64:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b70:	f7fc ffce 	bl	8000b10 <__aeabi_dcmpgt>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d050      	beq.n	8003c1a <_dtoa_r+0x22a>
 8003b78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b82:	1b5d      	subs	r5, r3, r5
 8003b84:	1e6b      	subs	r3, r5, #1
 8003b86:	9306      	str	r3, [sp, #24]
 8003b88:	bf45      	ittet	mi
 8003b8a:	f1c5 0301 	rsbmi	r3, r5, #1
 8003b8e:	9305      	strmi	r3, [sp, #20]
 8003b90:	2300      	movpl	r3, #0
 8003b92:	2300      	movmi	r3, #0
 8003b94:	bf4c      	ite	mi
 8003b96:	9306      	strmi	r3, [sp, #24]
 8003b98:	9305      	strpl	r3, [sp, #20]
 8003b9a:	f1bb 0f00 	cmp.w	fp, #0
 8003b9e:	db3e      	blt.n	8003c1e <_dtoa_r+0x22e>
 8003ba0:	9b06      	ldr	r3, [sp, #24]
 8003ba2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003ba6:	445b      	add	r3, fp
 8003ba8:	9306      	str	r3, [sp, #24]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9308      	str	r3, [sp, #32]
 8003bae:	9b07      	ldr	r3, [sp, #28]
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	f200 80af 	bhi.w	8003d14 <_dtoa_r+0x324>
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	bfc4      	itt	gt
 8003bba:	3b04      	subgt	r3, #4
 8003bbc:	9307      	strgt	r3, [sp, #28]
 8003bbe:	9b07      	ldr	r3, [sp, #28]
 8003bc0:	f1a3 0302 	sub.w	r3, r3, #2
 8003bc4:	bfcc      	ite	gt
 8003bc6:	2600      	movgt	r6, #0
 8003bc8:	2601      	movle	r6, #1
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	f200 80ae 	bhi.w	8003d2c <_dtoa_r+0x33c>
 8003bd0:	e8df f003 	tbb	[pc, r3]
 8003bd4:	772f8482 	.word	0x772f8482
 8003bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003bda:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003bdc:	441d      	add	r5, r3
 8003bde:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	dd11      	ble.n	8003c0a <_dtoa_r+0x21a>
 8003be6:	9a00      	ldr	r2, [sp, #0]
 8003be8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003bec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003bf0:	fa22 f000 	lsr.w	r0, r2, r0
 8003bf4:	fa08 f303 	lsl.w	r3, r8, r3
 8003bf8:	4318      	orrs	r0, r3
 8003bfa:	f7fc fc83 	bl	8000504 <__aeabi_ui2d>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003c04:	3d01      	subs	r5, #1
 8003c06:	9312      	str	r3, [sp, #72]	; 0x48
 8003c08:	e772      	b.n	8003af0 <_dtoa_r+0x100>
 8003c0a:	f1c3 0020 	rsb	r0, r3, #32
 8003c0e:	9b00      	ldr	r3, [sp, #0]
 8003c10:	fa03 f000 	lsl.w	r0, r3, r0
 8003c14:	e7f1      	b.n	8003bfa <_dtoa_r+0x20a>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7b1      	b.n	8003b7e <_dtoa_r+0x18e>
 8003c1a:	900e      	str	r0, [sp, #56]	; 0x38
 8003c1c:	e7b0      	b.n	8003b80 <_dtoa_r+0x190>
 8003c1e:	9b05      	ldr	r3, [sp, #20]
 8003c20:	eba3 030b 	sub.w	r3, r3, fp
 8003c24:	9305      	str	r3, [sp, #20]
 8003c26:	f1cb 0300 	rsb	r3, fp, #0
 8003c2a:	9308      	str	r3, [sp, #32]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c30:	e7bd      	b.n	8003bae <_dtoa_r+0x1be>
 8003c32:	2301      	movs	r3, #1
 8003c34:	9309      	str	r3, [sp, #36]	; 0x24
 8003c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dd7a      	ble.n	8003d32 <_dtoa_r+0x342>
 8003c3c:	9304      	str	r3, [sp, #16]
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003c42:	2200      	movs	r2, #0
 8003c44:	606a      	str	r2, [r5, #4]
 8003c46:	2104      	movs	r1, #4
 8003c48:	f101 0214 	add.w	r2, r1, #20
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d975      	bls.n	8003d3c <_dtoa_r+0x34c>
 8003c50:	6869      	ldr	r1, [r5, #4]
 8003c52:	4620      	mov	r0, r4
 8003c54:	f000 feca 	bl	80049ec <_Balloc>
 8003c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c5a:	6028      	str	r0, [r5, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	9302      	str	r3, [sp, #8]
 8003c60:	9b03      	ldr	r3, [sp, #12]
 8003c62:	2b0e      	cmp	r3, #14
 8003c64:	f200 80e5 	bhi.w	8003e32 <_dtoa_r+0x442>
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	f000 80e2 	beq.w	8003e32 <_dtoa_r+0x442>
 8003c6e:	ed9d 7b00 	vldr	d7, [sp]
 8003c72:	f1bb 0f00 	cmp.w	fp, #0
 8003c76:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003c7a:	dd74      	ble.n	8003d66 <_dtoa_r+0x376>
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <_dtoa_r+0x31c>)
 8003c7e:	f00b 030f 	and.w	r3, fp, #15
 8003c82:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003c86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c8a:	06f0      	lsls	r0, r6, #27
 8003c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c90:	d559      	bpl.n	8003d46 <_dtoa_r+0x356>
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <_dtoa_r+0x320>)
 8003c94:	ec51 0b17 	vmov	r0, r1, d7
 8003c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c9c:	f7fc fdd2 	bl	8000844 <__aeabi_ddiv>
 8003ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8003ca4:	f006 060f 	and.w	r6, r6, #15
 8003ca8:	2503      	movs	r5, #3
 8003caa:	4f19      	ldr	r7, [pc, #100]	; (8003d10 <_dtoa_r+0x320>)
 8003cac:	2e00      	cmp	r6, #0
 8003cae:	d14c      	bne.n	8003d4a <_dtoa_r+0x35a>
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cb8:	f7fc fdc4 	bl	8000844 <__aeabi_ddiv>
 8003cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8003cc0:	e06a      	b.n	8003d98 <_dtoa_r+0x3a8>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cc8:	445b      	add	r3, fp
 8003cca:	9304      	str	r3, [sp, #16]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	bfb8      	it	lt
 8003cd4:	2301      	movlt	r3, #1
 8003cd6:	e7b3      	b.n	8003c40 <_dtoa_r+0x250>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e7ab      	b.n	8003c34 <_dtoa_r+0x244>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e7f1      	b.n	8003cc4 <_dtoa_r+0x2d4>
 8003ce0:	636f4361 	.word	0x636f4361
 8003ce4:	3fd287a7 	.word	0x3fd287a7
 8003ce8:	8b60c8b3 	.word	0x8b60c8b3
 8003cec:	3fc68a28 	.word	0x3fc68a28
 8003cf0:	509f79fb 	.word	0x509f79fb
 8003cf4:	3fd34413 	.word	0x3fd34413
 8003cf8:	7ff00000 	.word	0x7ff00000
 8003cfc:	08005802 	.word	0x08005802
 8003d00:	080057f9 	.word	0x080057f9
 8003d04:	080057d8 	.word	0x080057d8
 8003d08:	3ff80000 	.word	0x3ff80000
 8003d0c:	08005830 	.word	0x08005830
 8003d10:	08005808 	.word	0x08005808
 8003d14:	2601      	movs	r6, #1
 8003d16:	2300      	movs	r3, #0
 8003d18:	9307      	str	r3, [sp, #28]
 8003d1a:	9609      	str	r6, [sp, #36]	; 0x24
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	9303      	str	r3, [sp, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2312      	movs	r3, #18
 8003d28:	920a      	str	r2, [sp, #40]	; 0x28
 8003d2a:	e789      	b.n	8003c40 <_dtoa_r+0x250>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d30:	e7f4      	b.n	8003d1c <_dtoa_r+0x32c>
 8003d32:	2301      	movs	r3, #1
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	e7f5      	b.n	8003d28 <_dtoa_r+0x338>
 8003d3c:	686a      	ldr	r2, [r5, #4]
 8003d3e:	3201      	adds	r2, #1
 8003d40:	606a      	str	r2, [r5, #4]
 8003d42:	0049      	lsls	r1, r1, #1
 8003d44:	e780      	b.n	8003c48 <_dtoa_r+0x258>
 8003d46:	2502      	movs	r5, #2
 8003d48:	e7af      	b.n	8003caa <_dtoa_r+0x2ba>
 8003d4a:	07f1      	lsls	r1, r6, #31
 8003d4c:	d508      	bpl.n	8003d60 <_dtoa_r+0x370>
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d56:	f7fc fc4b 	bl	80005f0 <__aeabi_dmul>
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	4689      	mov	r9, r1
 8003d60:	1076      	asrs	r6, r6, #1
 8003d62:	3708      	adds	r7, #8
 8003d64:	e7a2      	b.n	8003cac <_dtoa_r+0x2bc>
 8003d66:	f000 809d 	beq.w	8003ea4 <_dtoa_r+0x4b4>
 8003d6a:	f1cb 0600 	rsb	r6, fp, #0
 8003d6e:	4b9f      	ldr	r3, [pc, #636]	; (8003fec <_dtoa_r+0x5fc>)
 8003d70:	4f9f      	ldr	r7, [pc, #636]	; (8003ff0 <_dtoa_r+0x600>)
 8003d72:	f006 020f 	and.w	r2, r6, #15
 8003d76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d82:	f7fc fc35 	bl	80005f0 <__aeabi_dmul>
 8003d86:	e9cd 0100 	strd	r0, r1, [sp]
 8003d8a:	1136      	asrs	r6, r6, #4
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2502      	movs	r5, #2
 8003d90:	2e00      	cmp	r6, #0
 8003d92:	d17c      	bne.n	8003e8e <_dtoa_r+0x49e>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d191      	bne.n	8003cbc <_dtoa_r+0x2cc>
 8003d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8084 	beq.w	8003ea8 <_dtoa_r+0x4b8>
 8003da0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003da4:	2200      	movs	r2, #0
 8003da6:	4b93      	ldr	r3, [pc, #588]	; (8003ff4 <_dtoa_r+0x604>)
 8003da8:	4640      	mov	r0, r8
 8003daa:	4649      	mov	r1, r9
 8003dac:	f7fc fe92 	bl	8000ad4 <__aeabi_dcmplt>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d079      	beq.n	8003ea8 <_dtoa_r+0x4b8>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d076      	beq.n	8003ea8 <_dtoa_r+0x4b8>
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dd34      	ble.n	8003e2a <_dtoa_r+0x43a>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <_dtoa_r+0x608>)
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	f7fc fc12 	bl	80005f0 <__aeabi_dmul>
 8003dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8003dd0:	9e04      	ldr	r6, [sp, #16]
 8003dd2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003dd6:	3501      	adds	r5, #1
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f7fc fba3 	bl	8000524 <__aeabi_i2d>
 8003dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003de2:	f7fc fc05 	bl	80005f0 <__aeabi_dmul>
 8003de6:	2200      	movs	r2, #0
 8003de8:	4b84      	ldr	r3, [pc, #528]	; (8003ffc <_dtoa_r+0x60c>)
 8003dea:	f7fc fa4f 	bl	800028c <__adddf3>
 8003dee:	4680      	mov	r8, r0
 8003df0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003df4:	2e00      	cmp	r6, #0
 8003df6:	d15a      	bne.n	8003eae <_dtoa_r+0x4be>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <_dtoa_r+0x610>)
 8003dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e00:	f7fc fa42 	bl	8000288 <__aeabi_dsub>
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	e9cd 0100 	strd	r0, r1, [sp]
 8003e0c:	f7fc fe80 	bl	8000b10 <__aeabi_dcmpgt>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	f040 829b 	bne.w	800434c <_dtoa_r+0x95c>
 8003e16:	4642      	mov	r2, r8
 8003e18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e20:	f7fc fe58 	bl	8000ad4 <__aeabi_dcmplt>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f040 828f 	bne.w	8004348 <_dtoa_r+0x958>
 8003e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f2c0 8150 	blt.w	80040da <_dtoa_r+0x6ea>
 8003e3a:	f1bb 0f0e 	cmp.w	fp, #14
 8003e3e:	f300 814c 	bgt.w	80040da <_dtoa_r+0x6ea>
 8003e42:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <_dtoa_r+0x5fc>)
 8003e44:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f280 80da 	bge.w	8004008 <_dtoa_r+0x618>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f300 80d6 	bgt.w	8004008 <_dtoa_r+0x618>
 8003e5c:	f040 8273 	bne.w	8004346 <_dtoa_r+0x956>
 8003e60:	2200      	movs	r2, #0
 8003e62:	4b67      	ldr	r3, [pc, #412]	; (8004000 <_dtoa_r+0x610>)
 8003e64:	4640      	mov	r0, r8
 8003e66:	4649      	mov	r1, r9
 8003e68:	f7fc fbc2 	bl	80005f0 <__aeabi_dmul>
 8003e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e70:	f7fc fe44 	bl	8000afc <__aeabi_dcmpge>
 8003e74:	9e03      	ldr	r6, [sp, #12]
 8003e76:	4637      	mov	r7, r6
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	f040 824a 	bne.w	8004312 <_dtoa_r+0x922>
 8003e7e:	9b02      	ldr	r3, [sp, #8]
 8003e80:	9a02      	ldr	r2, [sp, #8]
 8003e82:	1c5d      	adds	r5, r3, #1
 8003e84:	2331      	movs	r3, #49	; 0x31
 8003e86:	7013      	strb	r3, [r2, #0]
 8003e88:	f10b 0b01 	add.w	fp, fp, #1
 8003e8c:	e245      	b.n	800431a <_dtoa_r+0x92a>
 8003e8e:	07f2      	lsls	r2, r6, #31
 8003e90:	d505      	bpl.n	8003e9e <_dtoa_r+0x4ae>
 8003e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e96:	f7fc fbab 	bl	80005f0 <__aeabi_dmul>
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	1076      	asrs	r6, r6, #1
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	e775      	b.n	8003d90 <_dtoa_r+0x3a0>
 8003ea4:	2502      	movs	r5, #2
 8003ea6:	e777      	b.n	8003d98 <_dtoa_r+0x3a8>
 8003ea8:	465f      	mov	r7, fp
 8003eaa:	9e03      	ldr	r6, [sp, #12]
 8003eac:	e794      	b.n	8003dd8 <_dtoa_r+0x3e8>
 8003eae:	9a02      	ldr	r2, [sp, #8]
 8003eb0:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <_dtoa_r+0x5fc>)
 8003eb2:	4432      	add	r2, r6
 8003eb4:	9213      	str	r2, [sp, #76]	; 0x4c
 8003eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb8:	1e71      	subs	r1, r6, #1
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d048      	beq.n	8003f50 <_dtoa_r+0x560>
 8003ebe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	494e      	ldr	r1, [pc, #312]	; (8004004 <_dtoa_r+0x614>)
 8003eca:	f7fc fcbb 	bl	8000844 <__aeabi_ddiv>
 8003ece:	4642      	mov	r2, r8
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	f7fc f9d9 	bl	8000288 <__aeabi_dsub>
 8003ed6:	9d02      	ldr	r5, [sp, #8]
 8003ed8:	4680      	mov	r8, r0
 8003eda:	4689      	mov	r9, r1
 8003edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ee0:	f7fc fe36 	bl	8000b50 <__aeabi_d2iz>
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	f7fc fb1d 	bl	8000524 <__aeabi_i2d>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ef2:	f7fc f9c9 	bl	8000288 <__aeabi_dsub>
 8003ef6:	3630      	adds	r6, #48	; 0x30
 8003ef8:	f805 6b01 	strb.w	r6, [r5], #1
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	e9cd 0100 	strd	r0, r1, [sp]
 8003f04:	f7fc fde6 	bl	8000ad4 <__aeabi_dcmplt>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d165      	bne.n	8003fd8 <_dtoa_r+0x5e8>
 8003f0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f10:	2000      	movs	r0, #0
 8003f12:	4938      	ldr	r1, [pc, #224]	; (8003ff4 <_dtoa_r+0x604>)
 8003f14:	f7fc f9b8 	bl	8000288 <__aeabi_dsub>
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	f7fc fdda 	bl	8000ad4 <__aeabi_dcmplt>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f040 80ba 	bne.w	800409a <_dtoa_r+0x6aa>
 8003f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f28:	429d      	cmp	r5, r3
 8003f2a:	f43f af7e 	beq.w	8003e2a <_dtoa_r+0x43a>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <_dtoa_r+0x608>)
 8003f32:	4640      	mov	r0, r8
 8003f34:	4649      	mov	r1, r9
 8003f36:	f7fc fb5b 	bl	80005f0 <__aeabi_dmul>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	4689      	mov	r9, r1
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <_dtoa_r+0x608>)
 8003f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f46:	f7fc fb53 	bl	80005f0 <__aeabi_dmul>
 8003f4a:	e9cd 0100 	strd	r0, r1, [sp]
 8003f4e:	e7c5      	b.n	8003edc <_dtoa_r+0x4ec>
 8003f50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f5c:	f7fc fb48 	bl	80005f0 <__aeabi_dmul>
 8003f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f64:	9d02      	ldr	r5, [sp, #8]
 8003f66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f6a:	f7fc fdf1 	bl	8000b50 <__aeabi_d2iz>
 8003f6e:	4606      	mov	r6, r0
 8003f70:	f7fc fad8 	bl	8000524 <__aeabi_i2d>
 8003f74:	3630      	adds	r6, #48	; 0x30
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f7e:	f7fc f983 	bl	8000288 <__aeabi_dsub>
 8003f82:	f805 6b01 	strb.w	r6, [r5], #1
 8003f86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	4680      	mov	r8, r0
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	d125      	bne.n	8003fe0 <_dtoa_r+0x5f0>
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <_dtoa_r+0x614>)
 8003f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f9a:	f7fc f977 	bl	800028c <__adddf3>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	f7fc fdb3 	bl	8000b10 <__aeabi_dcmpgt>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d175      	bne.n	800409a <_dtoa_r+0x6aa>
 8003fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	4913      	ldr	r1, [pc, #76]	; (8004004 <_dtoa_r+0x614>)
 8003fb6:	f7fc f967 	bl	8000288 <__aeabi_dsub>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	f7fc fd87 	bl	8000ad4 <__aeabi_dcmplt>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f43f af2f 	beq.w	8003e2a <_dtoa_r+0x43a>
 8003fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8003fd6:	d001      	beq.n	8003fdc <_dtoa_r+0x5ec>
 8003fd8:	46bb      	mov	fp, r7
 8003fda:	e04d      	b.n	8004078 <_dtoa_r+0x688>
 8003fdc:	4615      	mov	r5, r2
 8003fde:	e7f5      	b.n	8003fcc <_dtoa_r+0x5dc>
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_dtoa_r+0x608>)
 8003fe2:	f7fc fb05 	bl	80005f0 <__aeabi_dmul>
 8003fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8003fea:	e7bc      	b.n	8003f66 <_dtoa_r+0x576>
 8003fec:	08005830 	.word	0x08005830
 8003ff0:	08005808 	.word	0x08005808
 8003ff4:	3ff00000 	.word	0x3ff00000
 8003ff8:	40240000 	.word	0x40240000
 8003ffc:	401c0000 	.word	0x401c0000
 8004000:	40140000 	.word	0x40140000
 8004004:	3fe00000 	.word	0x3fe00000
 8004008:	e9dd 6700 	ldrd	r6, r7, [sp]
 800400c:	9d02      	ldr	r5, [sp, #8]
 800400e:	4642      	mov	r2, r8
 8004010:	464b      	mov	r3, r9
 8004012:	4630      	mov	r0, r6
 8004014:	4639      	mov	r1, r7
 8004016:	f7fc fc15 	bl	8000844 <__aeabi_ddiv>
 800401a:	f7fc fd99 	bl	8000b50 <__aeabi_d2iz>
 800401e:	9000      	str	r0, [sp, #0]
 8004020:	f7fc fa80 	bl	8000524 <__aeabi_i2d>
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	f7fc fae2 	bl	80005f0 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4630      	mov	r0, r6
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc f928 	bl	8000288 <__aeabi_dsub>
 8004038:	9e00      	ldr	r6, [sp, #0]
 800403a:	9f03      	ldr	r7, [sp, #12]
 800403c:	3630      	adds	r6, #48	; 0x30
 800403e:	f805 6b01 	strb.w	r6, [r5], #1
 8004042:	9e02      	ldr	r6, [sp, #8]
 8004044:	1bae      	subs	r6, r5, r6
 8004046:	42b7      	cmp	r7, r6
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	d138      	bne.n	80040c0 <_dtoa_r+0x6d0>
 800404e:	f7fc f91d 	bl	800028c <__adddf3>
 8004052:	4606      	mov	r6, r0
 8004054:	460f      	mov	r7, r1
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4640      	mov	r0, r8
 800405c:	4649      	mov	r1, r9
 800405e:	f7fc fd39 	bl	8000ad4 <__aeabi_dcmplt>
 8004062:	b9c8      	cbnz	r0, 8004098 <_dtoa_r+0x6a8>
 8004064:	4632      	mov	r2, r6
 8004066:	463b      	mov	r3, r7
 8004068:	4640      	mov	r0, r8
 800406a:	4649      	mov	r1, r9
 800406c:	f7fc fd28 	bl	8000ac0 <__aeabi_dcmpeq>
 8004070:	b110      	cbz	r0, 8004078 <_dtoa_r+0x688>
 8004072:	9b00      	ldr	r3, [sp, #0]
 8004074:	07db      	lsls	r3, r3, #31
 8004076:	d40f      	bmi.n	8004098 <_dtoa_r+0x6a8>
 8004078:	4651      	mov	r1, sl
 800407a:	4620      	mov	r0, r4
 800407c:	f000 fcea 	bl	8004a54 <_Bfree>
 8004080:	2300      	movs	r3, #0
 8004082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004084:	702b      	strb	r3, [r5, #0]
 8004086:	f10b 0301 	add.w	r3, fp, #1
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800408e:	2b00      	cmp	r3, #0
 8004090:	f43f acf8 	beq.w	8003a84 <_dtoa_r+0x94>
 8004094:	601d      	str	r5, [r3, #0]
 8004096:	e4f5      	b.n	8003a84 <_dtoa_r+0x94>
 8004098:	465f      	mov	r7, fp
 800409a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800409e:	2a39      	cmp	r2, #57	; 0x39
 80040a0:	f105 33ff 	add.w	r3, r5, #4294967295
 80040a4:	d106      	bne.n	80040b4 <_dtoa_r+0x6c4>
 80040a6:	9a02      	ldr	r2, [sp, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d107      	bne.n	80040bc <_dtoa_r+0x6cc>
 80040ac:	2330      	movs	r3, #48	; 0x30
 80040ae:	7013      	strb	r3, [r2, #0]
 80040b0:	3701      	adds	r7, #1
 80040b2:	4613      	mov	r3, r2
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	3201      	adds	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e78d      	b.n	8003fd8 <_dtoa_r+0x5e8>
 80040bc:	461d      	mov	r5, r3
 80040be:	e7ec      	b.n	800409a <_dtoa_r+0x6aa>
 80040c0:	2200      	movs	r2, #0
 80040c2:	4ba4      	ldr	r3, [pc, #656]	; (8004354 <_dtoa_r+0x964>)
 80040c4:	f7fc fa94 	bl	80005f0 <__aeabi_dmul>
 80040c8:	2200      	movs	r2, #0
 80040ca:	2300      	movs	r3, #0
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	f7fc fcf6 	bl	8000ac0 <__aeabi_dcmpeq>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d09a      	beq.n	800400e <_dtoa_r+0x61e>
 80040d8:	e7ce      	b.n	8004078 <_dtoa_r+0x688>
 80040da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040dc:	2a00      	cmp	r2, #0
 80040de:	f000 80cd 	beq.w	800427c <_dtoa_r+0x88c>
 80040e2:	9a07      	ldr	r2, [sp, #28]
 80040e4:	2a01      	cmp	r2, #1
 80040e6:	f300 80af 	bgt.w	8004248 <_dtoa_r+0x858>
 80040ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	f000 80a7 	beq.w	8004240 <_dtoa_r+0x850>
 80040f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040f6:	9e08      	ldr	r6, [sp, #32]
 80040f8:	9d05      	ldr	r5, [sp, #20]
 80040fa:	9a05      	ldr	r2, [sp, #20]
 80040fc:	441a      	add	r2, r3
 80040fe:	9205      	str	r2, [sp, #20]
 8004100:	9a06      	ldr	r2, [sp, #24]
 8004102:	2101      	movs	r1, #1
 8004104:	441a      	add	r2, r3
 8004106:	4620      	mov	r0, r4
 8004108:	9206      	str	r2, [sp, #24]
 800410a:	f000 fd43 	bl	8004b94 <__i2b>
 800410e:	4607      	mov	r7, r0
 8004110:	2d00      	cmp	r5, #0
 8004112:	dd0c      	ble.n	800412e <_dtoa_r+0x73e>
 8004114:	9b06      	ldr	r3, [sp, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd09      	ble.n	800412e <_dtoa_r+0x73e>
 800411a:	42ab      	cmp	r3, r5
 800411c:	9a05      	ldr	r2, [sp, #20]
 800411e:	bfa8      	it	ge
 8004120:	462b      	movge	r3, r5
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	9205      	str	r2, [sp, #20]
 8004126:	9a06      	ldr	r2, [sp, #24]
 8004128:	1aed      	subs	r5, r5, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	9306      	str	r3, [sp, #24]
 800412e:	9b08      	ldr	r3, [sp, #32]
 8004130:	b1f3      	cbz	r3, 8004170 <_dtoa_r+0x780>
 8004132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a5 	beq.w	8004284 <_dtoa_r+0x894>
 800413a:	2e00      	cmp	r6, #0
 800413c:	dd10      	ble.n	8004160 <_dtoa_r+0x770>
 800413e:	4639      	mov	r1, r7
 8004140:	4632      	mov	r2, r6
 8004142:	4620      	mov	r0, r4
 8004144:	f000 fdbc 	bl	8004cc0 <__pow5mult>
 8004148:	4652      	mov	r2, sl
 800414a:	4601      	mov	r1, r0
 800414c:	4607      	mov	r7, r0
 800414e:	4620      	mov	r0, r4
 8004150:	f000 fd29 	bl	8004ba6 <__multiply>
 8004154:	4651      	mov	r1, sl
 8004156:	4680      	mov	r8, r0
 8004158:	4620      	mov	r0, r4
 800415a:	f000 fc7b 	bl	8004a54 <_Bfree>
 800415e:	46c2      	mov	sl, r8
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	1b9a      	subs	r2, r3, r6
 8004164:	d004      	beq.n	8004170 <_dtoa_r+0x780>
 8004166:	4651      	mov	r1, sl
 8004168:	4620      	mov	r0, r4
 800416a:	f000 fda9 	bl	8004cc0 <__pow5mult>
 800416e:	4682      	mov	sl, r0
 8004170:	2101      	movs	r1, #1
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fd0e 	bl	8004b94 <__i2b>
 8004178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800417a:	2b00      	cmp	r3, #0
 800417c:	4606      	mov	r6, r0
 800417e:	f340 8083 	ble.w	8004288 <_dtoa_r+0x898>
 8004182:	461a      	mov	r2, r3
 8004184:	4601      	mov	r1, r0
 8004186:	4620      	mov	r0, r4
 8004188:	f000 fd9a 	bl	8004cc0 <__pow5mult>
 800418c:	9b07      	ldr	r3, [sp, #28]
 800418e:	2b01      	cmp	r3, #1
 8004190:	4606      	mov	r6, r0
 8004192:	dd7c      	ble.n	800428e <_dtoa_r+0x89e>
 8004194:	f04f 0800 	mov.w	r8, #0
 8004198:	6933      	ldr	r3, [r6, #16]
 800419a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800419e:	6918      	ldr	r0, [r3, #16]
 80041a0:	f000 fcaa 	bl	8004af8 <__hi0bits>
 80041a4:	f1c0 0020 	rsb	r0, r0, #32
 80041a8:	9b06      	ldr	r3, [sp, #24]
 80041aa:	4418      	add	r0, r3
 80041ac:	f010 001f 	ands.w	r0, r0, #31
 80041b0:	f000 8096 	beq.w	80042e0 <_dtoa_r+0x8f0>
 80041b4:	f1c0 0320 	rsb	r3, r0, #32
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	f340 8087 	ble.w	80042cc <_dtoa_r+0x8dc>
 80041be:	9b05      	ldr	r3, [sp, #20]
 80041c0:	f1c0 001c 	rsb	r0, r0, #28
 80041c4:	4403      	add	r3, r0
 80041c6:	9305      	str	r3, [sp, #20]
 80041c8:	9b06      	ldr	r3, [sp, #24]
 80041ca:	4405      	add	r5, r0
 80041cc:	4403      	add	r3, r0
 80041ce:	9306      	str	r3, [sp, #24]
 80041d0:	9b05      	ldr	r3, [sp, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dd05      	ble.n	80041e2 <_dtoa_r+0x7f2>
 80041d6:	4651      	mov	r1, sl
 80041d8:	461a      	mov	r2, r3
 80041da:	4620      	mov	r0, r4
 80041dc:	f000 fdbe 	bl	8004d5c <__lshift>
 80041e0:	4682      	mov	sl, r0
 80041e2:	9b06      	ldr	r3, [sp, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dd05      	ble.n	80041f4 <_dtoa_r+0x804>
 80041e8:	4631      	mov	r1, r6
 80041ea:	461a      	mov	r2, r3
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 fdb5 	bl	8004d5c <__lshift>
 80041f2:	4606      	mov	r6, r0
 80041f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d074      	beq.n	80042e4 <_dtoa_r+0x8f4>
 80041fa:	4631      	mov	r1, r6
 80041fc:	4650      	mov	r0, sl
 80041fe:	f000 fdfe 	bl	8004dfe <__mcmp>
 8004202:	2800      	cmp	r0, #0
 8004204:	da6e      	bge.n	80042e4 <_dtoa_r+0x8f4>
 8004206:	2300      	movs	r3, #0
 8004208:	4651      	mov	r1, sl
 800420a:	220a      	movs	r2, #10
 800420c:	4620      	mov	r0, r4
 800420e:	f000 fc38 	bl	8004a82 <__multadd>
 8004212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004214:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004218:	4682      	mov	sl, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 81a8 	beq.w	8004570 <_dtoa_r+0xb80>
 8004220:	2300      	movs	r3, #0
 8004222:	4639      	mov	r1, r7
 8004224:	220a      	movs	r2, #10
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fc2b 	bl	8004a82 <__multadd>
 800422c:	9b04      	ldr	r3, [sp, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	4607      	mov	r7, r0
 8004232:	f300 80c8 	bgt.w	80043c6 <_dtoa_r+0x9d6>
 8004236:	9b07      	ldr	r3, [sp, #28]
 8004238:	2b02      	cmp	r3, #2
 800423a:	f340 80c4 	ble.w	80043c6 <_dtoa_r+0x9d6>
 800423e:	e059      	b.n	80042f4 <_dtoa_r+0x904>
 8004240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004242:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004246:	e756      	b.n	80040f6 <_dtoa_r+0x706>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	1e5e      	subs	r6, r3, #1
 800424c:	9b08      	ldr	r3, [sp, #32]
 800424e:	42b3      	cmp	r3, r6
 8004250:	bfbf      	itttt	lt
 8004252:	9b08      	ldrlt	r3, [sp, #32]
 8004254:	9608      	strlt	r6, [sp, #32]
 8004256:	1af2      	sublt	r2, r6, r3
 8004258:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800425a:	bfb6      	itet	lt
 800425c:	189b      	addlt	r3, r3, r2
 800425e:	1b9e      	subge	r6, r3, r6
 8004260:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	bfb8      	it	lt
 8004266:	2600      	movlt	r6, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	bfb9      	ittee	lt
 800426c:	9b05      	ldrlt	r3, [sp, #20]
 800426e:	9a03      	ldrlt	r2, [sp, #12]
 8004270:	9d05      	ldrge	r5, [sp, #20]
 8004272:	9b03      	ldrge	r3, [sp, #12]
 8004274:	bfbc      	itt	lt
 8004276:	1a9d      	sublt	r5, r3, r2
 8004278:	2300      	movlt	r3, #0
 800427a:	e73e      	b.n	80040fa <_dtoa_r+0x70a>
 800427c:	9e08      	ldr	r6, [sp, #32]
 800427e:	9d05      	ldr	r5, [sp, #20]
 8004280:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004282:	e745      	b.n	8004110 <_dtoa_r+0x720>
 8004284:	9a08      	ldr	r2, [sp, #32]
 8004286:	e76e      	b.n	8004166 <_dtoa_r+0x776>
 8004288:	9b07      	ldr	r3, [sp, #28]
 800428a:	2b01      	cmp	r3, #1
 800428c:	dc19      	bgt.n	80042c2 <_dtoa_r+0x8d2>
 800428e:	9b00      	ldr	r3, [sp, #0]
 8004290:	b9bb      	cbnz	r3, 80042c2 <_dtoa_r+0x8d2>
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004298:	b99b      	cbnz	r3, 80042c2 <_dtoa_r+0x8d2>
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042a0:	0d1b      	lsrs	r3, r3, #20
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	b183      	cbz	r3, 80042c8 <_dtoa_r+0x8d8>
 80042a6:	9b05      	ldr	r3, [sp, #20]
 80042a8:	3301      	adds	r3, #1
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	9b06      	ldr	r3, [sp, #24]
 80042ae:	3301      	adds	r3, #1
 80042b0:	9306      	str	r3, [sp, #24]
 80042b2:	f04f 0801 	mov.w	r8, #1
 80042b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f af6d 	bne.w	8004198 <_dtoa_r+0x7a8>
 80042be:	2001      	movs	r0, #1
 80042c0:	e772      	b.n	80041a8 <_dtoa_r+0x7b8>
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	e7f6      	b.n	80042b6 <_dtoa_r+0x8c6>
 80042c8:	4698      	mov	r8, r3
 80042ca:	e7f4      	b.n	80042b6 <_dtoa_r+0x8c6>
 80042cc:	d080      	beq.n	80041d0 <_dtoa_r+0x7e0>
 80042ce:	9a05      	ldr	r2, [sp, #20]
 80042d0:	331c      	adds	r3, #28
 80042d2:	441a      	add	r2, r3
 80042d4:	9205      	str	r2, [sp, #20]
 80042d6:	9a06      	ldr	r2, [sp, #24]
 80042d8:	441a      	add	r2, r3
 80042da:	441d      	add	r5, r3
 80042dc:	4613      	mov	r3, r2
 80042de:	e776      	b.n	80041ce <_dtoa_r+0x7de>
 80042e0:	4603      	mov	r3, r0
 80042e2:	e7f4      	b.n	80042ce <_dtoa_r+0x8de>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dc36      	bgt.n	8004358 <_dtoa_r+0x968>
 80042ea:	9b07      	ldr	r3, [sp, #28]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	dd33      	ble.n	8004358 <_dtoa_r+0x968>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	b963      	cbnz	r3, 8004312 <_dtoa_r+0x922>
 80042f8:	4631      	mov	r1, r6
 80042fa:	2205      	movs	r2, #5
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fbc0 	bl	8004a82 <__multadd>
 8004302:	4601      	mov	r1, r0
 8004304:	4606      	mov	r6, r0
 8004306:	4650      	mov	r0, sl
 8004308:	f000 fd79 	bl	8004dfe <__mcmp>
 800430c:	2800      	cmp	r0, #0
 800430e:	f73f adb6 	bgt.w	8003e7e <_dtoa_r+0x48e>
 8004312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004314:	9d02      	ldr	r5, [sp, #8]
 8004316:	ea6f 0b03 	mvn.w	fp, r3
 800431a:	2300      	movs	r3, #0
 800431c:	9303      	str	r3, [sp, #12]
 800431e:	4631      	mov	r1, r6
 8004320:	4620      	mov	r0, r4
 8004322:	f000 fb97 	bl	8004a54 <_Bfree>
 8004326:	2f00      	cmp	r7, #0
 8004328:	f43f aea6 	beq.w	8004078 <_dtoa_r+0x688>
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	b12b      	cbz	r3, 800433c <_dtoa_r+0x94c>
 8004330:	42bb      	cmp	r3, r7
 8004332:	d003      	beq.n	800433c <_dtoa_r+0x94c>
 8004334:	4619      	mov	r1, r3
 8004336:	4620      	mov	r0, r4
 8004338:	f000 fb8c 	bl	8004a54 <_Bfree>
 800433c:	4639      	mov	r1, r7
 800433e:	4620      	mov	r0, r4
 8004340:	f000 fb88 	bl	8004a54 <_Bfree>
 8004344:	e698      	b.n	8004078 <_dtoa_r+0x688>
 8004346:	2600      	movs	r6, #0
 8004348:	4637      	mov	r7, r6
 800434a:	e7e2      	b.n	8004312 <_dtoa_r+0x922>
 800434c:	46bb      	mov	fp, r7
 800434e:	4637      	mov	r7, r6
 8004350:	e595      	b.n	8003e7e <_dtoa_r+0x48e>
 8004352:	bf00      	nop
 8004354:	40240000 	.word	0x40240000
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	bb93      	cbnz	r3, 80043c2 <_dtoa_r+0x9d2>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	9d02      	ldr	r5, [sp, #8]
 8004362:	4631      	mov	r1, r6
 8004364:	4650      	mov	r0, sl
 8004366:	f7ff fab7 	bl	80038d8 <quorem>
 800436a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800436e:	f805 9b01 	strb.w	r9, [r5], #1
 8004372:	9b02      	ldr	r3, [sp, #8]
 8004374:	9a04      	ldr	r2, [sp, #16]
 8004376:	1aeb      	subs	r3, r5, r3
 8004378:	429a      	cmp	r2, r3
 800437a:	f300 80dc 	bgt.w	8004536 <_dtoa_r+0xb46>
 800437e:	9b02      	ldr	r3, [sp, #8]
 8004380:	2a01      	cmp	r2, #1
 8004382:	bfac      	ite	ge
 8004384:	189b      	addge	r3, r3, r2
 8004386:	3301      	addlt	r3, #1
 8004388:	4698      	mov	r8, r3
 800438a:	2300      	movs	r3, #0
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	4651      	mov	r1, sl
 8004390:	2201      	movs	r2, #1
 8004392:	4620      	mov	r0, r4
 8004394:	f000 fce2 	bl	8004d5c <__lshift>
 8004398:	4631      	mov	r1, r6
 800439a:	4682      	mov	sl, r0
 800439c:	f000 fd2f 	bl	8004dfe <__mcmp>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	f300 808d 	bgt.w	80044c0 <_dtoa_r+0xad0>
 80043a6:	d103      	bne.n	80043b0 <_dtoa_r+0x9c0>
 80043a8:	f019 0f01 	tst.w	r9, #1
 80043ac:	f040 8088 	bne.w	80044c0 <_dtoa_r+0xad0>
 80043b0:	4645      	mov	r5, r8
 80043b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80043bc:	d1af      	bne.n	800431e <_dtoa_r+0x92e>
 80043be:	4615      	mov	r5, r2
 80043c0:	e7f7      	b.n	80043b2 <_dtoa_r+0x9c2>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	dd05      	ble.n	80043d6 <_dtoa_r+0x9e6>
 80043ca:	4639      	mov	r1, r7
 80043cc:	462a      	mov	r2, r5
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 fcc4 	bl	8004d5c <__lshift>
 80043d4:	4607      	mov	r7, r0
 80043d6:	f1b8 0f00 	cmp.w	r8, #0
 80043da:	d04c      	beq.n	8004476 <_dtoa_r+0xa86>
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 fb04 	bl	80049ec <_Balloc>
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	3202      	adds	r2, #2
 80043e8:	4605      	mov	r5, r0
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	f107 010c 	add.w	r1, r7, #12
 80043f0:	300c      	adds	r0, #12
 80043f2:	f7fe fa4f 	bl	8002894 <memcpy>
 80043f6:	2201      	movs	r2, #1
 80043f8:	4629      	mov	r1, r5
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 fcae 	bl	8004d5c <__lshift>
 8004400:	9b00      	ldr	r3, [sp, #0]
 8004402:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004406:	9703      	str	r7, [sp, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	4607      	mov	r7, r0
 800440e:	9305      	str	r3, [sp, #20]
 8004410:	4631      	mov	r1, r6
 8004412:	4650      	mov	r0, sl
 8004414:	f7ff fa60 	bl	80038d8 <quorem>
 8004418:	9903      	ldr	r1, [sp, #12]
 800441a:	4605      	mov	r5, r0
 800441c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004420:	4650      	mov	r0, sl
 8004422:	f000 fcec 	bl	8004dfe <__mcmp>
 8004426:	463a      	mov	r2, r7
 8004428:	9000      	str	r0, [sp, #0]
 800442a:	4631      	mov	r1, r6
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fd00 	bl	8004e32 <__mdiff>
 8004432:	68c3      	ldr	r3, [r0, #12]
 8004434:	4602      	mov	r2, r0
 8004436:	bb03      	cbnz	r3, 800447a <_dtoa_r+0xa8a>
 8004438:	4601      	mov	r1, r0
 800443a:	9006      	str	r0, [sp, #24]
 800443c:	4650      	mov	r0, sl
 800443e:	f000 fcde 	bl	8004dfe <__mcmp>
 8004442:	9a06      	ldr	r2, [sp, #24]
 8004444:	4603      	mov	r3, r0
 8004446:	4611      	mov	r1, r2
 8004448:	4620      	mov	r0, r4
 800444a:	9306      	str	r3, [sp, #24]
 800444c:	f000 fb02 	bl	8004a54 <_Bfree>
 8004450:	9b06      	ldr	r3, [sp, #24]
 8004452:	b9a3      	cbnz	r3, 800447e <_dtoa_r+0xa8e>
 8004454:	9a07      	ldr	r2, [sp, #28]
 8004456:	b992      	cbnz	r2, 800447e <_dtoa_r+0xa8e>
 8004458:	9a05      	ldr	r2, [sp, #20]
 800445a:	b982      	cbnz	r2, 800447e <_dtoa_r+0xa8e>
 800445c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004460:	d029      	beq.n	80044b6 <_dtoa_r+0xac6>
 8004462:	9b00      	ldr	r3, [sp, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dd01      	ble.n	800446c <_dtoa_r+0xa7c>
 8004468:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800446c:	f108 0501 	add.w	r5, r8, #1
 8004470:	f888 9000 	strb.w	r9, [r8]
 8004474:	e753      	b.n	800431e <_dtoa_r+0x92e>
 8004476:	4638      	mov	r0, r7
 8004478:	e7c2      	b.n	8004400 <_dtoa_r+0xa10>
 800447a:	2301      	movs	r3, #1
 800447c:	e7e3      	b.n	8004446 <_dtoa_r+0xa56>
 800447e:	9a00      	ldr	r2, [sp, #0]
 8004480:	2a00      	cmp	r2, #0
 8004482:	db04      	blt.n	800448e <_dtoa_r+0xa9e>
 8004484:	d125      	bne.n	80044d2 <_dtoa_r+0xae2>
 8004486:	9a07      	ldr	r2, [sp, #28]
 8004488:	bb1a      	cbnz	r2, 80044d2 <_dtoa_r+0xae2>
 800448a:	9a05      	ldr	r2, [sp, #20]
 800448c:	bb0a      	cbnz	r2, 80044d2 <_dtoa_r+0xae2>
 800448e:	2b00      	cmp	r3, #0
 8004490:	ddec      	ble.n	800446c <_dtoa_r+0xa7c>
 8004492:	4651      	mov	r1, sl
 8004494:	2201      	movs	r2, #1
 8004496:	4620      	mov	r0, r4
 8004498:	f000 fc60 	bl	8004d5c <__lshift>
 800449c:	4631      	mov	r1, r6
 800449e:	4682      	mov	sl, r0
 80044a0:	f000 fcad 	bl	8004dfe <__mcmp>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	dc03      	bgt.n	80044b0 <_dtoa_r+0xac0>
 80044a8:	d1e0      	bne.n	800446c <_dtoa_r+0xa7c>
 80044aa:	f019 0f01 	tst.w	r9, #1
 80044ae:	d0dd      	beq.n	800446c <_dtoa_r+0xa7c>
 80044b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80044b4:	d1d8      	bne.n	8004468 <_dtoa_r+0xa78>
 80044b6:	2339      	movs	r3, #57	; 0x39
 80044b8:	f888 3000 	strb.w	r3, [r8]
 80044bc:	f108 0801 	add.w	r8, r8, #1
 80044c0:	4645      	mov	r5, r8
 80044c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044c6:	2b39      	cmp	r3, #57	; 0x39
 80044c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80044cc:	d03b      	beq.n	8004546 <_dtoa_r+0xb56>
 80044ce:	3301      	adds	r3, #1
 80044d0:	e040      	b.n	8004554 <_dtoa_r+0xb64>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f108 0501 	add.w	r5, r8, #1
 80044d8:	dd05      	ble.n	80044e6 <_dtoa_r+0xaf6>
 80044da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80044de:	d0ea      	beq.n	80044b6 <_dtoa_r+0xac6>
 80044e0:	f109 0901 	add.w	r9, r9, #1
 80044e4:	e7c4      	b.n	8004470 <_dtoa_r+0xa80>
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	9a04      	ldr	r2, [sp, #16]
 80044ea:	f805 9c01 	strb.w	r9, [r5, #-1]
 80044ee:	1aeb      	subs	r3, r5, r3
 80044f0:	4293      	cmp	r3, r2
 80044f2:	46a8      	mov	r8, r5
 80044f4:	f43f af4b 	beq.w	800438e <_dtoa_r+0x99e>
 80044f8:	4651      	mov	r1, sl
 80044fa:	2300      	movs	r3, #0
 80044fc:	220a      	movs	r2, #10
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 fabf 	bl	8004a82 <__multadd>
 8004504:	9b03      	ldr	r3, [sp, #12]
 8004506:	9903      	ldr	r1, [sp, #12]
 8004508:	42bb      	cmp	r3, r7
 800450a:	4682      	mov	sl, r0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	f04f 020a 	mov.w	r2, #10
 8004514:	4620      	mov	r0, r4
 8004516:	d104      	bne.n	8004522 <_dtoa_r+0xb32>
 8004518:	f000 fab3 	bl	8004a82 <__multadd>
 800451c:	9003      	str	r0, [sp, #12]
 800451e:	4607      	mov	r7, r0
 8004520:	e776      	b.n	8004410 <_dtoa_r+0xa20>
 8004522:	f000 faae 	bl	8004a82 <__multadd>
 8004526:	2300      	movs	r3, #0
 8004528:	9003      	str	r0, [sp, #12]
 800452a:	220a      	movs	r2, #10
 800452c:	4639      	mov	r1, r7
 800452e:	4620      	mov	r0, r4
 8004530:	f000 faa7 	bl	8004a82 <__multadd>
 8004534:	e7f3      	b.n	800451e <_dtoa_r+0xb2e>
 8004536:	4651      	mov	r1, sl
 8004538:	2300      	movs	r3, #0
 800453a:	220a      	movs	r2, #10
 800453c:	4620      	mov	r0, r4
 800453e:	f000 faa0 	bl	8004a82 <__multadd>
 8004542:	4682      	mov	sl, r0
 8004544:	e70d      	b.n	8004362 <_dtoa_r+0x972>
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	4293      	cmp	r3, r2
 800454a:	d105      	bne.n	8004558 <_dtoa_r+0xb68>
 800454c:	9a02      	ldr	r2, [sp, #8]
 800454e:	f10b 0b01 	add.w	fp, fp, #1
 8004552:	2331      	movs	r3, #49	; 0x31
 8004554:	7013      	strb	r3, [r2, #0]
 8004556:	e6e2      	b.n	800431e <_dtoa_r+0x92e>
 8004558:	4615      	mov	r5, r2
 800455a:	e7b2      	b.n	80044c2 <_dtoa_r+0xad2>
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <_dtoa_r+0xb94>)
 800455e:	f7ff baae 	b.w	8003abe <_dtoa_r+0xce>
 8004562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f aa88 	bne.w	8003a7a <_dtoa_r+0x8a>
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <_dtoa_r+0xb98>)
 800456c:	f7ff baa7 	b.w	8003abe <_dtoa_r+0xce>
 8004570:	9b04      	ldr	r3, [sp, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f73f aef4 	bgt.w	8004360 <_dtoa_r+0x970>
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	2b02      	cmp	r3, #2
 800457c:	f77f aef0 	ble.w	8004360 <_dtoa_r+0x970>
 8004580:	e6b8      	b.n	80042f4 <_dtoa_r+0x904>
 8004582:	bf00      	nop
 8004584:	080057d7 	.word	0x080057d7
 8004588:	080057f9 	.word	0x080057f9

0800458c <_localeconv_r>:
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <_localeconv_r+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a18      	ldr	r0, [r3, #32]
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <_localeconv_r+0x18>)
 8004594:	2800      	cmp	r0, #0
 8004596:	bf08      	it	eq
 8004598:	4618      	moveq	r0, r3
 800459a:	30f0      	adds	r0, #240	; 0xf0
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000024 	.word	0x20000024
 80045a4:	20000528 	.word	0x20000528

080045a8 <malloc>:
 80045a8:	4b02      	ldr	r3, [pc, #8]	; (80045b4 <malloc+0xc>)
 80045aa:	4601      	mov	r1, r0
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f000 b803 	b.w	80045b8 <_malloc_r>
 80045b2:	bf00      	nop
 80045b4:	20000024 	.word	0x20000024

080045b8 <_malloc_r>:
 80045b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	f101 040b 	add.w	r4, r1, #11
 80045c0:	2c16      	cmp	r4, #22
 80045c2:	4681      	mov	r9, r0
 80045c4:	d907      	bls.n	80045d6 <_malloc_r+0x1e>
 80045c6:	f034 0407 	bics.w	r4, r4, #7
 80045ca:	d505      	bpl.n	80045d8 <_malloc_r+0x20>
 80045cc:	230c      	movs	r3, #12
 80045ce:	f8c9 3000 	str.w	r3, [r9]
 80045d2:	2600      	movs	r6, #0
 80045d4:	e131      	b.n	800483a <_malloc_r+0x282>
 80045d6:	2410      	movs	r4, #16
 80045d8:	428c      	cmp	r4, r1
 80045da:	d3f7      	bcc.n	80045cc <_malloc_r+0x14>
 80045dc:	4648      	mov	r0, r9
 80045de:	f000 f9f9 	bl	80049d4 <__malloc_lock>
 80045e2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80045e6:	4d9c      	ldr	r5, [pc, #624]	; (8004858 <_malloc_r+0x2a0>)
 80045e8:	d236      	bcs.n	8004658 <_malloc_r+0xa0>
 80045ea:	f104 0208 	add.w	r2, r4, #8
 80045ee:	442a      	add	r2, r5
 80045f0:	f1a2 0108 	sub.w	r1, r2, #8
 80045f4:	6856      	ldr	r6, [r2, #4]
 80045f6:	428e      	cmp	r6, r1
 80045f8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80045fc:	d102      	bne.n	8004604 <_malloc_r+0x4c>
 80045fe:	68d6      	ldr	r6, [r2, #12]
 8004600:	42b2      	cmp	r2, r6
 8004602:	d010      	beq.n	8004626 <_malloc_r+0x6e>
 8004604:	6873      	ldr	r3, [r6, #4]
 8004606:	68f2      	ldr	r2, [r6, #12]
 8004608:	68b1      	ldr	r1, [r6, #8]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60ca      	str	r2, [r1, #12]
 8004610:	4433      	add	r3, r6
 8004612:	6091      	str	r1, [r2, #8]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	4648      	mov	r0, r9
 800461e:	f000 f9df 	bl	80049e0 <__malloc_unlock>
 8004622:	3608      	adds	r6, #8
 8004624:	e109      	b.n	800483a <_malloc_r+0x282>
 8004626:	3302      	adds	r3, #2
 8004628:	4a8c      	ldr	r2, [pc, #560]	; (800485c <_malloc_r+0x2a4>)
 800462a:	692e      	ldr	r6, [r5, #16]
 800462c:	4296      	cmp	r6, r2
 800462e:	4611      	mov	r1, r2
 8004630:	d06d      	beq.n	800470e <_malloc_r+0x156>
 8004632:	6870      	ldr	r0, [r6, #4]
 8004634:	f020 0003 	bic.w	r0, r0, #3
 8004638:	1b07      	subs	r7, r0, r4
 800463a:	2f0f      	cmp	r7, #15
 800463c:	dd47      	ble.n	80046ce <_malloc_r+0x116>
 800463e:	1933      	adds	r3, r6, r4
 8004640:	f044 0401 	orr.w	r4, r4, #1
 8004644:	6074      	str	r4, [r6, #4]
 8004646:	616b      	str	r3, [r5, #20]
 8004648:	612b      	str	r3, [r5, #16]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	609a      	str	r2, [r3, #8]
 800464e:	f047 0201 	orr.w	r2, r7, #1
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	5037      	str	r7, [r6, r0]
 8004656:	e7e1      	b.n	800461c <_malloc_r+0x64>
 8004658:	0a63      	lsrs	r3, r4, #9
 800465a:	d02a      	beq.n	80046b2 <_malloc_r+0xfa>
 800465c:	2b04      	cmp	r3, #4
 800465e:	d812      	bhi.n	8004686 <_malloc_r+0xce>
 8004660:	09a3      	lsrs	r3, r4, #6
 8004662:	3338      	adds	r3, #56	; 0x38
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800466a:	f1a2 0008 	sub.w	r0, r2, #8
 800466e:	6856      	ldr	r6, [r2, #4]
 8004670:	4286      	cmp	r6, r0
 8004672:	d006      	beq.n	8004682 <_malloc_r+0xca>
 8004674:	6872      	ldr	r2, [r6, #4]
 8004676:	f022 0203 	bic.w	r2, r2, #3
 800467a:	1b11      	subs	r1, r2, r4
 800467c:	290f      	cmp	r1, #15
 800467e:	dd1c      	ble.n	80046ba <_malloc_r+0x102>
 8004680:	3b01      	subs	r3, #1
 8004682:	3301      	adds	r3, #1
 8004684:	e7d0      	b.n	8004628 <_malloc_r+0x70>
 8004686:	2b14      	cmp	r3, #20
 8004688:	d801      	bhi.n	800468e <_malloc_r+0xd6>
 800468a:	335b      	adds	r3, #91	; 0x5b
 800468c:	e7ea      	b.n	8004664 <_malloc_r+0xac>
 800468e:	2b54      	cmp	r3, #84	; 0x54
 8004690:	d802      	bhi.n	8004698 <_malloc_r+0xe0>
 8004692:	0b23      	lsrs	r3, r4, #12
 8004694:	336e      	adds	r3, #110	; 0x6e
 8004696:	e7e5      	b.n	8004664 <_malloc_r+0xac>
 8004698:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800469c:	d802      	bhi.n	80046a4 <_malloc_r+0xec>
 800469e:	0be3      	lsrs	r3, r4, #15
 80046a0:	3377      	adds	r3, #119	; 0x77
 80046a2:	e7df      	b.n	8004664 <_malloc_r+0xac>
 80046a4:	f240 5254 	movw	r2, #1364	; 0x554
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d804      	bhi.n	80046b6 <_malloc_r+0xfe>
 80046ac:	0ca3      	lsrs	r3, r4, #18
 80046ae:	337c      	adds	r3, #124	; 0x7c
 80046b0:	e7d8      	b.n	8004664 <_malloc_r+0xac>
 80046b2:	233f      	movs	r3, #63	; 0x3f
 80046b4:	e7d6      	b.n	8004664 <_malloc_r+0xac>
 80046b6:	237e      	movs	r3, #126	; 0x7e
 80046b8:	e7d4      	b.n	8004664 <_malloc_r+0xac>
 80046ba:	2900      	cmp	r1, #0
 80046bc:	68f1      	ldr	r1, [r6, #12]
 80046be:	db04      	blt.n	80046ca <_malloc_r+0x112>
 80046c0:	68b3      	ldr	r3, [r6, #8]
 80046c2:	60d9      	str	r1, [r3, #12]
 80046c4:	608b      	str	r3, [r1, #8]
 80046c6:	18b3      	adds	r3, r6, r2
 80046c8:	e7a4      	b.n	8004614 <_malloc_r+0x5c>
 80046ca:	460e      	mov	r6, r1
 80046cc:	e7d0      	b.n	8004670 <_malloc_r+0xb8>
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	616a      	str	r2, [r5, #20]
 80046d2:	612a      	str	r2, [r5, #16]
 80046d4:	db05      	blt.n	80046e2 <_malloc_r+0x12a>
 80046d6:	4430      	add	r0, r6
 80046d8:	6843      	ldr	r3, [r0, #4]
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6043      	str	r3, [r0, #4]
 80046e0:	e79c      	b.n	800461c <_malloc_r+0x64>
 80046e2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80046e6:	d244      	bcs.n	8004772 <_malloc_r+0x1ba>
 80046e8:	08c0      	lsrs	r0, r0, #3
 80046ea:	1087      	asrs	r7, r0, #2
 80046ec:	2201      	movs	r2, #1
 80046ee:	fa02 f707 	lsl.w	r7, r2, r7
 80046f2:	686a      	ldr	r2, [r5, #4]
 80046f4:	3001      	adds	r0, #1
 80046f6:	433a      	orrs	r2, r7
 80046f8:	606a      	str	r2, [r5, #4]
 80046fa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80046fe:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004702:	60b7      	str	r7, [r6, #8]
 8004704:	3a08      	subs	r2, #8
 8004706:	60f2      	str	r2, [r6, #12]
 8004708:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800470c:	60fe      	str	r6, [r7, #12]
 800470e:	2001      	movs	r0, #1
 8004710:	109a      	asrs	r2, r3, #2
 8004712:	fa00 f202 	lsl.w	r2, r0, r2
 8004716:	6868      	ldr	r0, [r5, #4]
 8004718:	4282      	cmp	r2, r0
 800471a:	f200 80a1 	bhi.w	8004860 <_malloc_r+0x2a8>
 800471e:	4202      	tst	r2, r0
 8004720:	d106      	bne.n	8004730 <_malloc_r+0x178>
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	0052      	lsls	r2, r2, #1
 8004728:	4202      	tst	r2, r0
 800472a:	f103 0304 	add.w	r3, r3, #4
 800472e:	d0fa      	beq.n	8004726 <_malloc_r+0x16e>
 8004730:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004734:	46e0      	mov	r8, ip
 8004736:	469e      	mov	lr, r3
 8004738:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800473c:	4546      	cmp	r6, r8
 800473e:	d153      	bne.n	80047e8 <_malloc_r+0x230>
 8004740:	f10e 0e01 	add.w	lr, lr, #1
 8004744:	f01e 0f03 	tst.w	lr, #3
 8004748:	f108 0808 	add.w	r8, r8, #8
 800474c:	d1f4      	bne.n	8004738 <_malloc_r+0x180>
 800474e:	0798      	lsls	r0, r3, #30
 8004750:	d179      	bne.n	8004846 <_malloc_r+0x28e>
 8004752:	686b      	ldr	r3, [r5, #4]
 8004754:	ea23 0302 	bic.w	r3, r3, r2
 8004758:	606b      	str	r3, [r5, #4]
 800475a:	6868      	ldr	r0, [r5, #4]
 800475c:	0052      	lsls	r2, r2, #1
 800475e:	4282      	cmp	r2, r0
 8004760:	d87e      	bhi.n	8004860 <_malloc_r+0x2a8>
 8004762:	2a00      	cmp	r2, #0
 8004764:	d07c      	beq.n	8004860 <_malloc_r+0x2a8>
 8004766:	4673      	mov	r3, lr
 8004768:	4202      	tst	r2, r0
 800476a:	d1e1      	bne.n	8004730 <_malloc_r+0x178>
 800476c:	3304      	adds	r3, #4
 800476e:	0052      	lsls	r2, r2, #1
 8004770:	e7fa      	b.n	8004768 <_malloc_r+0x1b0>
 8004772:	0a42      	lsrs	r2, r0, #9
 8004774:	2a04      	cmp	r2, #4
 8004776:	d815      	bhi.n	80047a4 <_malloc_r+0x1ec>
 8004778:	0982      	lsrs	r2, r0, #6
 800477a:	3238      	adds	r2, #56	; 0x38
 800477c:	1c57      	adds	r7, r2, #1
 800477e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004782:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004786:	45be      	cmp	lr, r7
 8004788:	d126      	bne.n	80047d8 <_malloc_r+0x220>
 800478a:	2001      	movs	r0, #1
 800478c:	1092      	asrs	r2, r2, #2
 800478e:	fa00 f202 	lsl.w	r2, r0, r2
 8004792:	6868      	ldr	r0, [r5, #4]
 8004794:	4310      	orrs	r0, r2
 8004796:	6068      	str	r0, [r5, #4]
 8004798:	f8c6 e00c 	str.w	lr, [r6, #12]
 800479c:	60b7      	str	r7, [r6, #8]
 800479e:	f8ce 6008 	str.w	r6, [lr, #8]
 80047a2:	e7b3      	b.n	800470c <_malloc_r+0x154>
 80047a4:	2a14      	cmp	r2, #20
 80047a6:	d801      	bhi.n	80047ac <_malloc_r+0x1f4>
 80047a8:	325b      	adds	r2, #91	; 0x5b
 80047aa:	e7e7      	b.n	800477c <_malloc_r+0x1c4>
 80047ac:	2a54      	cmp	r2, #84	; 0x54
 80047ae:	d802      	bhi.n	80047b6 <_malloc_r+0x1fe>
 80047b0:	0b02      	lsrs	r2, r0, #12
 80047b2:	326e      	adds	r2, #110	; 0x6e
 80047b4:	e7e2      	b.n	800477c <_malloc_r+0x1c4>
 80047b6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80047ba:	d802      	bhi.n	80047c2 <_malloc_r+0x20a>
 80047bc:	0bc2      	lsrs	r2, r0, #15
 80047be:	3277      	adds	r2, #119	; 0x77
 80047c0:	e7dc      	b.n	800477c <_malloc_r+0x1c4>
 80047c2:	f240 5754 	movw	r7, #1364	; 0x554
 80047c6:	42ba      	cmp	r2, r7
 80047c8:	bf9a      	itte	ls
 80047ca:	0c82      	lsrls	r2, r0, #18
 80047cc:	327c      	addls	r2, #124	; 0x7c
 80047ce:	227e      	movhi	r2, #126	; 0x7e
 80047d0:	e7d4      	b.n	800477c <_malloc_r+0x1c4>
 80047d2:	68bf      	ldr	r7, [r7, #8]
 80047d4:	45be      	cmp	lr, r7
 80047d6:	d004      	beq.n	80047e2 <_malloc_r+0x22a>
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	f022 0203 	bic.w	r2, r2, #3
 80047de:	4290      	cmp	r0, r2
 80047e0:	d3f7      	bcc.n	80047d2 <_malloc_r+0x21a>
 80047e2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80047e6:	e7d7      	b.n	8004798 <_malloc_r+0x1e0>
 80047e8:	6870      	ldr	r0, [r6, #4]
 80047ea:	68f7      	ldr	r7, [r6, #12]
 80047ec:	f020 0003 	bic.w	r0, r0, #3
 80047f0:	eba0 0a04 	sub.w	sl, r0, r4
 80047f4:	f1ba 0f0f 	cmp.w	sl, #15
 80047f8:	dd10      	ble.n	800481c <_malloc_r+0x264>
 80047fa:	68b2      	ldr	r2, [r6, #8]
 80047fc:	1933      	adds	r3, r6, r4
 80047fe:	f044 0401 	orr.w	r4, r4, #1
 8004802:	6074      	str	r4, [r6, #4]
 8004804:	60d7      	str	r7, [r2, #12]
 8004806:	60ba      	str	r2, [r7, #8]
 8004808:	f04a 0201 	orr.w	r2, sl, #1
 800480c:	616b      	str	r3, [r5, #20]
 800480e:	612b      	str	r3, [r5, #16]
 8004810:	60d9      	str	r1, [r3, #12]
 8004812:	6099      	str	r1, [r3, #8]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	f846 a000 	str.w	sl, [r6, r0]
 800481a:	e6ff      	b.n	800461c <_malloc_r+0x64>
 800481c:	f1ba 0f00 	cmp.w	sl, #0
 8004820:	db0f      	blt.n	8004842 <_malloc_r+0x28a>
 8004822:	4430      	add	r0, r6
 8004824:	6843      	ldr	r3, [r0, #4]
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6043      	str	r3, [r0, #4]
 800482c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004830:	4648      	mov	r0, r9
 8004832:	60df      	str	r7, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	f000 f8d3 	bl	80049e0 <__malloc_unlock>
 800483a:	4630      	mov	r0, r6
 800483c:	b003      	add	sp, #12
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004842:	463e      	mov	r6, r7
 8004844:	e77a      	b.n	800473c <_malloc_r+0x184>
 8004846:	f85c 0908 	ldr.w	r0, [ip], #-8
 800484a:	4584      	cmp	ip, r0
 800484c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004850:	f43f af7d 	beq.w	800474e <_malloc_r+0x196>
 8004854:	e781      	b.n	800475a <_malloc_r+0x1a2>
 8004856:	bf00      	nop
 8004858:	20000118 	.word	0x20000118
 800485c:	20000120 	.word	0x20000120
 8004860:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004864:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004868:	f026 0603 	bic.w	r6, r6, #3
 800486c:	42b4      	cmp	r4, r6
 800486e:	d803      	bhi.n	8004878 <_malloc_r+0x2c0>
 8004870:	1b33      	subs	r3, r6, r4
 8004872:	2b0f      	cmp	r3, #15
 8004874:	f300 8096 	bgt.w	80049a4 <_malloc_r+0x3ec>
 8004878:	4a4f      	ldr	r2, [pc, #316]	; (80049b8 <_malloc_r+0x400>)
 800487a:	6817      	ldr	r7, [r2, #0]
 800487c:	4a4f      	ldr	r2, [pc, #316]	; (80049bc <_malloc_r+0x404>)
 800487e:	6811      	ldr	r1, [r2, #0]
 8004880:	3710      	adds	r7, #16
 8004882:	3101      	adds	r1, #1
 8004884:	eb0b 0306 	add.w	r3, fp, r6
 8004888:	4427      	add	r7, r4
 800488a:	d005      	beq.n	8004898 <_malloc_r+0x2e0>
 800488c:	494c      	ldr	r1, [pc, #304]	; (80049c0 <_malloc_r+0x408>)
 800488e:	3901      	subs	r1, #1
 8004890:	440f      	add	r7, r1
 8004892:	3101      	adds	r1, #1
 8004894:	4249      	negs	r1, r1
 8004896:	400f      	ands	r7, r1
 8004898:	4639      	mov	r1, r7
 800489a:	4648      	mov	r0, r9
 800489c:	9201      	str	r2, [sp, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	f000 fb74 	bl	8004f8c <_sbrk_r>
 80048a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80048a8:	4680      	mov	r8, r0
 80048aa:	d056      	beq.n	800495a <_malloc_r+0x3a2>
 80048ac:	9b00      	ldr	r3, [sp, #0]
 80048ae:	9a01      	ldr	r2, [sp, #4]
 80048b0:	4283      	cmp	r3, r0
 80048b2:	d901      	bls.n	80048b8 <_malloc_r+0x300>
 80048b4:	45ab      	cmp	fp, r5
 80048b6:	d150      	bne.n	800495a <_malloc_r+0x3a2>
 80048b8:	4842      	ldr	r0, [pc, #264]	; (80049c4 <_malloc_r+0x40c>)
 80048ba:	6801      	ldr	r1, [r0, #0]
 80048bc:	4543      	cmp	r3, r8
 80048be:	eb07 0e01 	add.w	lr, r7, r1
 80048c2:	f8c0 e000 	str.w	lr, [r0]
 80048c6:	4940      	ldr	r1, [pc, #256]	; (80049c8 <_malloc_r+0x410>)
 80048c8:	4682      	mov	sl, r0
 80048ca:	d113      	bne.n	80048f4 <_malloc_r+0x33c>
 80048cc:	420b      	tst	r3, r1
 80048ce:	d111      	bne.n	80048f4 <_malloc_r+0x33c>
 80048d0:	68ab      	ldr	r3, [r5, #8]
 80048d2:	443e      	add	r6, r7
 80048d4:	f046 0601 	orr.w	r6, r6, #1
 80048d8:	605e      	str	r6, [r3, #4]
 80048da:	4a3c      	ldr	r2, [pc, #240]	; (80049cc <_malloc_r+0x414>)
 80048dc:	f8da 3000 	ldr.w	r3, [sl]
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	428b      	cmp	r3, r1
 80048e4:	bf88      	it	hi
 80048e6:	6013      	strhi	r3, [r2, #0]
 80048e8:	4a39      	ldr	r2, [pc, #228]	; (80049d0 <_malloc_r+0x418>)
 80048ea:	6811      	ldr	r1, [r2, #0]
 80048ec:	428b      	cmp	r3, r1
 80048ee:	bf88      	it	hi
 80048f0:	6013      	strhi	r3, [r2, #0]
 80048f2:	e032      	b.n	800495a <_malloc_r+0x3a2>
 80048f4:	6810      	ldr	r0, [r2, #0]
 80048f6:	3001      	adds	r0, #1
 80048f8:	bf1b      	ittet	ne
 80048fa:	eba8 0303 	subne.w	r3, r8, r3
 80048fe:	4473      	addne	r3, lr
 8004900:	f8c2 8000 	streq.w	r8, [r2]
 8004904:	f8ca 3000 	strne.w	r3, [sl]
 8004908:	f018 0007 	ands.w	r0, r8, #7
 800490c:	bf1c      	itt	ne
 800490e:	f1c0 0008 	rsbne	r0, r0, #8
 8004912:	4480      	addne	r8, r0
 8004914:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <_malloc_r+0x408>)
 8004916:	4447      	add	r7, r8
 8004918:	4418      	add	r0, r3
 800491a:	400f      	ands	r7, r1
 800491c:	1bc7      	subs	r7, r0, r7
 800491e:	4639      	mov	r1, r7
 8004920:	4648      	mov	r0, r9
 8004922:	f000 fb33 	bl	8004f8c <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	bf08      	it	eq
 800492a:	4640      	moveq	r0, r8
 800492c:	f8da 3000 	ldr.w	r3, [sl]
 8004930:	f8c5 8008 	str.w	r8, [r5, #8]
 8004934:	bf08      	it	eq
 8004936:	2700      	moveq	r7, #0
 8004938:	eba0 0008 	sub.w	r0, r0, r8
 800493c:	443b      	add	r3, r7
 800493e:	4407      	add	r7, r0
 8004940:	f047 0701 	orr.w	r7, r7, #1
 8004944:	45ab      	cmp	fp, r5
 8004946:	f8ca 3000 	str.w	r3, [sl]
 800494a:	f8c8 7004 	str.w	r7, [r8, #4]
 800494e:	d0c4      	beq.n	80048da <_malloc_r+0x322>
 8004950:	2e0f      	cmp	r6, #15
 8004952:	d810      	bhi.n	8004976 <_malloc_r+0x3be>
 8004954:	2301      	movs	r3, #1
 8004956:	f8c8 3004 	str.w	r3, [r8, #4]
 800495a:	68ab      	ldr	r3, [r5, #8]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	f022 0203 	bic.w	r2, r2, #3
 8004962:	4294      	cmp	r4, r2
 8004964:	eba2 0304 	sub.w	r3, r2, r4
 8004968:	d801      	bhi.n	800496e <_malloc_r+0x3b6>
 800496a:	2b0f      	cmp	r3, #15
 800496c:	dc1a      	bgt.n	80049a4 <_malloc_r+0x3ec>
 800496e:	4648      	mov	r0, r9
 8004970:	f000 f836 	bl	80049e0 <__malloc_unlock>
 8004974:	e62d      	b.n	80045d2 <_malloc_r+0x1a>
 8004976:	f8db 3004 	ldr.w	r3, [fp, #4]
 800497a:	3e0c      	subs	r6, #12
 800497c:	f026 0607 	bic.w	r6, r6, #7
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	4333      	orrs	r3, r6
 8004986:	f8cb 3004 	str.w	r3, [fp, #4]
 800498a:	eb0b 0306 	add.w	r3, fp, r6
 800498e:	2205      	movs	r2, #5
 8004990:	2e0f      	cmp	r6, #15
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	d9a0      	bls.n	80048da <_malloc_r+0x322>
 8004998:	f10b 0108 	add.w	r1, fp, #8
 800499c:	4648      	mov	r0, r9
 800499e:	f000 fc03 	bl	80051a8 <_free_r>
 80049a2:	e79a      	b.n	80048da <_malloc_r+0x322>
 80049a4:	68ae      	ldr	r6, [r5, #8]
 80049a6:	f044 0201 	orr.w	r2, r4, #1
 80049aa:	4434      	add	r4, r6
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6072      	str	r2, [r6, #4]
 80049b2:	60ac      	str	r4, [r5, #8]
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	e631      	b.n	800461c <_malloc_r+0x64>
 80049b8:	20000af4 	.word	0x20000af4
 80049bc:	20000520 	.word	0x20000520
 80049c0:	00000080 	.word	0x00000080
 80049c4:	20000ac4 	.word	0x20000ac4
 80049c8:	0000007f 	.word	0x0000007f
 80049cc:	20000aec 	.word	0x20000aec
 80049d0:	20000af0 	.word	0x20000af0

080049d4 <__malloc_lock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	; (80049dc <__malloc_lock+0x8>)
 80049d6:	f000 bca3 	b.w	8005320 <__retarget_lock_acquire_recursive>
 80049da:	bf00      	nop
 80049dc:	20000bac 	.word	0x20000bac

080049e0 <__malloc_unlock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__malloc_unlock+0x8>)
 80049e2:	f000 bc9e 	b.w	8005322 <__retarget_lock_release_recursive>
 80049e6:	bf00      	nop
 80049e8:	20000bac 	.word	0x20000bac

080049ec <_Balloc>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049f0:	4604      	mov	r4, r0
 80049f2:	460e      	mov	r6, r1
 80049f4:	b93d      	cbnz	r5, 8004a06 <_Balloc+0x1a>
 80049f6:	2010      	movs	r0, #16
 80049f8:	f7ff fdd6 	bl	80045a8 <malloc>
 80049fc:	6260      	str	r0, [r4, #36]	; 0x24
 80049fe:	6045      	str	r5, [r0, #4]
 8004a00:	6085      	str	r5, [r0, #8]
 8004a02:	6005      	str	r5, [r0, #0]
 8004a04:	60c5      	str	r5, [r0, #12]
 8004a06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a08:	68eb      	ldr	r3, [r5, #12]
 8004a0a:	b183      	cbz	r3, 8004a2e <_Balloc+0x42>
 8004a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a14:	b9b8      	cbnz	r0, 8004a46 <_Balloc+0x5a>
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f506 	lsl.w	r5, r1, r6
 8004a1c:	1d6a      	adds	r2, r5, #5
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 fb3d 	bl	80050a0 <_calloc_r>
 8004a26:	b160      	cbz	r0, 8004a42 <_Balloc+0x56>
 8004a28:	6046      	str	r6, [r0, #4]
 8004a2a:	6085      	str	r5, [r0, #8]
 8004a2c:	e00e      	b.n	8004a4c <_Balloc+0x60>
 8004a2e:	2221      	movs	r2, #33	; 0x21
 8004a30:	2104      	movs	r1, #4
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 fb34 	bl	80050a0 <_calloc_r>
 8004a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a3a:	60e8      	str	r0, [r5, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e4      	bne.n	8004a0c <_Balloc+0x20>
 8004a42:	2000      	movs	r0, #0
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	6802      	ldr	r2, [r0, #0]
 8004a48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6103      	str	r3, [r0, #16]
 8004a50:	60c3      	str	r3, [r0, #12]
 8004a52:	bd70      	pop	{r4, r5, r6, pc}

08004a54 <_Bfree>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a58:	4606      	mov	r6, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	b93c      	cbnz	r4, 8004a6e <_Bfree+0x1a>
 8004a5e:	2010      	movs	r0, #16
 8004a60:	f7ff fda2 	bl	80045a8 <malloc>
 8004a64:	6270      	str	r0, [r6, #36]	; 0x24
 8004a66:	6044      	str	r4, [r0, #4]
 8004a68:	6084      	str	r4, [r0, #8]
 8004a6a:	6004      	str	r4, [r0, #0]
 8004a6c:	60c4      	str	r4, [r0, #12]
 8004a6e:	b13d      	cbz	r5, 8004a80 <_Bfree+0x2c>
 8004a70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004a72:	686a      	ldr	r2, [r5, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a7a:	6029      	str	r1, [r5, #0]
 8004a7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004a80:	bd70      	pop	{r4, r5, r6, pc}

08004a82 <__multadd>:
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	690d      	ldr	r5, [r1, #16]
 8004a88:	461f      	mov	r7, r3
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	f101 0e14 	add.w	lr, r1, #20
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8de 0000 	ldr.w	r0, [lr]
 8004a98:	b281      	uxth	r1, r0
 8004a9a:	fb02 7101 	mla	r1, r2, r1, r7
 8004a9e:	0c0f      	lsrs	r7, r1, #16
 8004aa0:	0c00      	lsrs	r0, r0, #16
 8004aa2:	fb02 7000 	mla	r0, r2, r0, r7
 8004aa6:	b289      	uxth	r1, r1
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004aae:	429d      	cmp	r5, r3
 8004ab0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004ab4:	f84e 1b04 	str.w	r1, [lr], #4
 8004ab8:	dcec      	bgt.n	8004a94 <__multadd+0x12>
 8004aba:	b1d7      	cbz	r7, 8004af2 <__multadd+0x70>
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	db12      	blt.n	8004ae8 <__multadd+0x66>
 8004ac2:	6861      	ldr	r1, [r4, #4]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	3101      	adds	r1, #1
 8004ac8:	f7ff ff90 	bl	80049ec <_Balloc>
 8004acc:	6922      	ldr	r2, [r4, #16]
 8004ace:	3202      	adds	r2, #2
 8004ad0:	f104 010c 	add.w	r1, r4, #12
 8004ad4:	4680      	mov	r8, r0
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	300c      	adds	r0, #12
 8004ada:	f7fd fedb 	bl	8002894 <memcpy>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff ffb7 	bl	8004a54 <_Bfree>
 8004ae6:	4644      	mov	r4, r8
 8004ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004aec:	3501      	adds	r5, #1
 8004aee:	615f      	str	r7, [r3, #20]
 8004af0:	6125      	str	r5, [r4, #16]
 8004af2:	4620      	mov	r0, r4
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004af8 <__hi0bits>:
 8004af8:	0c02      	lsrs	r2, r0, #16
 8004afa:	0412      	lsls	r2, r2, #16
 8004afc:	4603      	mov	r3, r0
 8004afe:	b9b2      	cbnz	r2, 8004b2e <__hi0bits+0x36>
 8004b00:	0403      	lsls	r3, r0, #16
 8004b02:	2010      	movs	r0, #16
 8004b04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b08:	bf04      	itt	eq
 8004b0a:	021b      	lsleq	r3, r3, #8
 8004b0c:	3008      	addeq	r0, #8
 8004b0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b12:	bf04      	itt	eq
 8004b14:	011b      	lsleq	r3, r3, #4
 8004b16:	3004      	addeq	r0, #4
 8004b18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b1c:	bf04      	itt	eq
 8004b1e:	009b      	lsleq	r3, r3, #2
 8004b20:	3002      	addeq	r0, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db06      	blt.n	8004b34 <__hi0bits+0x3c>
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	d503      	bpl.n	8004b32 <__hi0bits+0x3a>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	4770      	bx	lr
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e7e8      	b.n	8004b04 <__hi0bits+0xc>
 8004b32:	2020      	movs	r0, #32
 8004b34:	4770      	bx	lr

08004b36 <__lo0bits>:
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	f013 0207 	ands.w	r2, r3, #7
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	d00b      	beq.n	8004b58 <__lo0bits+0x22>
 8004b40:	07da      	lsls	r2, r3, #31
 8004b42:	d423      	bmi.n	8004b8c <__lo0bits+0x56>
 8004b44:	0798      	lsls	r0, r3, #30
 8004b46:	bf49      	itett	mi
 8004b48:	085b      	lsrmi	r3, r3, #1
 8004b4a:	089b      	lsrpl	r3, r3, #2
 8004b4c:	2001      	movmi	r0, #1
 8004b4e:	600b      	strmi	r3, [r1, #0]
 8004b50:	bf5c      	itt	pl
 8004b52:	600b      	strpl	r3, [r1, #0]
 8004b54:	2002      	movpl	r0, #2
 8004b56:	4770      	bx	lr
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	b9a8      	cbnz	r0, 8004b88 <__lo0bits+0x52>
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	2010      	movs	r0, #16
 8004b60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004b64:	bf04      	itt	eq
 8004b66:	0a1b      	lsreq	r3, r3, #8
 8004b68:	3008      	addeq	r0, #8
 8004b6a:	071a      	lsls	r2, r3, #28
 8004b6c:	bf04      	itt	eq
 8004b6e:	091b      	lsreq	r3, r3, #4
 8004b70:	3004      	addeq	r0, #4
 8004b72:	079a      	lsls	r2, r3, #30
 8004b74:	bf04      	itt	eq
 8004b76:	089b      	lsreq	r3, r3, #2
 8004b78:	3002      	addeq	r0, #2
 8004b7a:	07da      	lsls	r2, r3, #31
 8004b7c:	d402      	bmi.n	8004b84 <__lo0bits+0x4e>
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	d006      	beq.n	8004b90 <__lo0bits+0x5a>
 8004b82:	3001      	adds	r0, #1
 8004b84:	600b      	str	r3, [r1, #0]
 8004b86:	4770      	bx	lr
 8004b88:	4610      	mov	r0, r2
 8004b8a:	e7e9      	b.n	8004b60 <__lo0bits+0x2a>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	4770      	bx	lr
 8004b90:	2020      	movs	r0, #32
 8004b92:	4770      	bx	lr

08004b94 <__i2b>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	460c      	mov	r4, r1
 8004b98:	2101      	movs	r1, #1
 8004b9a:	f7ff ff27 	bl	80049ec <_Balloc>
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	6144      	str	r4, [r0, #20]
 8004ba2:	6102      	str	r2, [r0, #16]
 8004ba4:	bd10      	pop	{r4, pc}

08004ba6 <__multiply>:
 8004ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	4614      	mov	r4, r2
 8004bac:	690a      	ldr	r2, [r1, #16]
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bfb8      	it	lt
 8004bb4:	460b      	movlt	r3, r1
 8004bb6:	4689      	mov	r9, r1
 8004bb8:	bfbc      	itt	lt
 8004bba:	46a1      	movlt	r9, r4
 8004bbc:	461c      	movlt	r4, r3
 8004bbe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004bc2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004bc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004bce:	eb07 060a 	add.w	r6, r7, sl
 8004bd2:	429e      	cmp	r6, r3
 8004bd4:	bfc8      	it	gt
 8004bd6:	3101      	addgt	r1, #1
 8004bd8:	f7ff ff08 	bl	80049ec <_Balloc>
 8004bdc:	f100 0514 	add.w	r5, r0, #20
 8004be0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004be4:	462b      	mov	r3, r5
 8004be6:	2200      	movs	r2, #0
 8004be8:	4543      	cmp	r3, r8
 8004bea:	d316      	bcc.n	8004c1a <__multiply+0x74>
 8004bec:	f104 0214 	add.w	r2, r4, #20
 8004bf0:	f109 0114 	add.w	r1, r9, #20
 8004bf4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004bf8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	9c01      	ldr	r4, [sp, #4]
 8004c00:	4294      	cmp	r4, r2
 8004c02:	4613      	mov	r3, r2
 8004c04:	d80c      	bhi.n	8004c20 <__multiply+0x7a>
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	dd03      	ble.n	8004c12 <__multiply+0x6c>
 8004c0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d054      	beq.n	8004cbc <__multiply+0x116>
 8004c12:	6106      	str	r6, [r0, #16]
 8004c14:	b003      	add	sp, #12
 8004c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	f843 2b04 	str.w	r2, [r3], #4
 8004c1e:	e7e3      	b.n	8004be8 <__multiply+0x42>
 8004c20:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c24:	3204      	adds	r2, #4
 8004c26:	f1ba 0f00 	cmp.w	sl, #0
 8004c2a:	d020      	beq.n	8004c6e <__multiply+0xc8>
 8004c2c:	46ae      	mov	lr, r5
 8004c2e:	4689      	mov	r9, r1
 8004c30:	f04f 0c00 	mov.w	ip, #0
 8004c34:	f859 4b04 	ldr.w	r4, [r9], #4
 8004c38:	f8be b000 	ldrh.w	fp, [lr]
 8004c3c:	b2a3      	uxth	r3, r4
 8004c3e:	fb0a b303 	mla	r3, sl, r3, fp
 8004c42:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004c46:	f8de 4000 	ldr.w	r4, [lr]
 8004c4a:	4463      	add	r3, ip
 8004c4c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004c50:	fb0a c40b 	mla	r4, sl, fp, ip
 8004c54:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004c5e:	454f      	cmp	r7, r9
 8004c60:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004c64:	f84e 3b04 	str.w	r3, [lr], #4
 8004c68:	d8e4      	bhi.n	8004c34 <__multiply+0x8e>
 8004c6a:	f8ce c000 	str.w	ip, [lr]
 8004c6e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004c72:	f1b9 0f00 	cmp.w	r9, #0
 8004c76:	d01f      	beq.n	8004cb8 <__multiply+0x112>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	46ae      	mov	lr, r5
 8004c7c:	468c      	mov	ip, r1
 8004c7e:	f04f 0a00 	mov.w	sl, #0
 8004c82:	f8bc 4000 	ldrh.w	r4, [ip]
 8004c86:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c8a:	fb09 b404 	mla	r4, r9, r4, fp
 8004c8e:	44a2      	add	sl, r4
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004c96:	f84e 3b04 	str.w	r3, [lr], #4
 8004c9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c9e:	f8be 4000 	ldrh.w	r4, [lr]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	fb09 4303 	mla	r3, r9, r3, r4
 8004ca8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004cac:	4567      	cmp	r7, ip
 8004cae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cb2:	d8e6      	bhi.n	8004c82 <__multiply+0xdc>
 8004cb4:	f8ce 3000 	str.w	r3, [lr]
 8004cb8:	3504      	adds	r5, #4
 8004cba:	e7a0      	b.n	8004bfe <__multiply+0x58>
 8004cbc:	3e01      	subs	r6, #1
 8004cbe:	e7a2      	b.n	8004c06 <__multiply+0x60>

08004cc0 <__pow5mult>:
 8004cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f012 0203 	ands.w	r2, r2, #3
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	d007      	beq.n	8004ce0 <__pow5mult+0x20>
 8004cd0:	3a01      	subs	r2, #1
 8004cd2:	4c21      	ldr	r4, [pc, #132]	; (8004d58 <__pow5mult+0x98>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cda:	f7ff fed2 	bl	8004a82 <__multadd>
 8004cde:	4607      	mov	r7, r0
 8004ce0:	10ad      	asrs	r5, r5, #2
 8004ce2:	d035      	beq.n	8004d50 <__pow5mult+0x90>
 8004ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ce6:	b93c      	cbnz	r4, 8004cf8 <__pow5mult+0x38>
 8004ce8:	2010      	movs	r0, #16
 8004cea:	f7ff fc5d 	bl	80045a8 <malloc>
 8004cee:	6270      	str	r0, [r6, #36]	; 0x24
 8004cf0:	6044      	str	r4, [r0, #4]
 8004cf2:	6084      	str	r4, [r0, #8]
 8004cf4:	6004      	str	r4, [r0, #0]
 8004cf6:	60c4      	str	r4, [r0, #12]
 8004cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d00:	b94c      	cbnz	r4, 8004d16 <__pow5mult+0x56>
 8004d02:	f240 2171 	movw	r1, #625	; 0x271
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ff44 	bl	8004b94 <__i2b>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d12:	4604      	mov	r4, r0
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	07eb      	lsls	r3, r5, #31
 8004d1c:	d50a      	bpl.n	8004d34 <__pow5mult+0x74>
 8004d1e:	4639      	mov	r1, r7
 8004d20:	4622      	mov	r2, r4
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ff3f 	bl	8004ba6 <__multiply>
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4681      	mov	r9, r0
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f7ff fe91 	bl	8004a54 <_Bfree>
 8004d32:	464f      	mov	r7, r9
 8004d34:	106d      	asrs	r5, r5, #1
 8004d36:	d00b      	beq.n	8004d50 <__pow5mult+0x90>
 8004d38:	6820      	ldr	r0, [r4, #0]
 8004d3a:	b938      	cbnz	r0, 8004d4c <__pow5mult+0x8c>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7ff ff30 	bl	8004ba6 <__multiply>
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	f8c0 8000 	str.w	r8, [r0]
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	e7e4      	b.n	8004d1a <__pow5mult+0x5a>
 8004d50:	4638      	mov	r0, r7
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	bf00      	nop
 8004d58:	080058f8 	.word	0x080058f8

08004d5c <__lshift>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	460c      	mov	r4, r1
 8004d62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	6849      	ldr	r1, [r1, #4]
 8004d6a:	eb0a 0903 	add.w	r9, sl, r3
 8004d6e:	68a3      	ldr	r3, [r4, #8]
 8004d70:	4607      	mov	r7, r0
 8004d72:	4616      	mov	r6, r2
 8004d74:	f109 0501 	add.w	r5, r9, #1
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	db31      	blt.n	8004de0 <__lshift+0x84>
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7ff fe35 	bl	80049ec <_Balloc>
 8004d82:	2200      	movs	r2, #0
 8004d84:	4680      	mov	r8, r0
 8004d86:	f100 0314 	add.w	r3, r0, #20
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4552      	cmp	r2, sl
 8004d8e:	db2a      	blt.n	8004de6 <__lshift+0x8a>
 8004d90:	6920      	ldr	r0, [r4, #16]
 8004d92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d96:	f104 0114 	add.w	r1, r4, #20
 8004d9a:	f016 021f 	ands.w	r2, r6, #31
 8004d9e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004da2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004da6:	d022      	beq.n	8004dee <__lshift+0x92>
 8004da8:	f1c2 0c20 	rsb	ip, r2, #32
 8004dac:	2000      	movs	r0, #0
 8004dae:	680e      	ldr	r6, [r1, #0]
 8004db0:	4096      	lsls	r6, r2
 8004db2:	4330      	orrs	r0, r6
 8004db4:	f843 0b04 	str.w	r0, [r3], #4
 8004db8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004dbc:	458e      	cmp	lr, r1
 8004dbe:	fa20 f00c 	lsr.w	r0, r0, ip
 8004dc2:	d8f4      	bhi.n	8004dae <__lshift+0x52>
 8004dc4:	6018      	str	r0, [r3, #0]
 8004dc6:	b108      	cbz	r0, 8004dcc <__lshift+0x70>
 8004dc8:	f109 0502 	add.w	r5, r9, #2
 8004dcc:	3d01      	subs	r5, #1
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f8c8 5010 	str.w	r5, [r8, #16]
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f7ff fe3d 	bl	8004a54 <_Bfree>
 8004dda:	4640      	mov	r0, r8
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3101      	adds	r1, #1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	e7c8      	b.n	8004d78 <__lshift+0x1c>
 8004de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dea:	3201      	adds	r2, #1
 8004dec:	e7ce      	b.n	8004d8c <__lshift+0x30>
 8004dee:	3b04      	subs	r3, #4
 8004df0:	f851 2b04 	ldr.w	r2, [r1], #4
 8004df4:	f843 2f04 	str.w	r2, [r3, #4]!
 8004df8:	458e      	cmp	lr, r1
 8004dfa:	d8f9      	bhi.n	8004df0 <__lshift+0x94>
 8004dfc:	e7e6      	b.n	8004dcc <__lshift+0x70>

08004dfe <__mcmp>:
 8004dfe:	6903      	ldr	r3, [r0, #16]
 8004e00:	690a      	ldr	r2, [r1, #16]
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	b530      	push	{r4, r5, lr}
 8004e06:	d10c      	bne.n	8004e22 <__mcmp+0x24>
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	3014      	adds	r0, #20
 8004e0c:	3114      	adds	r1, #20
 8004e0e:	1884      	adds	r4, r0, r2
 8004e10:	4411      	add	r1, r2
 8004e12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e1a:	4295      	cmp	r5, r2
 8004e1c:	d003      	beq.n	8004e26 <__mcmp+0x28>
 8004e1e:	d305      	bcc.n	8004e2c <__mcmp+0x2e>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd30      	pop	{r4, r5, pc}
 8004e26:	42a0      	cmp	r0, r4
 8004e28:	d3f3      	bcc.n	8004e12 <__mcmp+0x14>
 8004e2a:	e7fa      	b.n	8004e22 <__mcmp+0x24>
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e7f7      	b.n	8004e22 <__mcmp+0x24>

08004e32 <__mdiff>:
 8004e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e36:	460d      	mov	r5, r1
 8004e38:	4607      	mov	r7, r0
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	4614      	mov	r4, r2
 8004e40:	f7ff ffdd 	bl	8004dfe <__mcmp>
 8004e44:	1e06      	subs	r6, r0, #0
 8004e46:	d108      	bne.n	8004e5a <__mdiff+0x28>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff fdce 	bl	80049ec <_Balloc>
 8004e50:	2301      	movs	r3, #1
 8004e52:	6103      	str	r3, [r0, #16]
 8004e54:	6146      	str	r6, [r0, #20]
 8004e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5a:	bfa4      	itt	ge
 8004e5c:	4623      	movge	r3, r4
 8004e5e:	462c      	movge	r4, r5
 8004e60:	4638      	mov	r0, r7
 8004e62:	6861      	ldr	r1, [r4, #4]
 8004e64:	bfa6      	itte	ge
 8004e66:	461d      	movge	r5, r3
 8004e68:	2600      	movge	r6, #0
 8004e6a:	2601      	movlt	r6, #1
 8004e6c:	f7ff fdbe 	bl	80049ec <_Balloc>
 8004e70:	692b      	ldr	r3, [r5, #16]
 8004e72:	60c6      	str	r6, [r0, #12]
 8004e74:	6926      	ldr	r6, [r4, #16]
 8004e76:	f105 0914 	add.w	r9, r5, #20
 8004e7a:	f104 0214 	add.w	r2, r4, #20
 8004e7e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004e82:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004e86:	f100 0514 	add.w	r5, r0, #20
 8004e8a:	f04f 0c00 	mov.w	ip, #0
 8004e8e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004e92:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e96:	fa1c f18a 	uxtah	r1, ip, sl
 8004e9a:	b2a3      	uxth	r3, r4
 8004e9c:	1ac9      	subs	r1, r1, r3
 8004e9e:	0c23      	lsrs	r3, r4, #16
 8004ea0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004ea4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ea8:	b289      	uxth	r1, r1
 8004eaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004eae:	45c8      	cmp	r8, r9
 8004eb0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004eb4:	4696      	mov	lr, r2
 8004eb6:	f845 3b04 	str.w	r3, [r5], #4
 8004eba:	d8e8      	bhi.n	8004e8e <__mdiff+0x5c>
 8004ebc:	45be      	cmp	lr, r7
 8004ebe:	d305      	bcc.n	8004ecc <__mdiff+0x9a>
 8004ec0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004ec4:	b18b      	cbz	r3, 8004eea <__mdiff+0xb8>
 8004ec6:	6106      	str	r6, [r0, #16]
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004ed0:	fa1c f381 	uxtah	r3, ip, r1
 8004ed4:	141a      	asrs	r2, r3, #16
 8004ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ee4:	f845 3b04 	str.w	r3, [r5], #4
 8004ee8:	e7e8      	b.n	8004ebc <__mdiff+0x8a>
 8004eea:	3e01      	subs	r6, #1
 8004eec:	e7e8      	b.n	8004ec0 <__mdiff+0x8e>

08004eee <__d2b>:
 8004eee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ef2:	460e      	mov	r6, r1
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	ec59 8b10 	vmov	r8, r9, d0
 8004efa:	4615      	mov	r5, r2
 8004efc:	f7ff fd76 	bl	80049ec <_Balloc>
 8004f00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f04:	4607      	mov	r7, r0
 8004f06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f0a:	bb34      	cbnz	r4, 8004f5a <__d2b+0x6c>
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	f1b8 0f00 	cmp.w	r8, #0
 8004f12:	d027      	beq.n	8004f64 <__d2b+0x76>
 8004f14:	a802      	add	r0, sp, #8
 8004f16:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004f1a:	f7ff fe0c 	bl	8004b36 <__lo0bits>
 8004f1e:	9900      	ldr	r1, [sp, #0]
 8004f20:	b1f0      	cbz	r0, 8004f60 <__d2b+0x72>
 8004f22:	9a01      	ldr	r2, [sp, #4]
 8004f24:	f1c0 0320 	rsb	r3, r0, #32
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	40c2      	lsrs	r2, r0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	9201      	str	r2, [sp, #4]
 8004f34:	9b01      	ldr	r3, [sp, #4]
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	2102      	movne	r1, #2
 8004f3e:	2101      	moveq	r1, #1
 8004f40:	6139      	str	r1, [r7, #16]
 8004f42:	b1c4      	cbz	r4, 8004f76 <__d2b+0x88>
 8004f44:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004f48:	4404      	add	r4, r0
 8004f4a:	6034      	str	r4, [r6, #0]
 8004f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f50:	6028      	str	r0, [r5, #0]
 8004f52:	4638      	mov	r0, r7
 8004f54:	b003      	add	sp, #12
 8004f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f5e:	e7d5      	b.n	8004f0c <__d2b+0x1e>
 8004f60:	6179      	str	r1, [r7, #20]
 8004f62:	e7e7      	b.n	8004f34 <__d2b+0x46>
 8004f64:	a801      	add	r0, sp, #4
 8004f66:	f7ff fde6 	bl	8004b36 <__lo0bits>
 8004f6a:	9b01      	ldr	r3, [sp, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6139      	str	r1, [r7, #16]
 8004f72:	3020      	adds	r0, #32
 8004f74:	e7e5      	b.n	8004f42 <__d2b+0x54>
 8004f76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004f7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f7e:	6030      	str	r0, [r6, #0]
 8004f80:	6918      	ldr	r0, [r3, #16]
 8004f82:	f7ff fdb9 	bl	8004af8 <__hi0bits>
 8004f86:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004f8a:	e7e1      	b.n	8004f50 <__d2b+0x62>

08004f8c <_sbrk_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4c06      	ldr	r4, [pc, #24]	; (8004fa8 <_sbrk_r+0x1c>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4605      	mov	r5, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	f000 fb7e 	bl	8005698 <_sbrk>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_sbrk_r+0x1a>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_sbrk_r+0x1a>
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	20000bb4 	.word	0x20000bb4

08004fac <__ssprint_r>:
 8004fac:	6893      	ldr	r3, [r2, #8]
 8004fae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb2:	4681      	mov	r9, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4617      	mov	r7, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d060      	beq.n	800507e <__ssprint_r+0xd2>
 8004fbc:	f04f 0b00 	mov.w	fp, #0
 8004fc0:	f8d2 a000 	ldr.w	sl, [r2]
 8004fc4:	465e      	mov	r6, fp
 8004fc6:	b356      	cbz	r6, 800501e <__ssprint_r+0x72>
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	d344      	bcc.n	8005058 <__ssprint_r+0xac>
 8004fce:	89a2      	ldrh	r2, [r4, #12]
 8004fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fd4:	d03e      	beq.n	8005054 <__ssprint_r+0xa8>
 8004fd6:	6825      	ldr	r5, [r4, #0]
 8004fd8:	6921      	ldr	r1, [r4, #16]
 8004fda:	eba5 0801 	sub.w	r8, r5, r1
 8004fde:	6965      	ldr	r5, [r4, #20]
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe6:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fea:	f108 0301 	add.w	r3, r8, #1
 8004fee:	4433      	add	r3, r6
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	bf38      	it	cc
 8004ff4:	461d      	movcc	r5, r3
 8004ff6:	0553      	lsls	r3, r2, #21
 8004ff8:	d546      	bpl.n	8005088 <__ssprint_r+0xdc>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f7ff fadb 	bl	80045b8 <_malloc_r>
 8005002:	b998      	cbnz	r0, 800502c <__ssprint_r+0x80>
 8005004:	230c      	movs	r3, #12
 8005006:	f8c9 3000 	str.w	r3, [r9]
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e031      	b.n	8005082 <__ssprint_r+0xd6>
 800501e:	f8da b000 	ldr.w	fp, [sl]
 8005022:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005026:	f10a 0a08 	add.w	sl, sl, #8
 800502a:	e7cc      	b.n	8004fc6 <__ssprint_r+0x1a>
 800502c:	4642      	mov	r2, r8
 800502e:	6921      	ldr	r1, [r4, #16]
 8005030:	9001      	str	r0, [sp, #4]
 8005032:	f7fd fc2f 	bl	8002894 <memcpy>
 8005036:	89a2      	ldrh	r2, [r4, #12]
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800503e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005042:	81a2      	strh	r2, [r4, #12]
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	6165      	str	r5, [r4, #20]
 8005048:	4443      	add	r3, r8
 800504a:	eba5 0508 	sub.w	r5, r5, r8
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	60a5      	str	r5, [r4, #8]
 8005052:	4633      	mov	r3, r6
 8005054:	429e      	cmp	r6, r3
 8005056:	d200      	bcs.n	800505a <__ssprint_r+0xae>
 8005058:	4633      	mov	r3, r6
 800505a:	461a      	mov	r2, r3
 800505c:	4659      	mov	r1, fp
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	f000 f971 	bl	8005348 <memmove>
 8005066:	68a2      	ldr	r2, [r4, #8]
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	60a2      	str	r2, [r4, #8]
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	4413      	add	r3, r2
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1b9e      	subs	r6, r3, r6
 8005078:	60be      	str	r6, [r7, #8]
 800507a:	2e00      	cmp	r6, #0
 800507c:	d1cf      	bne.n	800501e <__ssprint_r+0x72>
 800507e:	2000      	movs	r0, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	b003      	add	sp, #12
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	462a      	mov	r2, r5
 800508a:	4648      	mov	r0, r9
 800508c:	f000 f976 	bl	800537c <_realloc_r>
 8005090:	4603      	mov	r3, r0
 8005092:	2800      	cmp	r0, #0
 8005094:	d1d6      	bne.n	8005044 <__ssprint_r+0x98>
 8005096:	6921      	ldr	r1, [r4, #16]
 8005098:	4648      	mov	r0, r9
 800509a:	f000 f885 	bl	80051a8 <_free_r>
 800509e:	e7b1      	b.n	8005004 <__ssprint_r+0x58>

080050a0 <_calloc_r>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4351      	muls	r1, r2
 80050a4:	f7ff fa88 	bl	80045b8 <_malloc_r>
 80050a8:	4604      	mov	r4, r0
 80050aa:	b198      	cbz	r0, 80050d4 <_calloc_r+0x34>
 80050ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80050b0:	f022 0203 	bic.w	r2, r2, #3
 80050b4:	3a04      	subs	r2, #4
 80050b6:	2a24      	cmp	r2, #36	; 0x24
 80050b8:	d81b      	bhi.n	80050f2 <_calloc_r+0x52>
 80050ba:	2a13      	cmp	r2, #19
 80050bc:	d917      	bls.n	80050ee <_calloc_r+0x4e>
 80050be:	2100      	movs	r1, #0
 80050c0:	2a1b      	cmp	r2, #27
 80050c2:	6001      	str	r1, [r0, #0]
 80050c4:	6041      	str	r1, [r0, #4]
 80050c6:	d807      	bhi.n	80050d8 <_calloc_r+0x38>
 80050c8:	f100 0308 	add.w	r3, r0, #8
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd10      	pop	{r4, pc}
 80050d8:	2a24      	cmp	r2, #36	; 0x24
 80050da:	6081      	str	r1, [r0, #8]
 80050dc:	60c1      	str	r1, [r0, #12]
 80050de:	bf11      	iteee	ne
 80050e0:	f100 0310 	addne.w	r3, r0, #16
 80050e4:	6101      	streq	r1, [r0, #16]
 80050e6:	f100 0318 	addeq.w	r3, r0, #24
 80050ea:	6141      	streq	r1, [r0, #20]
 80050ec:	e7ee      	b.n	80050cc <_calloc_r+0x2c>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e7ec      	b.n	80050cc <_calloc_r+0x2c>
 80050f2:	2100      	movs	r1, #0
 80050f4:	f7fd fbd9 	bl	80028aa <memset>
 80050f8:	e7ec      	b.n	80050d4 <_calloc_r+0x34>
	...

080050fc <_malloc_trim_r>:
 80050fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005100:	4f25      	ldr	r7, [pc, #148]	; (8005198 <_malloc_trim_r+0x9c>)
 8005102:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80051a4 <_malloc_trim_r+0xa8>
 8005106:	4689      	mov	r9, r1
 8005108:	4606      	mov	r6, r0
 800510a:	f7ff fc63 	bl	80049d4 <__malloc_lock>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	685d      	ldr	r5, [r3, #4]
 8005112:	f1a8 0411 	sub.w	r4, r8, #17
 8005116:	f025 0503 	bic.w	r5, r5, #3
 800511a:	eba4 0409 	sub.w	r4, r4, r9
 800511e:	442c      	add	r4, r5
 8005120:	fbb4 f4f8 	udiv	r4, r4, r8
 8005124:	3c01      	subs	r4, #1
 8005126:	fb08 f404 	mul.w	r4, r8, r4
 800512a:	4544      	cmp	r4, r8
 800512c:	da05      	bge.n	800513a <_malloc_trim_r+0x3e>
 800512e:	4630      	mov	r0, r6
 8005130:	f7ff fc56 	bl	80049e0 <__malloc_unlock>
 8005134:	2000      	movs	r0, #0
 8005136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513a:	2100      	movs	r1, #0
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff ff25 	bl	8004f8c <_sbrk_r>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	442b      	add	r3, r5
 8005146:	4298      	cmp	r0, r3
 8005148:	d1f1      	bne.n	800512e <_malloc_trim_r+0x32>
 800514a:	4261      	negs	r1, r4
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff ff1d 	bl	8004f8c <_sbrk_r>
 8005152:	3001      	adds	r0, #1
 8005154:	d110      	bne.n	8005178 <_malloc_trim_r+0x7c>
 8005156:	2100      	movs	r1, #0
 8005158:	4630      	mov	r0, r6
 800515a:	f7ff ff17 	bl	8004f8c <_sbrk_r>
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	1a83      	subs	r3, r0, r2
 8005162:	2b0f      	cmp	r3, #15
 8005164:	dde3      	ble.n	800512e <_malloc_trim_r+0x32>
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <_malloc_trim_r+0xa0>)
 8005168:	6809      	ldr	r1, [r1, #0]
 800516a:	1a40      	subs	r0, r0, r1
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <_malloc_trim_r+0xa4>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6008      	str	r0, [r1, #0]
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	e7da      	b.n	800512e <_malloc_trim_r+0x32>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <_malloc_trim_r+0xa4>)
 800517c:	1b2d      	subs	r5, r5, r4
 800517e:	f045 0501 	orr.w	r5, r5, #1
 8005182:	605d      	str	r5, [r3, #4]
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	4630      	mov	r0, r6
 8005188:	1b1c      	subs	r4, r3, r4
 800518a:	6014      	str	r4, [r2, #0]
 800518c:	f7ff fc28 	bl	80049e0 <__malloc_unlock>
 8005190:	2001      	movs	r0, #1
 8005192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005196:	bf00      	nop
 8005198:	20000118 	.word	0x20000118
 800519c:	20000520 	.word	0x20000520
 80051a0:	20000ac4 	.word	0x20000ac4
 80051a4:	00000080 	.word	0x00000080

080051a8 <_free_r>:
 80051a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	4688      	mov	r8, r1
 80051b0:	2900      	cmp	r1, #0
 80051b2:	f000 80ab 	beq.w	800530c <_free_r+0x164>
 80051b6:	f7ff fc0d 	bl	80049d4 <__malloc_lock>
 80051ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80051be:	4d54      	ldr	r5, [pc, #336]	; (8005310 <_free_r+0x168>)
 80051c0:	f022 0001 	bic.w	r0, r2, #1
 80051c4:	f1a8 0308 	sub.w	r3, r8, #8
 80051c8:	181f      	adds	r7, r3, r0
 80051ca:	68a9      	ldr	r1, [r5, #8]
 80051cc:	687e      	ldr	r6, [r7, #4]
 80051ce:	428f      	cmp	r7, r1
 80051d0:	f026 0603 	bic.w	r6, r6, #3
 80051d4:	f002 0201 	and.w	r2, r2, #1
 80051d8:	d11b      	bne.n	8005212 <_free_r+0x6a>
 80051da:	4430      	add	r0, r6
 80051dc:	b93a      	cbnz	r2, 80051ee <_free_r+0x46>
 80051de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	4410      	add	r0, r2
 80051e6:	6899      	ldr	r1, [r3, #8]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	60ca      	str	r2, [r1, #12]
 80051ec:	6091      	str	r1, [r2, #8]
 80051ee:	f040 0201 	orr.w	r2, r0, #1
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	60ab      	str	r3, [r5, #8]
 80051f6:	4b47      	ldr	r3, [pc, #284]	; (8005314 <_free_r+0x16c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4298      	cmp	r0, r3
 80051fc:	d304      	bcc.n	8005208 <_free_r+0x60>
 80051fe:	4b46      	ldr	r3, [pc, #280]	; (8005318 <_free_r+0x170>)
 8005200:	4620      	mov	r0, r4
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	f7ff ff7a 	bl	80050fc <_malloc_trim_r>
 8005208:	4620      	mov	r0, r4
 800520a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	f7ff bbe7 	b.w	80049e0 <__malloc_unlock>
 8005212:	607e      	str	r6, [r7, #4]
 8005214:	2a00      	cmp	r2, #0
 8005216:	d139      	bne.n	800528c <_free_r+0xe4>
 8005218:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800521c:	1a5b      	subs	r3, r3, r1
 800521e:	4408      	add	r0, r1
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	f105 0e08 	add.w	lr, r5, #8
 8005226:	4571      	cmp	r1, lr
 8005228:	d032      	beq.n	8005290 <_free_r+0xe8>
 800522a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800522e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005232:	f8ce 1008 	str.w	r1, [lr, #8]
 8005236:	19b9      	adds	r1, r7, r6
 8005238:	6849      	ldr	r1, [r1, #4]
 800523a:	07c9      	lsls	r1, r1, #31
 800523c:	d40a      	bmi.n	8005254 <_free_r+0xac>
 800523e:	4430      	add	r0, r6
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	bb3a      	cbnz	r2, 8005294 <_free_r+0xec>
 8005244:	4e35      	ldr	r6, [pc, #212]	; (800531c <_free_r+0x174>)
 8005246:	42b1      	cmp	r1, r6
 8005248:	d124      	bne.n	8005294 <_free_r+0xec>
 800524a:	616b      	str	r3, [r5, #20]
 800524c:	612b      	str	r3, [r5, #16]
 800524e:	2201      	movs	r2, #1
 8005250:	60d9      	str	r1, [r3, #12]
 8005252:	6099      	str	r1, [r3, #8]
 8005254:	f040 0101 	orr.w	r1, r0, #1
 8005258:	6059      	str	r1, [r3, #4]
 800525a:	5018      	str	r0, [r3, r0]
 800525c:	2a00      	cmp	r2, #0
 800525e:	d1d3      	bne.n	8005208 <_free_r+0x60>
 8005260:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005264:	d21a      	bcs.n	800529c <_free_r+0xf4>
 8005266:	08c0      	lsrs	r0, r0, #3
 8005268:	1081      	asrs	r1, r0, #2
 800526a:	2201      	movs	r2, #1
 800526c:	408a      	lsls	r2, r1
 800526e:	6869      	ldr	r1, [r5, #4]
 8005270:	3001      	adds	r0, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	606a      	str	r2, [r5, #4]
 8005276:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800527a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800527e:	6099      	str	r1, [r3, #8]
 8005280:	3a08      	subs	r2, #8
 8005282:	60da      	str	r2, [r3, #12]
 8005284:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005288:	60cb      	str	r3, [r1, #12]
 800528a:	e7bd      	b.n	8005208 <_free_r+0x60>
 800528c:	2200      	movs	r2, #0
 800528e:	e7d2      	b.n	8005236 <_free_r+0x8e>
 8005290:	2201      	movs	r2, #1
 8005292:	e7d0      	b.n	8005236 <_free_r+0x8e>
 8005294:	68fe      	ldr	r6, [r7, #12]
 8005296:	60ce      	str	r6, [r1, #12]
 8005298:	60b1      	str	r1, [r6, #8]
 800529a:	e7db      	b.n	8005254 <_free_r+0xac>
 800529c:	0a42      	lsrs	r2, r0, #9
 800529e:	2a04      	cmp	r2, #4
 80052a0:	d813      	bhi.n	80052ca <_free_r+0x122>
 80052a2:	0982      	lsrs	r2, r0, #6
 80052a4:	3238      	adds	r2, #56	; 0x38
 80052a6:	1c51      	adds	r1, r2, #1
 80052a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80052ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80052b0:	428e      	cmp	r6, r1
 80052b2:	d124      	bne.n	80052fe <_free_r+0x156>
 80052b4:	2001      	movs	r0, #1
 80052b6:	1092      	asrs	r2, r2, #2
 80052b8:	fa00 f202 	lsl.w	r2, r0, r2
 80052bc:	6868      	ldr	r0, [r5, #4]
 80052be:	4302      	orrs	r2, r0
 80052c0:	606a      	str	r2, [r5, #4]
 80052c2:	60de      	str	r6, [r3, #12]
 80052c4:	6099      	str	r1, [r3, #8]
 80052c6:	60b3      	str	r3, [r6, #8]
 80052c8:	e7de      	b.n	8005288 <_free_r+0xe0>
 80052ca:	2a14      	cmp	r2, #20
 80052cc:	d801      	bhi.n	80052d2 <_free_r+0x12a>
 80052ce:	325b      	adds	r2, #91	; 0x5b
 80052d0:	e7e9      	b.n	80052a6 <_free_r+0xfe>
 80052d2:	2a54      	cmp	r2, #84	; 0x54
 80052d4:	d802      	bhi.n	80052dc <_free_r+0x134>
 80052d6:	0b02      	lsrs	r2, r0, #12
 80052d8:	326e      	adds	r2, #110	; 0x6e
 80052da:	e7e4      	b.n	80052a6 <_free_r+0xfe>
 80052dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80052e0:	d802      	bhi.n	80052e8 <_free_r+0x140>
 80052e2:	0bc2      	lsrs	r2, r0, #15
 80052e4:	3277      	adds	r2, #119	; 0x77
 80052e6:	e7de      	b.n	80052a6 <_free_r+0xfe>
 80052e8:	f240 5154 	movw	r1, #1364	; 0x554
 80052ec:	428a      	cmp	r2, r1
 80052ee:	bf9a      	itte	ls
 80052f0:	0c82      	lsrls	r2, r0, #18
 80052f2:	327c      	addls	r2, #124	; 0x7c
 80052f4:	227e      	movhi	r2, #126	; 0x7e
 80052f6:	e7d6      	b.n	80052a6 <_free_r+0xfe>
 80052f8:	6889      	ldr	r1, [r1, #8]
 80052fa:	428e      	cmp	r6, r1
 80052fc:	d004      	beq.n	8005308 <_free_r+0x160>
 80052fe:	684a      	ldr	r2, [r1, #4]
 8005300:	f022 0203 	bic.w	r2, r2, #3
 8005304:	4290      	cmp	r0, r2
 8005306:	d3f7      	bcc.n	80052f8 <_free_r+0x150>
 8005308:	68ce      	ldr	r6, [r1, #12]
 800530a:	e7da      	b.n	80052c2 <_free_r+0x11a>
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	20000118 	.word	0x20000118
 8005314:	20000524 	.word	0x20000524
 8005318:	20000af4 	.word	0x20000af4
 800531c:	20000120 	.word	0x20000120

08005320 <__retarget_lock_acquire_recursive>:
 8005320:	4770      	bx	lr

08005322 <__retarget_lock_release_recursive>:
 8005322:	4770      	bx	lr

08005324 <__ascii_mbtowc>:
 8005324:	b082      	sub	sp, #8
 8005326:	b901      	cbnz	r1, 800532a <__ascii_mbtowc+0x6>
 8005328:	a901      	add	r1, sp, #4
 800532a:	b142      	cbz	r2, 800533e <__ascii_mbtowc+0x1a>
 800532c:	b14b      	cbz	r3, 8005342 <__ascii_mbtowc+0x1e>
 800532e:	7813      	ldrb	r3, [r2, #0]
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	1c10      	adds	r0, r2, #0
 8005336:	bf18      	it	ne
 8005338:	2001      	movne	r0, #1
 800533a:	b002      	add	sp, #8
 800533c:	4770      	bx	lr
 800533e:	4610      	mov	r0, r2
 8005340:	e7fb      	b.n	800533a <__ascii_mbtowc+0x16>
 8005342:	f06f 0001 	mvn.w	r0, #1
 8005346:	e7f8      	b.n	800533a <__ascii_mbtowc+0x16>

08005348 <memmove>:
 8005348:	4288      	cmp	r0, r1
 800534a:	b510      	push	{r4, lr}
 800534c:	eb01 0302 	add.w	r3, r1, r2
 8005350:	d803      	bhi.n	800535a <memmove+0x12>
 8005352:	1e42      	subs	r2, r0, #1
 8005354:	4299      	cmp	r1, r3
 8005356:	d10c      	bne.n	8005372 <memmove+0x2a>
 8005358:	bd10      	pop	{r4, pc}
 800535a:	4298      	cmp	r0, r3
 800535c:	d2f9      	bcs.n	8005352 <memmove+0xa>
 800535e:	1881      	adds	r1, r0, r2
 8005360:	1ad2      	subs	r2, r2, r3
 8005362:	42d3      	cmn	r3, r2
 8005364:	d100      	bne.n	8005368 <memmove+0x20>
 8005366:	bd10      	pop	{r4, pc}
 8005368:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800536c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005370:	e7f7      	b.n	8005362 <memmove+0x1a>
 8005372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005376:	f802 4f01 	strb.w	r4, [r2, #1]!
 800537a:	e7eb      	b.n	8005354 <memmove+0xc>

0800537c <_realloc_r>:
 800537c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	4682      	mov	sl, r0
 8005382:	460c      	mov	r4, r1
 8005384:	b929      	cbnz	r1, 8005392 <_realloc_r+0x16>
 8005386:	4611      	mov	r1, r2
 8005388:	b003      	add	sp, #12
 800538a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538e:	f7ff b913 	b.w	80045b8 <_malloc_r>
 8005392:	9201      	str	r2, [sp, #4]
 8005394:	f7ff fb1e 	bl	80049d4 <__malloc_lock>
 8005398:	9a01      	ldr	r2, [sp, #4]
 800539a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800539e:	f102 080b 	add.w	r8, r2, #11
 80053a2:	f1b8 0f16 	cmp.w	r8, #22
 80053a6:	f1a4 0908 	sub.w	r9, r4, #8
 80053aa:	f025 0603 	bic.w	r6, r5, #3
 80053ae:	d90a      	bls.n	80053c6 <_realloc_r+0x4a>
 80053b0:	f038 0807 	bics.w	r8, r8, #7
 80053b4:	d509      	bpl.n	80053ca <_realloc_r+0x4e>
 80053b6:	230c      	movs	r3, #12
 80053b8:	f8ca 3000 	str.w	r3, [sl]
 80053bc:	2700      	movs	r7, #0
 80053be:	4638      	mov	r0, r7
 80053c0:	b003      	add	sp, #12
 80053c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c6:	f04f 0810 	mov.w	r8, #16
 80053ca:	4590      	cmp	r8, r2
 80053cc:	d3f3      	bcc.n	80053b6 <_realloc_r+0x3a>
 80053ce:	45b0      	cmp	r8, r6
 80053d0:	f340 8145 	ble.w	800565e <_realloc_r+0x2e2>
 80053d4:	4ba8      	ldr	r3, [pc, #672]	; (8005678 <_realloc_r+0x2fc>)
 80053d6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80053da:	eb09 0106 	add.w	r1, r9, r6
 80053de:	4571      	cmp	r1, lr
 80053e0:	469b      	mov	fp, r3
 80053e2:	684b      	ldr	r3, [r1, #4]
 80053e4:	d005      	beq.n	80053f2 <_realloc_r+0x76>
 80053e6:	f023 0001 	bic.w	r0, r3, #1
 80053ea:	4408      	add	r0, r1
 80053ec:	6840      	ldr	r0, [r0, #4]
 80053ee:	07c7      	lsls	r7, r0, #31
 80053f0:	d447      	bmi.n	8005482 <_realloc_r+0x106>
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	4571      	cmp	r1, lr
 80053f8:	eb06 0703 	add.w	r7, r6, r3
 80053fc:	d119      	bne.n	8005432 <_realloc_r+0xb6>
 80053fe:	f108 0010 	add.w	r0, r8, #16
 8005402:	4287      	cmp	r7, r0
 8005404:	db3f      	blt.n	8005486 <_realloc_r+0x10a>
 8005406:	eb09 0308 	add.w	r3, r9, r8
 800540a:	eba7 0708 	sub.w	r7, r7, r8
 800540e:	f047 0701 	orr.w	r7, r7, #1
 8005412:	f8cb 3008 	str.w	r3, [fp, #8]
 8005416:	605f      	str	r7, [r3, #4]
 8005418:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	ea43 0308 	orr.w	r3, r3, r8
 8005424:	f844 3c04 	str.w	r3, [r4, #-4]
 8005428:	4650      	mov	r0, sl
 800542a:	f7ff fad9 	bl	80049e0 <__malloc_unlock>
 800542e:	4627      	mov	r7, r4
 8005430:	e7c5      	b.n	80053be <_realloc_r+0x42>
 8005432:	45b8      	cmp	r8, r7
 8005434:	dc27      	bgt.n	8005486 <_realloc_r+0x10a>
 8005436:	68cb      	ldr	r3, [r1, #12]
 8005438:	688a      	ldr	r2, [r1, #8]
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	eba7 0008 	sub.w	r0, r7, r8
 8005442:	280f      	cmp	r0, #15
 8005444:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005448:	eb09 0207 	add.w	r2, r9, r7
 800544c:	f240 8109 	bls.w	8005662 <_realloc_r+0x2e6>
 8005450:	eb09 0108 	add.w	r1, r9, r8
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	ea43 0308 	orr.w	r3, r3, r8
 800545c:	f040 0001 	orr.w	r0, r0, #1
 8005460:	f8c9 3004 	str.w	r3, [r9, #4]
 8005464:	6048      	str	r0, [r1, #4]
 8005466:	6853      	ldr	r3, [r2, #4]
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	3108      	adds	r1, #8
 8005470:	4650      	mov	r0, sl
 8005472:	f7ff fe99 	bl	80051a8 <_free_r>
 8005476:	4650      	mov	r0, sl
 8005478:	f7ff fab2 	bl	80049e0 <__malloc_unlock>
 800547c:	f109 0708 	add.w	r7, r9, #8
 8005480:	e79d      	b.n	80053be <_realloc_r+0x42>
 8005482:	2300      	movs	r3, #0
 8005484:	4619      	mov	r1, r3
 8005486:	07e8      	lsls	r0, r5, #31
 8005488:	f100 8084 	bmi.w	8005594 <_realloc_r+0x218>
 800548c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005490:	eba9 0505 	sub.w	r5, r9, r5
 8005494:	6868      	ldr	r0, [r5, #4]
 8005496:	f020 0003 	bic.w	r0, r0, #3
 800549a:	4430      	add	r0, r6
 800549c:	2900      	cmp	r1, #0
 800549e:	d076      	beq.n	800558e <_realloc_r+0x212>
 80054a0:	4571      	cmp	r1, lr
 80054a2:	d150      	bne.n	8005546 <_realloc_r+0x1ca>
 80054a4:	4403      	add	r3, r0
 80054a6:	f108 0110 	add.w	r1, r8, #16
 80054aa:	428b      	cmp	r3, r1
 80054ac:	db6f      	blt.n	800558e <_realloc_r+0x212>
 80054ae:	462f      	mov	r7, r5
 80054b0:	68ea      	ldr	r2, [r5, #12]
 80054b2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80054b6:	60ca      	str	r2, [r1, #12]
 80054b8:	6091      	str	r1, [r2, #8]
 80054ba:	1f32      	subs	r2, r6, #4
 80054bc:	2a24      	cmp	r2, #36	; 0x24
 80054be:	d83b      	bhi.n	8005538 <_realloc_r+0x1bc>
 80054c0:	2a13      	cmp	r2, #19
 80054c2:	d936      	bls.n	8005532 <_realloc_r+0x1b6>
 80054c4:	6821      	ldr	r1, [r4, #0]
 80054c6:	60a9      	str	r1, [r5, #8]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	60e9      	str	r1, [r5, #12]
 80054cc:	2a1b      	cmp	r2, #27
 80054ce:	d81c      	bhi.n	800550a <_realloc_r+0x18e>
 80054d0:	f105 0210 	add.w	r2, r5, #16
 80054d4:	f104 0108 	add.w	r1, r4, #8
 80054d8:	6808      	ldr	r0, [r1, #0]
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	6848      	ldr	r0, [r1, #4]
 80054de:	6050      	str	r0, [r2, #4]
 80054e0:	6889      	ldr	r1, [r1, #8]
 80054e2:	6091      	str	r1, [r2, #8]
 80054e4:	eb05 0208 	add.w	r2, r5, r8
 80054e8:	eba3 0308 	sub.w	r3, r3, r8
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	f8cb 2008 	str.w	r2, [fp, #8]
 80054f4:	6053      	str	r3, [r2, #4]
 80054f6:	686b      	ldr	r3, [r5, #4]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	ea43 0308 	orr.w	r3, r3, r8
 8005500:	606b      	str	r3, [r5, #4]
 8005502:	4650      	mov	r0, sl
 8005504:	f7ff fa6c 	bl	80049e0 <__malloc_unlock>
 8005508:	e759      	b.n	80053be <_realloc_r+0x42>
 800550a:	68a1      	ldr	r1, [r4, #8]
 800550c:	6129      	str	r1, [r5, #16]
 800550e:	68e1      	ldr	r1, [r4, #12]
 8005510:	6169      	str	r1, [r5, #20]
 8005512:	2a24      	cmp	r2, #36	; 0x24
 8005514:	bf01      	itttt	eq
 8005516:	6922      	ldreq	r2, [r4, #16]
 8005518:	61aa      	streq	r2, [r5, #24]
 800551a:	6960      	ldreq	r0, [r4, #20]
 800551c:	61e8      	streq	r0, [r5, #28]
 800551e:	bf19      	ittee	ne
 8005520:	f105 0218 	addne.w	r2, r5, #24
 8005524:	f104 0110 	addne.w	r1, r4, #16
 8005528:	f105 0220 	addeq.w	r2, r5, #32
 800552c:	f104 0118 	addeq.w	r1, r4, #24
 8005530:	e7d2      	b.n	80054d8 <_realloc_r+0x15c>
 8005532:	463a      	mov	r2, r7
 8005534:	4621      	mov	r1, r4
 8005536:	e7cf      	b.n	80054d8 <_realloc_r+0x15c>
 8005538:	4621      	mov	r1, r4
 800553a:	4638      	mov	r0, r7
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	f7ff ff03 	bl	8005348 <memmove>
 8005542:	9b01      	ldr	r3, [sp, #4]
 8005544:	e7ce      	b.n	80054e4 <_realloc_r+0x168>
 8005546:	18c7      	adds	r7, r0, r3
 8005548:	45b8      	cmp	r8, r7
 800554a:	dc20      	bgt.n	800558e <_realloc_r+0x212>
 800554c:	68cb      	ldr	r3, [r1, #12]
 800554e:	688a      	ldr	r2, [r1, #8]
 8005550:	60d3      	str	r3, [r2, #12]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	4628      	mov	r0, r5
 8005556:	68eb      	ldr	r3, [r5, #12]
 8005558:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800555c:	60d3      	str	r3, [r2, #12]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	1f32      	subs	r2, r6, #4
 8005562:	2a24      	cmp	r2, #36	; 0x24
 8005564:	d842      	bhi.n	80055ec <_realloc_r+0x270>
 8005566:	2a13      	cmp	r2, #19
 8005568:	d93e      	bls.n	80055e8 <_realloc_r+0x26c>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	60ab      	str	r3, [r5, #8]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	60eb      	str	r3, [r5, #12]
 8005572:	2a1b      	cmp	r2, #27
 8005574:	d824      	bhi.n	80055c0 <_realloc_r+0x244>
 8005576:	f105 0010 	add.w	r0, r5, #16
 800557a:	f104 0308 	add.w	r3, r4, #8
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	6002      	str	r2, [r0, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	6042      	str	r2, [r0, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	6083      	str	r3, [r0, #8]
 800558a:	46a9      	mov	r9, r5
 800558c:	e757      	b.n	800543e <_realloc_r+0xc2>
 800558e:	4580      	cmp	r8, r0
 8005590:	4607      	mov	r7, r0
 8005592:	dddf      	ble.n	8005554 <_realloc_r+0x1d8>
 8005594:	4611      	mov	r1, r2
 8005596:	4650      	mov	r0, sl
 8005598:	f7ff f80e 	bl	80045b8 <_malloc_r>
 800559c:	4607      	mov	r7, r0
 800559e:	2800      	cmp	r0, #0
 80055a0:	d0af      	beq.n	8005502 <_realloc_r+0x186>
 80055a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80055a6:	f023 0301 	bic.w	r3, r3, #1
 80055aa:	f1a0 0208 	sub.w	r2, r0, #8
 80055ae:	444b      	add	r3, r9
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d11f      	bne.n	80055f4 <_realloc_r+0x278>
 80055b4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80055b8:	f027 0703 	bic.w	r7, r7, #3
 80055bc:	4437      	add	r7, r6
 80055be:	e73e      	b.n	800543e <_realloc_r+0xc2>
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	612b      	str	r3, [r5, #16]
 80055c4:	68e3      	ldr	r3, [r4, #12]
 80055c6:	616b      	str	r3, [r5, #20]
 80055c8:	2a24      	cmp	r2, #36	; 0x24
 80055ca:	bf01      	itttt	eq
 80055cc:	6923      	ldreq	r3, [r4, #16]
 80055ce:	61ab      	streq	r3, [r5, #24]
 80055d0:	6962      	ldreq	r2, [r4, #20]
 80055d2:	61ea      	streq	r2, [r5, #28]
 80055d4:	bf19      	ittee	ne
 80055d6:	f105 0018 	addne.w	r0, r5, #24
 80055da:	f104 0310 	addne.w	r3, r4, #16
 80055de:	f105 0020 	addeq.w	r0, r5, #32
 80055e2:	f104 0318 	addeq.w	r3, r4, #24
 80055e6:	e7ca      	b.n	800557e <_realloc_r+0x202>
 80055e8:	4623      	mov	r3, r4
 80055ea:	e7c8      	b.n	800557e <_realloc_r+0x202>
 80055ec:	4621      	mov	r1, r4
 80055ee:	f7ff feab 	bl	8005348 <memmove>
 80055f2:	e7ca      	b.n	800558a <_realloc_r+0x20e>
 80055f4:	1f32      	subs	r2, r6, #4
 80055f6:	2a24      	cmp	r2, #36	; 0x24
 80055f8:	d82d      	bhi.n	8005656 <_realloc_r+0x2da>
 80055fa:	2a13      	cmp	r2, #19
 80055fc:	d928      	bls.n	8005650 <_realloc_r+0x2d4>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	6043      	str	r3, [r0, #4]
 8005606:	2a1b      	cmp	r2, #27
 8005608:	d80e      	bhi.n	8005628 <_realloc_r+0x2ac>
 800560a:	f100 0308 	add.w	r3, r0, #8
 800560e:	f104 0208 	add.w	r2, r4, #8
 8005612:	6811      	ldr	r1, [r2, #0]
 8005614:	6019      	str	r1, [r3, #0]
 8005616:	6851      	ldr	r1, [r2, #4]
 8005618:	6059      	str	r1, [r3, #4]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	4621      	mov	r1, r4
 8005620:	4650      	mov	r0, sl
 8005622:	f7ff fdc1 	bl	80051a8 <_free_r>
 8005626:	e76c      	b.n	8005502 <_realloc_r+0x186>
 8005628:	68a3      	ldr	r3, [r4, #8]
 800562a:	6083      	str	r3, [r0, #8]
 800562c:	68e3      	ldr	r3, [r4, #12]
 800562e:	60c3      	str	r3, [r0, #12]
 8005630:	2a24      	cmp	r2, #36	; 0x24
 8005632:	bf01      	itttt	eq
 8005634:	6923      	ldreq	r3, [r4, #16]
 8005636:	6103      	streq	r3, [r0, #16]
 8005638:	6961      	ldreq	r1, [r4, #20]
 800563a:	6141      	streq	r1, [r0, #20]
 800563c:	bf19      	ittee	ne
 800563e:	f100 0310 	addne.w	r3, r0, #16
 8005642:	f104 0210 	addne.w	r2, r4, #16
 8005646:	f100 0318 	addeq.w	r3, r0, #24
 800564a:	f104 0218 	addeq.w	r2, r4, #24
 800564e:	e7e0      	b.n	8005612 <_realloc_r+0x296>
 8005650:	4603      	mov	r3, r0
 8005652:	4622      	mov	r2, r4
 8005654:	e7dd      	b.n	8005612 <_realloc_r+0x296>
 8005656:	4621      	mov	r1, r4
 8005658:	f7ff fe76 	bl	8005348 <memmove>
 800565c:	e7df      	b.n	800561e <_realloc_r+0x2a2>
 800565e:	4637      	mov	r7, r6
 8005660:	e6ed      	b.n	800543e <_realloc_r+0xc2>
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	431f      	orrs	r7, r3
 8005668:	f8c9 7004 	str.w	r7, [r9, #4]
 800566c:	6853      	ldr	r3, [r2, #4]
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6053      	str	r3, [r2, #4]
 8005674:	e6ff      	b.n	8005476 <_realloc_r+0xfa>
 8005676:	bf00      	nop
 8005678:	20000118 	.word	0x20000118

0800567c <__ascii_wctomb>:
 800567c:	b149      	cbz	r1, 8005692 <__ascii_wctomb+0x16>
 800567e:	2aff      	cmp	r2, #255	; 0xff
 8005680:	bf85      	ittet	hi
 8005682:	238a      	movhi	r3, #138	; 0x8a
 8005684:	6003      	strhi	r3, [r0, #0]
 8005686:	700a      	strbls	r2, [r1, #0]
 8005688:	f04f 30ff 	movhi.w	r0, #4294967295
 800568c:	bf98      	it	ls
 800568e:	2001      	movls	r0, #1
 8005690:	4770      	bx	lr
 8005692:	4608      	mov	r0, r1
 8005694:	4770      	bx	lr
	...

08005698 <_sbrk>:
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <_sbrk+0x14>)
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	4602      	mov	r2, r0
 800569e:	b909      	cbnz	r1, 80056a4 <_sbrk+0xc>
 80056a0:	4903      	ldr	r1, [pc, #12]	; (80056b0 <_sbrk+0x18>)
 80056a2:	6019      	str	r1, [r3, #0]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	4402      	add	r2, r0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	4770      	bx	lr
 80056ac:	20000af8 	.word	0x20000af8
 80056b0:	20000bb8 	.word	0x20000bb8

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
